/*
Deployment script for HCMDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HCMDB"
:setvar DefaultFilePrefix "HCMDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[SMSLogs]...';


GO
CREATE TABLE [dbo].[SMSLogs] (
    [SMSLogID]             INT            IDENTITY (1, 1) NOT NULL,
    [BusinssSubCategoryID] INT            NOT NULL,
    [DetailID]             INT            NOT NULL,
    [Message]              NVARCHAR (MAX) NULL,
    [MobileNo]             NVARCHAR (20)  NOT NULL,
    [CreatedDate]          DATETIME       NOT NULL,
    [CreatedBy]            INT            NOT NULL,
    CONSTRAINT [PK_SMSLogs] PRIMARY KEY CLUSTERED ([SMSLogID] ASC)
);


GO
PRINT N'Creating [dbo].[AllowancesCalculationTypes]...';


GO
CREATE TABLE [dbo].[AllowancesCalculationTypes] (
    [AllowanceCalculationTypeID]   INT            NOT NULL,
    [AllowanceCalculationTypeName] NVARCHAR (500) NULL,
    CONSTRAINT [PK_AllwoancesCalcualtionTypes] PRIMARY KEY CLUSTERED ([AllowanceCalculationTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[SickVacationsTypes]...';


GO
CREATE TABLE [dbo].[SickVacationsTypes] (
    [SickVacationTypeID]   INT            IDENTITY (1, 1) NOT NULL,
    [SickVacationTypeName] NVARCHAR (100) NULL,
    CONSTRAINT [PK_SickVacationsTypes] PRIMARY KEY CLUSTERED ([SickVacationTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[SenioritysPointsDeclarations]...';


GO
CREATE TABLE [dbo].[SenioritysPointsDeclarations] (
    [SeniorityPointDeclarationID] INT            IDENTITY (1, 1) NOT NULL,
    [Months]                      INT            NOT NULL,
    [Points]                      DECIMAL (5, 2) NOT NULL,
    CONSTRAINT [PK_SenioritysPointsDeclarations] PRIMARY KEY CLUSTERED ([SeniorityPointDeclarationID] ASC)
);


GO
PRINT N'Creating [dbo].[ScholarshipsTypes]...';


GO
CREATE TABLE [dbo].[ScholarshipsTypes] (
    [ScholarshipTypeID] INT           NOT NULL,
    [ScholarshipType]   NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_ScholarshipTypes] PRIMARY KEY CLUSTERED ([ScholarshipTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[Allowances]...';


GO
CREATE TABLE [dbo].[Allowances] (
    [AllowanceID]                INT            IDENTITY (1, 1) NOT NULL,
    [AllowanceName]              NVARCHAR (150) NOT NULL,
    [AllowanceAmountTypeID]      INT            NOT NULL,
    [AllowanceCalculationTypeID] INT            NULL,
    [AllowanceAmount]            FLOAT (53)     NOT NULL,
    [IsActive]                   BIT            NOT NULL,
    [CreatedDate]                DATETIME       NOT NULL,
    [LastUpdatedDate]            DATETIME       NULL,
    CONSTRAINT [PK_Allowances] PRIMARY KEY CLUSTERED ([AllowanceID] ASC)
);


GO
PRINT N'Creating [dbo].[Allowances].[IX_Allowances]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Allowances]
    ON [dbo].[Allowances]([AllowanceName] ASC);


GO
PRINT N'Creating [dbo].[ScholarshipsDetails]...';


GO
CREATE TABLE [dbo].[ScholarshipsDetails] (
    [ScholarshipDetailID] INT            IDENTITY (1, 1) NOT NULL,
    [ScholarshipActionID] INT            NOT NULL,
    [ScholarshipID]       INT            NOT NULL,
    [FromDate]            DATE           NOT NULL,
    [ToDate]              DATE           NOT NULL,
    [Notes]               NVARCHAR (MAX) NULL,
    [CreatedBy]           INT            NOT NULL,
    [CreatedDate]         DATETIME       NOT NULL,
    [LastUpdatedBy]       INT            NULL,
    [LastUpdatedDate]     DATETIME       NULL,
    CONSTRAINT [PK_ScholarshipsDetails] PRIMARY KEY CLUSTERED ([ScholarshipDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[ScholarshipsActions]...';


GO
CREATE TABLE [dbo].[ScholarshipsActions] (
    [ScholarshipActionID]   INT           NOT NULL,
    [ScholarshipActionName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_ScholarshipsActions] PRIMARY KEY CLUSTERED ([ScholarshipActionID] ASC)
);


GO
PRINT N'Creating [dbo].[Scholarships]...';


GO
CREATE TABLE [dbo].[Scholarships] (
    [ScholarshipID]        INT            IDENTITY (1, 1) NOT NULL,
    [EmployeeCodeID]       INT            NOT NULL,
    [ScholarshipTypeID]    INT            NOT NULL,
    [Location]             NVARCHAR (151) NULL,
    [ScholarshipStartDate] DATE           NOT NULL,
    [ScholarshipEndDate]   DATE           NOT NULL,
    [QualificationID]      INT            NULL,
    [ScholarshipReason]    NVARCHAR (MAX) NULL,
    [CreatedDate]          DATETIME       NOT NULL,
    [LastUpdatedDate]      DATETIME       NULL,
    [KSACityID]            INT            NULL,
    [CountryID]            INT            NULL,
    [CreatedBy]            INT            NULL,
    [IsCanceled]           BIT            NOT NULL,
    [ScholarshipJoinDate]  DATE           NULL,
    [IsPassed]             BIT            NULL,
    CONSTRAINT [PK_EmployeesScholarships] PRIMARY KEY CLUSTERED ([ScholarshipID] ASC)
);


GO
PRINT N'Creating [dbo].[StopWorks]...';


GO
CREATE TABLE [dbo].[StopWorks] (
    [StopWorkID]                  INT            IDENTITY (1, 1) NOT NULL,
    [EmployeeCareerHistoryID]     INT            NOT NULL,
    [StopWorkTypeID]              INT            NOT NULL,
    [StopWorkStartDate]           DATE           NOT NULL,
    [StopWorkEndDate]             DATE           NULL,
    [StopPoint]                   NVARCHAR (500) NULL,
    [IsConvicted]                 BIT            NULL,
    [Note]                        NVARCHAR (MAX) NULL,
    [CreatedDate]                 DATETIME       NOT NULL,
    [LastUpdatedDate]             DATETIME       NULL,
    [CreatedBy]                   INT            NULL,
    [LastUpdatedBy]               INT            NULL,
    [StartStopWorkDecisionNumber] NVARCHAR (50)  NULL,
    [StartStopWorkDecisionDate]   DATETIME       NULL,
    [EndStopWorkDecisionNumber]   NVARCHAR (50)  NULL,
    [EndStopWorkDecisionDate]     DATETIME       NULL,
    CONSTRAINT [PK_StopWorks] PRIMARY KEY CLUSTERED ([StopWorkID] ASC)
);


GO
PRINT N'Creating [dbo].[RanksTicketsClasses]...';


GO
CREATE TABLE [dbo].[RanksTicketsClasses] (
    [RankTicketClassID] INT      IDENTITY (1, 1) NOT NULL,
    [RankID]            INT      NULL,
    [TicketClassID]     INT      NULL,
    [CreatedDate]       DATETIME NOT NULL,
    [LastUpdatedDate]   DATETIME NULL,
    CONSTRAINT [PK_RanksTicketsClasses] PRIMARY KEY CLUSTERED ([RankTicketClassID] ASC)
);


GO
PRINT N'Creating [dbo].[RanksCategories]...';


GO
CREATE TABLE [dbo].[RanksCategories] (
    [RankCategoryID]   INT           NOT NULL,
    [RankCategoryName] NVARCHAR (50) NOT NULL,
    [CreatedDate]      DATETIME      NOT NULL,
    [LastUpdatedDate]  DATETIME      NULL,
    CONSTRAINT [PK_RanksCategories] PRIMARY KEY CLUSTERED ([RankCategoryID] ASC)
);


GO
PRINT N'Creating [dbo].[PassengerOrdersOld]...';


GO
CREATE TABLE [dbo].[PassengerOrdersOld] (
    [PassengerOrderID]     INT      IDENTITY (1, 1) NOT NULL,
    [TravellingDate]       DATETIME NOT NULL,
    [RankID]               INT      NOT NULL,
    [TicketClassID]        INT      NOT NULL,
    [Going]                BIT      NOT NULL,
    [Returning]            BIT      NULL,
    [CreatedDate]          DATETIME NOT NULL,
    [LastUpdatedDate]      DATETIME NULL,
    [CreatedBy]            INT      NULL,
    [LastUpdatedBy]        INT      NULL,
    [PassengerOrderTypeID] INT      NULL,
    [DetailID]             INT      NOT NULL
);


GO
PRINT N'Creating [dbo].[Ranks]...';


GO
CREATE TABLE [dbo].[Ranks] (
    [RankID]               INT           IDENTITY (1, 1) NOT NULL,
    [RankCategoryID]       INT           NOT NULL,
    [RankName]             NVARCHAR (50) NOT NULL,
    [CreatedDate]          DATETIME      NOT NULL,
    [LastUpdatedDate]      DATETIME      NULL,
    [NextRankID]           INT           NULL,
    [TransfareAllowance]   FLOAT (53)    NULL,
    [InternalDelegation]   FLOAT (53)    NULL,
    [ExternalDelegation]   FLOAT (53)    NULL,
    [IsActiveForPromotion] BIT           NULL,
    CONSTRAINT [PK_Ranks] PRIMARY KEY CLUSTERED ([RankID] ASC)
);


GO
PRINT N'Creating [dbo].[QualificationsTypes]...';


GO
CREATE TABLE [dbo].[QualificationsTypes] (
    [QualificationTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [QualificationTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_QualificationsTypes] PRIMARY KEY CLUSTERED ([QualificationTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[ExactSpecializations]...';


GO
CREATE TABLE [dbo].[ExactSpecializations] (
    [ExactSpecializationID]   INT            IDENTITY (1, 1) NOT NULL,
    [GeneralSpecializationID] INT            NULL,
    [ExactSpecializationName] NVARCHAR (300) NULL,
    [CreatedDate]             DATETIME       NULL,
    [CreatedBy]               INT            NULL,
    [LastUpdatedDate]         DATETIME       NULL,
    [LastUpdatedBy]           INT            NULL,
    CONSTRAINT [PK_ExactSpecializations] PRIMARY KEY CLUSTERED ([ExactSpecializationID] ASC),
    CONSTRAINT [IX_ExactSpecializations] UNIQUE NONCLUSTERED ([ExactSpecializationName] ASC, [GeneralSpecializationID] ASC)
);


GO
PRINT N'Creating [dbo].[QualificationsDegrees]...';


GO
CREATE TABLE [dbo].[QualificationsDegrees] (
    [QualificationDegreeID]   INT            IDENTITY (1, 1) NOT NULL,
    [QualificationDegreeName] NVARCHAR (100) NULL,
    [Weight]                  INT            NULL,
    [DirectPoints]            DECIMAL (5, 2) NULL,
    [IndirectPoints]          DECIMAL (5, 2) NULL,
    [CreatedDate]             DATETIME       NULL,
    [CreatedBy]               INT            NULL,
    [LastUpdatedDate]         DATETIME       NULL,
    [LastUpdatedBy]           INT            NULL,
    CONSTRAINT [PK_QualificationsDegrees] PRIMARY KEY CLUSTERED ([QualificationDegreeID] ASC),
    CONSTRAINT [IX_QualificationsDegrees] UNIQUE NONCLUSTERED ([QualificationDegreeName] ASC)
);


GO
PRINT N'Creating [dbo].[EventTypes]...';


GO
CREATE TABLE [dbo].[EventTypes] (
    [EventTypeID] INT            NOT NULL,
    [Type]        NVARCHAR (255) NULL,
    CONSTRAINT [PK_EventTypes] PRIMARY KEY CLUSTERED ([EventTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[Qualifications]...';


GO
CREATE TABLE [dbo].[Qualifications] (
    [QualificationID]       INT            IDENTITY (1, 1) NOT NULL,
    [QualificationDegreeID] INT            NULL,
    [QualificationName]     NVARCHAR (400) NULL,
    [DirectPoints]          DECIMAL (5, 2) NULL,
    [IndirectPoints]        DECIMAL (5, 2) NULL,
    [CreatedDate]           DATETIME       NULL,
    [CreatedBy]             INT            NULL,
    [LastUpdatedDate]       DATETIME       NULL,
    [LastUpdatedBy]         INT            NULL,
    CONSTRAINT [PK_Qualifications] PRIMARY KEY CLUSTERED ([QualificationID] ASC),
    CONSTRAINT [IX_Qualifications] UNIQUE NONCLUSTERED ([QualificationDegreeID] ASC, [QualificationName] ASC)
);


GO
PRINT N'Creating [dbo].[EvaluationsQuarters]...';


GO
CREATE TABLE [dbo].[EvaluationsQuarters] (
    [EvaluationQuarterID]   INT           NOT NULL,
    [EvaluationQuarterName] NVARCHAR (50) NULL,
    CONSTRAINT [PK_EvaluationsQuarters] PRIMARY KEY CLUSTERED ([EvaluationQuarterID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsRecordsStatus]...';


GO
CREATE TABLE [dbo].[PromotionsRecordsStatus] (
    [PromotionRecordStatusID]   INT           NOT NULL,
    [PromotionRecordStatusName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_PromotionsRecordsStatus] PRIMARY KEY CLUSTERED ([PromotionRecordStatusID] ASC)
);


GO
PRINT N'Creating [dbo].[EvaluationPoints]...';


GO
CREATE TABLE [dbo].[EvaluationPoints] (
    [EvaluationPointID]       INT           IDENTITY (1, 1) NOT NULL,
    [Evaluation]              NVARCHAR (50) NOT NULL,
    [EvaluationPoint]         FLOAT (53)    NOT NULL,
    [IsExcludedFromPromotion] BIT           NOT NULL,
    CONSTRAINT [PK_EvaluationPoints] PRIMARY KEY CLUSTERED ([EvaluationPointID] ASC)
);


GO
PRINT N'Creating [dbo].[HolidaysTypes]...';


GO
CREATE TABLE [dbo].[HolidaysTypes] (
    [HolidayTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [HolidayTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_AnnualVacationsTypes] PRIMARY KEY CLUSTERED ([HolidayTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[VacationsActions]...';


GO
CREATE TABLE [dbo].[VacationsActions] (
    [VacationActionID]   INT           NOT NULL,
    [VacationActionName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_VacationsActions] PRIMARY KEY CLUSTERED ([VacationActionID] ASC)
);


GO
PRINT N'Creating [dbo].[HolidaysSettings]...';


GO
CREATE TABLE [dbo].[HolidaysSettings] (
    [HolidaySettingID]        INT      IDENTITY (1, 1) NOT NULL,
    [HolidayTypeID]           INT      NOT NULL,
    [MaturityYearID]          INT      NOT NULL,
    [HolidaySettingStartDate] DATE     NOT NULL,
    [HolidaySettingEndDate]   DATE     NOT NULL,
    [CreatedBy]               INT      NOT NULL,
    [CreatedDate]             DATETIME NOT NULL,
    [LastUpdatedBy]           INT      NULL,
    [LastUpdatedDate]         DATETIME NULL,
    CONSTRAINT [PK_HolidaysSettings] PRIMARY KEY CLUSTERED ([HolidaySettingID] ASC)
);


GO
PRINT N'Creating [dbo].[HolidaysSettings].[NonClusteredIndex-HolidayTypeMaturityYear]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [NonClusteredIndex-HolidayTypeMaturityYear]
    ON [dbo].[HolidaysSettings]([HolidayTypeID] ASC, [MaturityYearID] ASC);


GO
PRINT N'Creating [dbo].[Vacations]...';


GO
CREATE TABLE [dbo].[Vacations] (
    [VacationID]                INT      IDENTITY (1, 1) NOT NULL,
    [EmployeeCareerHistoryID]   INT      NOT NULL,
    [SickVacationTypeID]        INT      NULL,
    [VacationTypeID]            INT      NOT NULL,
    [VacationStartDate]         DATE     NOT NULL,
    [VacationEndDate]           DATE     NOT NULL,
    [StudiesVacationStartDate]  DATE     NULL,
    [IsCanceled]                BIT      NOT NULL,
    [OldBalanceConsumed]        INT      NULL,
    [InAdvConsumed]             INT      NULL,
    [HolidayAttendanceDetailID] INT      NULL,
    [CreatedDate]               DATETIME NOT NULL,
    [CreatedBy]                 INT      NOT NULL,
    [LastUpdatedDate]           DATETIME NULL,
    [LastUpdatedBy]             INT      NULL,
    [SportsSeasonID]            INT      NULL,
    [NormalVacationTypeID]      INT      NULL,
    [IsSickLeaveAmountPaid]     BIT      NULL,
    CONSTRAINT [PK_Vacations] PRIMARY KEY CLUSTERED ([VacationID] ASC)
);


GO
PRINT N'Creating [dbo].[Vacations].[Employee]...';


GO
CREATE NONCLUSTERED INDEX [Employee]
    ON [dbo].[Vacations]([EmployeeCareerHistoryID] ASC);


GO
ALTER INDEX [Employee]
    ON [dbo].[Vacations] DISABLE;


GO
PRINT N'Creating [dbo].[Vacations].[VacationStartDate]...';


GO
CREATE NONCLUSTERED INDEX [VacationStartDate]
    ON [dbo].[Vacations]([VacationStartDate] ASC);


GO
ALTER INDEX [VacationStartDate]
    ON [dbo].[Vacations] DISABLE;


GO
PRINT N'Creating [dbo].[Vacations].[VacationType]...';


GO
CREATE NONCLUSTERED INDEX [VacationType]
    ON [dbo].[Vacations]([VacationTypeID] ASC);


GO
ALTER INDEX [VacationType]
    ON [dbo].[Vacations] DISABLE;


GO
PRINT N'Creating [dbo].[RanksCategoriesVacationsBalances]...';


GO
CREATE TABLE [dbo].[RanksCategoriesVacationsBalances] (
    [RankCategoryVacationBalanceID] INT        IDENTITY (1, 1) NOT NULL,
    [RankCategoryID]                INT        NOT NULL,
    [VacationTypeID]                INT        NOT NULL,
    [VacationBalance]               FLOAT (53) NOT NULL,
    CONSTRAINT [PK_RanksCategoriesVacationsBalances] PRIMARY KEY CLUSTERED ([RankCategoryVacationBalanceID] ASC)
);


GO
PRINT N'Creating [dbo].[TTTTempNormalVacationsBalances]...';


GO
CREATE TABLE [dbo].[TTTTempNormalVacationsBalances] (
    [ID]                            INT             IDENTITY (1, 1) NOT NULL,
    [EmployeeCodeID]                INT             NOT NULL,
    [EmployeeCodeNo]                NVARCHAR (50)   NOT NULL,
    [EmployeeName]                  NVARCHAR (250)  NOT NULL,
    [RemainingOldBalance]           DECIMAL (18, 4) NOT NULL,
    [DeservedOldBalance]            DECIMAL (18, 4) NOT NULL,
    [ConsumedOldBalance]            DECIMAL (18, 4) NOT NULL,
    [DeservedCurrentBalance]        DECIMAL (18, 4) NOT NULL,
    [ConsumedCurrentBalance]        DECIMAL (18, 4) NOT NULL,
    [ExpiredCurrentBalance]         DECIMAL (18, 4) NOT NULL,
    [RemainingCurrentBalance]       DECIMAL (18, 4) NOT NULL,
    [InAdvanceBalance]              DECIMAL (18, 4) NOT NULL,
    [InAdvConsumed]                 DECIMAL (18, 4) NOT NULL,
    [TotalAvailableVacationBalance] DECIMAL (18, 4) NOT NULL,
    [TotalDeservedBalance]          DECIMAL (18, 4) NOT NULL,
    [TotalConsumedBalance]          DECIMAL (18, 4) NOT NULL,
    [TotalRemainingBalance]         DECIMAL (18, 4) NOT NULL
);


GO
PRINT N'Creating [dbo].[HolidaysAttendanceDetails]...';


GO
CREATE TABLE [dbo].[HolidaysAttendanceDetails] (
    [HolidayAttendanceDetailID] INT      IDENTITY (1, 1) NOT NULL,
    [EmployeeCareerHistoryID]   INT      NOT NULL,
    [HolidayAttendanceID]       INT      NOT NULL,
    [CreateDate]                DATETIME NOT NULL,
    [LastUpdatedDate]           DATETIME NULL,
    [CreatedBy]                 INT      NULL,
    [LastUpdatedBy]             INT      NULL,
    CONSTRAINT [PK_HolidaysAttendanceDetails_1] PRIMARY KEY CLUSTERED ([HolidayAttendanceDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[HolidaysAttendanceDetails].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[HolidaysAttendanceDetails]([EmployeeCareerHistoryID] ASC, [HolidayAttendanceID] ASC);


GO
PRINT N'Creating [dbo].[TransfersTypes]...';


GO
CREATE TABLE [dbo].[TransfersTypes] (
    [TransferTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [TransferTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_TransfersTypes] PRIMARY KEY CLUSTERED ([TransferTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[HolidaysAttendance]...';


GO
CREATE TABLE [dbo].[HolidaysAttendance] (
    [HolidayAttendanceID] INT      IDENTITY (1, 1) NOT NULL,
    [HolidaySettingID]    INT      NOT NULL,
    [CreatedBy]           INT      NOT NULL,
    [CreatedDate]         DATETIME NOT NULL,
    [LastUpdatedBy]       INT      NULL,
    [LastUpdatedDate]     DATETIME NULL,
    [OrganizationID]      INT      NULL,
    CONSTRAINT [PK_HolidaysAttendance] PRIMARY KEY CLUSTERED ([HolidayAttendanceID] ASC)
);


GO
PRINT N'Creating [dbo].[Transfers]...';


GO
CREATE TABLE [dbo].[Transfers] (
    [TransferID]              INT            IDENTITY (1, 1) NOT NULL,
    [EmployeeCareerHistoryID] INT            NOT NULL,
    [TransferTypeID]          INT            NOT NULL,
    [TransferDate]            DATE           NOT NULL,
    [Destination]             NVARCHAR (150) NOT NULL,
    [KSACityID]               INT            NOT NULL,
    [JobName]                 NVARCHAR (150) NULL,
    [RankName]                NVARCHAR (150) NULL,
    [JobCode]                 NVARCHAR (150) NULL,
    [OrganizationName]        NVARCHAR (150) NULL,
    [CareerDegreeName]        NVARCHAR (150) NULL,
    [CreatedDate]             DATETIME       NOT NULL,
    [LastUpdatedDate]         DATETIME       NULL,
    CONSTRAINT [PK_EmployeesTransfers_1] PRIMARY KEY CLUSTERED ([TransferID] ASC)
);


GO
PRINT N'Creating [dbo].[Transfers].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[Transfers]([EmployeeCareerHistoryID] ASC);


GO
PRINT N'Creating [dbo].[GovernmentFundsTypes]...';


GO
CREATE TABLE [dbo].[GovernmentFundsTypes] (
    [GovernmentFundTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [GovernmentFundTypeName] NVARCHAR (50) NOT NULL,
    [CreatedDate]            DATETIME      NOT NULL,
    [LastUpdatedDate]        DATETIME      NULL,
    [CreatedBy]              INT           NULL,
    [LastUpdatedBy]          INT           NULL,
    CONSTRAINT [PK_GovernmentFundsTypes] PRIMARY KEY CLUSTERED ([GovernmentFundTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[TicketsClasses]...';


GO
CREATE TABLE [dbo].[TicketsClasses] (
    [TicketClassID]   INT            IDENTITY (1, 1) NOT NULL,
    [TicketClassName] NVARCHAR (100) NOT NULL,
    [CreatedDate]     DATETIME       NOT NULL,
    [LastUpdatedDate] DATETIME       NULL,
    CONSTRAINT [PK_TicketsClasses] PRIMARY KEY CLUSTERED ([TicketClassID] ASC)
);


GO
PRINT N'Creating [dbo].[GovernmentFunds]...';


GO
CREATE TABLE [dbo].[GovernmentFunds] (
    [GovernmentFundID]          INT            IDENTITY (1, 1) NOT NULL,
    [EmployeeCodeID]            INT            NOT NULL,
    [GovernmentFundTypeID]      INT            NOT NULL,
    [GovernmentDeductionTypeID] INT            NOT NULL,
    [LoanNo]                    NVARCHAR (50)  NOT NULL,
    [LoanDate]                  DATE           NULL,
    [DeductionStartDate]        DATE           NOT NULL,
    [MonthlyDeductionAmount]    FLOAT (53)     NOT NULL,
    [TotalDeductionAmount]      FLOAT (53)     NOT NULL,
    [KSACityID]                 INT            NULL,
    [ContractNo]                NVARCHAR (200) NULL,
    [SponserToName]             NVARCHAR (500) NULL,
    [SponserToIDNo]             NVARCHAR (10)  NULL,
    [IsActive]                  BIT            NULL,
    [DeactiveDate]              DATE           NULL,
    [LetterNo]                  NVARCHAR (200) NULL,
    [LetterDate]                DATE           NULL,
    [Notes]                     NVARCHAR (MAX) NULL,
    [CreatedDate]               DATETIME       NOT NULL,
    [LastUpdatedDate]           DATETIME       NULL,
    [CreatedBy]                 INT            NULL,
    [LastUpdatedBy]             INT            NULL,
    CONSTRAINT [PK_GovernmentFunds] PRIMARY KEY CLUSTERED ([GovernmentFundID] ASC)
);


GO
PRINT N'Creating [dbo].[GovernmentDeductionsTypes]...';


GO
CREATE TABLE [dbo].[GovernmentDeductionsTypes] (
    [GovernmentDeductionTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [GovernmentDeductionTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_GovernmentDeductionTypes] PRIMARY KEY CLUSTERED ([GovernmentDeductionTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesDegreesUpgrades]...';


GO
CREATE TABLE [dbo].[EmployeesDegreesUpgrades] (
    [EmployeeDegreeUpgradeID]   INT      IDENTITY (1, 1) NOT NULL,
    [EmployeeDegreeUpgradeYear] INT      NOT NULL,
    [CreatedBy]                 INT      NOT NULL,
    [CreatedDate]               DATETIME NOT NULL,
    CONSTRAINT [PK_EmployeesDegreesUpgrades] PRIMARY KEY CLUSTERED ([EmployeeDegreeUpgradeID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesDegreesUpgrades].[IX_EmployeesDegreesUpgrades]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EmployeesDegreesUpgrades]
    ON [dbo].[EmployeesDegreesUpgrades]([EmployeeDegreeUpgradeYear] ASC);


GO
PRINT N'Creating [dbo].[TempNormalVacationsBalances]...';


GO
CREATE TABLE [dbo].[TempNormalVacationsBalances] (
    [ID]                            INT             IDENTITY (1, 1) NOT NULL,
    [EmployeeCodeID]                INT             NOT NULL,
    [EmployeeCodeNo]                NVARCHAR (50)   NOT NULL,
    [EmployeeName]                  NVARCHAR (250)  NOT NULL,
    [RemainingOldBalance]           DECIMAL (18, 4) NOT NULL,
    [DeservedOldBalance]            DECIMAL (18, 4) NOT NULL,
    [ConsumedOldBalance]            DECIMAL (18, 4) NOT NULL,
    [DeservedCurrentBalance]        DECIMAL (18, 4) NOT NULL,
    [ConsumedCurrentBalance]        DECIMAL (18, 4) NOT NULL,
    [ExpiredCurrentBalance]         DECIMAL (18, 4) NOT NULL,
    [RemainingCurrentBalance]       DECIMAL (18, 4) NOT NULL,
    [InAdvanceBalance]              DECIMAL (18, 4) NOT NULL,
    [InAdvConsumed]                 DECIMAL (18, 4) NOT NULL,
    [TotalAvailableVacationBalance] DECIMAL (18, 4) NOT NULL,
    [TotalDeservedBalance]          DECIMAL (18, 4) NOT NULL,
    [TotalConsumedBalance]          DECIMAL (18, 4) NOT NULL,
    [TotalRemainingBalance]         DECIMAL (18, 4) NOT NULL,
    [CreatedDate]                   DATETIME        NULL,
    CONSTRAINT [PK_TempNormalVacationsBalances] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[TempNormalVacationsBalances].[IX_TempNormalVacationsBalances]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_TempNormalVacationsBalances]
    ON [dbo].[TempNormalVacationsBalances]([EmployeeCodeID] ASC);


GO
PRINT N'Creating [dbo].[GeneralSpecializations]...';


GO
CREATE TABLE [dbo].[GeneralSpecializations] (
    [GeneralSpecializationID]   INT            IDENTITY (1, 1) NOT NULL,
    [QualificationID]           INT            NULL,
    [GeneralSpecializationName] NVARCHAR (300) NULL,
    [DirectPoints]              DECIMAL (5, 2) NULL,
    [IndirectPoints]            DECIMAL (5, 2) NULL,
    [CreatedDate]               DATETIME       NULL,
    [CreatedBy]                 INT            NULL,
    [LastUpdatedDate]           DATETIME       NULL,
    [LastUpdatedBy]             INT            NULL,
    CONSTRAINT [PK_GeneralSpecializations] PRIMARY KEY CLUSTERED ([GeneralSpecializationID] ASC),
    CONSTRAINT [IX_GeneralSpecializations] UNIQUE NONCLUSTERED ([QualificationID] ASC, [GeneralSpecializationName] ASC)
);


GO
PRINT N'Creating [dbo].[StopWorksTypes]...';


GO
CREATE TABLE [dbo].[StopWorksTypes] (
    [StopWorkTypeID]     INT           IDENTITY (1, 1) NOT NULL,
    [StopWorkCategoryID] INT           NOT NULL,
    [StopWorkTypeName]   NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_StopWorksTypes] PRIMARY KEY CLUSTERED ([StopWorkTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[Genders]...';


GO
CREATE TABLE [dbo].[Genders] (
    [GenderID]   INT           NOT NULL,
    [GenderName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_Genders] PRIMARY KEY CLUSTERED ([GenderID] ASC)
);


GO
PRINT N'Creating [dbo].[StopWorksCategories]...';


GO
CREATE TABLE [dbo].[StopWorksCategories] (
    [StopWorkCategoryID]   INT           IDENTITY (1, 1) NOT NULL,
    [StopWorkCategoryName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_StopWorksCategories] PRIMARY KEY CLUSTERED ([StopWorkCategoryID] ASC)
);


GO
PRINT N'Creating [dbo].[FinancialYears]...';


GO
CREATE TABLE [dbo].[FinancialYears] (
    [FinancialYearID] INT  IDENTITY (1, 1) NOT NULL,
    [FinancialYear]   INT  NOT NULL,
    [StartDate]       DATE NOT NULL,
    [EndDate]         DATE NOT NULL,
    CONSTRAINT [PK_FinancialYears] PRIMARY KEY CLUSTERED ([FinancialYearID] ASC)
);


GO
PRINT N'Creating [dbo].[FinancialYears].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[FinancialYears]([FinancialYear] ASC);


GO
PRINT N'Creating [dbo].[SportsSeasons]...';


GO
CREATE TABLE [dbo].[SportsSeasons] (
    [SportsSeasonID]          INT            IDENTITY (1, 1) NOT NULL,
    [MaturityYearID]          INT            NOT NULL,
    [SportsSeasonDescription] NVARCHAR (450) NOT NULL,
    [SportsSeasonStartDate]   DATE           NOT NULL,
    [SportsSeasonEndDate]     DATE           NOT NULL,
    [CreatedBy]               INT            NULL,
    [CreatedDate]             DATETIME       NULL,
    [Updatedby]               INT            NULL,
    [UpdatedDate]             DATETIME       NULL,
    CONSTRAINT [PK_SportsSeasons] PRIMARY KEY CLUSTERED ([SportsSeasonID] ASC)
);


GO
PRINT N'Creating [dbo].[SportsSeasons].[PK_SportsSeasons_Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_SportsSeasons_Unique]
    ON [dbo].[SportsSeasons]([MaturityYearID] ASC, [SportsSeasonDescription] ASC);


GO
PRINT N'Creating [dbo].[BasicSalaries]...';


GO
CREATE TABLE [dbo].[BasicSalaries] (
    [BasicSalaryID]  INT IDENTITY (1, 1) NOT NULL,
    [CareerDegreeID] INT NOT NULL,
    [RankID]         INT NOT NULL,
    [BasicSalary]    INT NULL,
    CONSTRAINT [PK_BasicSalaries] PRIMARY KEY CLUSTERED ([BasicSalaryID] ASC)
);


GO
PRINT N'Creating [dbo].[Lenders]...';


GO
CREATE TABLE [dbo].[Lenders] (
    [LenderID]           INT            IDENTITY (1, 1) NOT NULL,
    [LenderStartDate]    DATE           NOT NULL,
    [LenderEndDate]      DATE           NOT NULL,
    [KSACityID]          INT            NULL,
    [LenderOrganization] NVARCHAR (MAX) NOT NULL,
    [EmployeeCodeID]     INT            NOT NULL,
    [IsFinished]         BIT            NOT NULL,
    [CreatedDate]        DATETIME       NOT NULL,
    [CreatedBy]          INT            NULL,
    [LastUpdatedDate]    DATETIME       NULL,
    [LastUpdatedBy]      INT            NULL,
    CONSTRAINT [PK_Lenders] PRIMARY KEY CLUSTERED ([LenderID] ASC)
);


GO
PRINT N'Creating [dbo].[AssigningsTypes]...';


GO
CREATE TABLE [dbo].[AssigningsTypes] (
    [AssigningTypID]    INT           IDENTITY (1, 1) NOT NULL,
    [AssigningTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_AssigningTypes] PRIMARY KEY CLUSTERED ([AssigningTypID] ASC)
);


GO
PRINT N'Creating [dbo].[KSARegions]...';


GO
CREATE TABLE [dbo].[KSARegions] (
    [KSARegionID]     INT            IDENTITY (1, 1) NOT NULL,
    [KSARegionName]   NVARCHAR (100) NULL,
    [CreatedDate]     DATETIME       NOT NULL,
    [LastUpdatedDate] DATETIME       NULL,
    CONSTRAINT [PK_KSARegions] PRIMARY KEY CLUSTERED ([KSARegionID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionCardsPrinting]...';


GO
CREATE TABLE [dbo].[PromotionCardsPrinting] (
    [PromotionCardPrintingID] INT      IDENTITY (1, 1) NOT NULL,
    [PromotionPeriodID]       INT      NOT NULL,
    [EmployeeCodeID]          INT      NOT NULL,
    [CreatedDate]             DATETIME NOT NULL,
    [CreatedBy]               INT      NOT NULL,
    [LastUpdatedDate]         DATETIME NULL,
    [LastUpdatedBy]           INT      NULL,
    CONSTRAINT [PK_PromotionCardsPrinting] PRIMARY KEY CLUSTERED ([PromotionCardPrintingID] ASC)
);


GO
PRINT N'Creating [dbo].[AssigningsReasons]...';


GO
CREATE TABLE [dbo].[AssigningsReasons] (
    [AssigningReasonID]   INT            IDENTITY (1, 1) NOT NULL,
    [AssigningReasonName] NVARCHAR (100) NULL,
    CONSTRAINT [PK_AssigningReasons] PRIMARY KEY CLUSTERED ([AssigningReasonID] ASC)
);


GO
PRINT N'Creating [dbo].[KSACities]...';


GO
CREATE TABLE [dbo].[KSACities] (
    [KSACityID]       INT            IDENTITY (1, 1) NOT NULL,
    [KSARegionID]     INT            NOT NULL,
    [KSACityName]     NVARCHAR (100) NULL,
    [CreatedDate]     DATETIME       NOT NULL,
    [LastUpdatedDate] DATETIME       NULL,
    CONSTRAINT [PK_KSACities] PRIMARY KEY CLUSTERED ([KSACityID] ASC)
);


GO
PRINT N'Creating [dbo].[KSACities].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[KSACities]([KSACityName] ASC);


GO
PRINT N'Creating [dbo].[Assignings]...';


GO
CREATE TABLE [dbo].[Assignings] (
    [AssigningID]             INT            IDENTITY (1, 1) NOT NULL,
    [EmployeeCareerHistoryID] INT            NULL,
    [AssigningTypID]          INT            NOT NULL,
    [OrganizationID]          INT            NULL,
    [JobID]                   INT            NULL,
    [AssigningStartDate]      DATE           NOT NULL,
    [AssigningEndDate]        DATE           NULL,
    [ExternalOrganization]    NVARCHAR (50)  NULL,
    [IsFinished]              BIT            NOT NULL,
    [CreatedDate]             DATETIME       NOT NULL,
    [CreatedBy]               INT            NULL,
    [LastUpdatedDate]         DATETIME       NULL,
    [LastUpdatedBy]           INT            NULL,
    [AssigningReasonID]       INT            NULL,
    [ExternalKSACityID]       INT            NULL,
    [ManagerCodeID]           INT            NULL,
    [ExternalCity]            NVARCHAR (50)  NULL,
    [AssigningReasonOther]    NVARCHAR (150) NULL,
    CONSTRAINT [PK_Assignings] PRIMARY KEY CLUSTERED ([AssigningID] ASC)
);


GO
PRINT N'Creating [dbo].[JobsKinds]...';


GO
CREATE TABLE [dbo].[JobsKinds] (
    [JobKindID]   INT           NOT NULL,
    [JobKindName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_JobsKinds] PRIMARY KEY CLUSTERED ([JobKindID] ASC)
);


GO
PRINT N'Creating [dbo].[AllowancesAmountTypes]...';


GO
CREATE TABLE [dbo].[AllowancesAmountTypes] (
    [AllowanceAmountTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [AllowanceAmountTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_AllowancesAmountTypes] PRIMARY KEY CLUSTERED ([AllowanceAmountTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[JobsGroups]...';


GO
CREATE TABLE [dbo].[JobsGroups] (
    [JobGroupID]        INT            IDENTITY (1, 1) NOT NULL,
    [JobGeneralGroupID] INT            NOT NULL,
    [JobGroupName]      NVARCHAR (200) NOT NULL,
    [CreatedDate]       DATETIME       NOT NULL,
    [LastUpdatedDate]   DATETIME       NULL,
    [LastUpdatedBy]     INT            NULL,
    [CreatedBy]         INT            NULL,
    CONSTRAINT [PK_JobsGroups] PRIMARY KEY CLUSTERED ([JobGroupID] ASC)
);


GO
PRINT N'Creating [dbo].[JobsGeneralGroups]...';


GO
CREATE TABLE [dbo].[JobsGeneralGroups] (
    [JobGeneralGroupID]   INT           IDENTITY (1, 1) NOT NULL,
    [JobGeneralGroupName] NVARCHAR (50) NOT NULL,
    [CreatedDate]         DATETIME      NOT NULL,
    [LastUpdatedDate]     DATETIME      NULL,
    [CreatedBy]           INT           NULL,
    [LastUpdatedBy]       INT           NULL,
    CONSTRAINT [PK_JobsGeneralGroups] PRIMARY KEY CLUSTERED ([JobGeneralGroupID] ASC)
);


GO
PRINT N'Creating [dbo].[JobsGeneralGroups].[NonClusteredIndex-JobGeneralGroupName]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [NonClusteredIndex-JobGeneralGroupName]
    ON [dbo].[JobsGeneralGroups]([JobGeneralGroupName] ASC);


GO
PRINT N'Creating [dbo].[JobsCategoriesQualifications]...';


GO
CREATE TABLE [dbo].[JobsCategoriesQualifications] (
    [JobCategoryQualificationID] INT      IDENTITY (1, 1) NOT NULL,
    [JobCategoryID]              INT      NOT NULL,
    [QualificationDegreeID]      INT      NOT NULL,
    [QualificationID]            INT      NULL,
    [GeneralSpecializationID]    INT      NULL,
    [CreatedBy]                  INT      NULL,
    [CreatedDate]                DATETIME NOT NULL,
    [LastUpdatedBy]              INT      NULL,
    [LastUpdatedDate]            DATETIME NULL,
    [IsMinQualification]         BIT      NOT NULL,
    [PromotionPeriodID]          INT      NOT NULL,
    CONSTRAINT [PK_JobsCategoriesQualifications] PRIMARY KEY CLUSTERED ([JobCategoryQualificationID] ASC)
);


GO
PRINT N'Creating [dbo].[JobsCategoriesQualifications].[NonClusteredIndex-JobCategory-QualificationDegree-Qualification-GeneralSpecialization-PromotionPeriod]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [NonClusteredIndex-JobCategory-QualificationDegree-Qualification-GeneralSpecialization-PromotionPeriod]
    ON [dbo].[JobsCategoriesQualifications]([JobCategoryID] ASC, [QualificationDegreeID] ASC, [QualificationID] ASC, [GeneralSpecializationID] ASC, [PromotionPeriodID] ASC);


GO
PRINT N'Creating [dbo].[JobsCategories]...';


GO
CREATE TABLE [dbo].[JobsCategories] (
    [JobCategoryID]              INT            IDENTITY (1, 1) NOT NULL,
    [JobGroupID]                 INT            NOT NULL,
    [JobCategoryName]            NVARCHAR (200) NOT NULL,
    [CreatedDate]                DATETIME       NOT NULL,
    [LastUpdatedDate]            DATETIME       NULL,
    [MinQualificationDegreeID]   INT            NULL,
    [MinQualificationID]         INT            NULL,
    [MinGeneralSpecializationID] INT            NULL,
    [CreatedBy]                  INT            NULL,
    [LastUpdatedBy]              INT            NULL,
    [JobCategoryNo]              NVARCHAR (5)   NULL,
    CONSTRAINT [PK_JobsCategories] PRIMARY KEY CLUSTERED ([JobCategoryID] ASC)
);


GO
PRINT N'Creating [dbo].[JobsAllowances]...';


GO
CREATE TABLE [dbo].[JobsAllowances] (
    [JobAllowanceID]  INT      IDENTITY (1, 1) NOT NULL,
    [JobID]           INT      NOT NULL,
    [AllowanceID]     INT      NOT NULL,
    [IsActive]        BIT      NOT NULL,
    [CreatedDate]     DATETIME NOT NULL,
    [LastUpdatedDate] DATETIME NULL,
    CONSTRAINT [PK_RanksAllowances] PRIMARY KEY CLUSTERED ([JobAllowanceID] ASC)
);


GO
PRINT N'Creating [dbo].[JobsAllowances].[IX_JobsAllowances]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_JobsAllowances]
    ON [dbo].[JobsAllowances]([JobID] ASC, [AllowanceID] ASC);


GO
PRINT N'Creating [dbo].[Jobs]...';


GO
CREATE TABLE [dbo].[Jobs] (
    [JobID]           INT            IDENTITY (1, 1) NOT NULL,
    [JobCategoryID]   INT            NOT NULL,
    [JobCode]         NVARCHAR (20)  NULL,
    [JobName]         NVARCHAR (150) NOT NULL,
    [CreatedDate]     DATETIME       NOT NULL,
    [LastUpdatedDate] DATETIME       NULL,
    [LastUpdatedBy]   INT            NULL,
    [CreatedBy]       INT            NULL,
    CONSTRAINT [PK_Jobs] PRIMARY KEY CLUSTERED ([JobID] ASC)
);


GO
PRINT N'Creating [dbo].[Jobs].[IX_Jobs]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Jobs]
    ON [dbo].[Jobs]([JobCategoryID] ASC, [JobName] ASC);


GO
PRINT N'Creating [dbo].[InternshipScholarshipsTypes]...';


GO
CREATE TABLE [dbo].[InternshipScholarshipsTypes] (
    [InternshipScholarshipTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [InternshipScholarshipTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_InternshipScholarshipsTypes] PRIMARY KEY CLUSTERED ([InternshipScholarshipTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[InternshipScholarshipsDetails]...';


GO
CREATE TABLE [dbo].[InternshipScholarshipsDetails] (
    [InternshipScholarshipDetailID] INT      IDENTITY (1, 1) NOT NULL,
    [InternshipScholarshipID]       INT      NOT NULL,
    [EmployeeCareerHistoryID]       INT      NOT NULL,
    [CreatedDate]                   DATETIME NOT NULL,
    [LastUpdatedDate]               DATETIME NULL,
    [CreatedBy]                     INT      NULL,
    [LastUpdatedBy]                 INT      NULL,
    [IsPassengerOrderCompensation]  BIT      NOT NULL,
    CONSTRAINT [PK_InternshipScholarshipsDetails] PRIMARY KEY CLUSTERED ([InternshipScholarshipDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[VacationsTypes]...';


GO
CREATE TABLE [dbo].[VacationsTypes] (
    [VacationTypeID]   INT           NOT NULL,
    [VacationTypeName] NVARCHAR (50) NOT NULL,
    [IsForFemaleOnly]  BIT           NULL,
    CONSTRAINT [PK_VacationsTypes] PRIMARY KEY CLUSTERED ([VacationTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[Teachers]...';


GO
CREATE TABLE [dbo].[Teachers] (
    [TeacherID]               INT      IDENTITY (1, 1) NOT NULL,
    [EmployeeCareerHistoryID] INT      NOT NULL,
    [StartDate]               DATE     NOT NULL,
    [EndDate]                 DATE     NOT NULL,
    [CreatedDate]             DATETIME NOT NULL,
    [CreatedBy]               INT      NOT NULL,
    [LastUpdatedDate]         DATETIME NULL,
    [LastUpdatedBy]           INT      NULL,
    CONSTRAINT [PK_Teachers] PRIMARY KEY CLUSTERED ([TeacherID] ASC)
);


GO
PRINT N'Creating [dbo].[InternshipScholarships]...';


GO
CREATE TABLE [dbo].[InternshipScholarships] (
    [InternshipScholarshipID]        INT            IDENTITY (1, 1) NOT NULL,
    [InternshipScholarshipTypeID]    INT            NOT NULL,
    [InternshipScholarshipStartDate] DATE           NOT NULL,
    [InternshipScholarshipEndDate]   DATE           NOT NULL,
    [InternshipScholarshipLocation]  NVARCHAR (100) NULL,
    [InternshipScholarshipReason]    NVARCHAR (500) NULL,
    [CountryID]                      INT            NULL,
    [KSACityID]                      INT            NULL,
    [IsActive]                       BIT            NOT NULL,
    [CreatedDate]                    DATETIME       NOT NULL,
    [LastUpdatedDate]                DATETIME       NULL,
    [CreatedBy]                      INT            NULL,
    [LastUpdatedBy]                  INT            NULL,
    CONSTRAINT [PK_InternshipScholarships] PRIMARY KEY CLUSTERED ([InternshipScholarshipID] ASC)
);


GO
PRINT N'Creating [dbo].[VacationsDetails]...';


GO
CREATE TABLE [dbo].[VacationsDetails] (
    [VacationDetailID] INT            IDENTITY (1, 1) NOT NULL,
    [VacationActionID] INT            NOT NULL,
    [FromDate]         DATE           NOT NULL,
    [ToDate]           DATE           NOT NULL,
    [MainframeNo]      NVARCHAR (50)  NULL,
    [IsApproved]       BIT            NOT NULL,
    [Notes]            NVARCHAR (MAX) NULL,
    [VacationID]       INT            NOT NULL,
    [ApprovedBy]       INT            NULL,
    [ApprovedDate]     DATETIME       NULL,
    [CreatedBy]        INT            NOT NULL,
    [CreatedDate]      DATETIME       NOT NULL,
    [LastUpdatedBy]    INT            NULL,
    [LastUpdatedDate]  DATETIME       NULL,
    CONSTRAINT [PK_VacationsDetails] PRIMARY KEY CLUSTERED ([VacationDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[DelegationsDetails]...';


GO
CREATE TABLE [dbo].[DelegationsDetails] (
    [DelegationDetailID]           INT      IDENTITY (1, 1) NOT NULL,
    [DelegationID]                 INT      NOT NULL,
    [EmployeeCareerHistoryID]      INT      NOT NULL,
    [CreatedDate]                  DATETIME NOT NULL,
    [LastUpdatedDate]              DATETIME NULL,
    [CreatedBy]                    INT      NULL,
    [LastUpdatedBy]                INT      NULL,
    [IsPassengerOrderCompensation] BIT      NOT NULL,
    CONSTRAINT [PK_DelegationsDetails] PRIMARY KEY CLUSTERED ([DelegationDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[PassengerOrders]...';


GO
CREATE TABLE [dbo].[PassengerOrders] (
    [PassengerOrderID]        INT            IDENTITY (1, 1) NOT NULL,
    [TravellingDate]          DATETIME       NOT NULL,
    [RankID]                  INT            NOT NULL,
    [TicketClassID]           INT            NOT NULL,
    [Going]                   BIT            NOT NULL,
    [Returning]               BIT            NULL,
    [CreatedDate]             DATETIME       NOT NULL,
    [LastUpdatedDate]         DATETIME       NULL,
    [CreatedBy]               INT            NULL,
    [LastUpdatedBy]           INT            NULL,
    [EmployeeCareerHistoryID] INT            NULL,
    [Reason]                  NVARCHAR (500) NULL,
    CONSTRAINT [PK_PassengerOrders] PRIMARY KEY CLUSTERED ([PassengerOrderID] ASC)
);


GO
PRINT N'Creating [dbo].[Delegations]...';


GO
CREATE TABLE [dbo].[Delegations] (
    [DelegationID]             INT            IDENTITY (1, 1) NOT NULL,
    [DelegationKindID]         INT            NOT NULL,
    [DelegationTypeID]         INT            NOT NULL,
    [DelegationStartDate]      DATE           NOT NULL,
    [DelegationEndDate]        DATE           NOT NULL,
    [DelegationDistancePeriod] INT            NULL,
    [DelegationReason]         NVARCHAR (500) NULL,
    [CountryID]                INT            NULL,
    [KSACityID]                INT            NULL,
    [IsActive]                 BIT            NOT NULL,
    [CreatedDate]              DATETIME       NOT NULL,
    [LastUpdatedDate]          DATETIME       NULL,
    [CreatedBy]                INT            NULL,
    [LastUpdatedBy]            INT            NULL,
    [IsApproved]               BIT            NOT NULL,
    [ApprovedBy]               INT            NULL,
    [ApprovedDate]             DATETIME       NULL,
    [Notes]                    NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Delegations] PRIMARY KEY CLUSTERED ([DelegationID] ASC)
);


GO
PRINT N'Creating [dbo].[OverTimesDetails]...';


GO
CREATE TABLE [dbo].[OverTimesDetails] (
    [OverTimeDetailID]        INT      IDENTITY (1, 1) NOT NULL,
    [OverTimeID]              INT      NOT NULL,
    [CreateDate]              DATETIME NOT NULL,
    [LastUpdatedDate]         DATETIME NULL,
    [CreatedBy]               INT      NULL,
    [LastUpdatedBy]           INT      NULL,
    [EmployeeCareerHistoryID] INT      NOT NULL,
    CONSTRAINT [PK_OverTimesDetails] PRIMARY KEY CLUSTERED ([OverTimeDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[Countries]...';


GO
CREATE TABLE [dbo].[Countries] (
    [CountryID]       INT            IDENTITY (1, 1) NOT NULL,
    [CountryName]     NVARCHAR (100) NULL,
    [CreatedDate]     DATETIME       NOT NULL,
    [LastUpdatedDate] DATETIME       NULL,
    CONSTRAINT [PK_Countries] PRIMARY KEY CLUSTERED ([CountryID] ASC)
);


GO
PRINT N'Creating [dbo].[Countries].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[Countries]([CountryName] ASC);


GO
PRINT N'Creating [dbo].[OverTimesDays]...';


GO
CREATE TABLE [dbo].[OverTimesDays] (
    [OverTimeDayID] INT  IDENTITY (1, 1) NOT NULL,
    [OverTimeID]    INT  NOT NULL,
    [OverTimeDay]   DATE NOT NULL,
    CONSTRAINT [PK_OverTimesDays] PRIMARY KEY CLUSTERED ([OverTimeDayID] ASC)
);


GO
PRINT N'Creating [dbo].[ChangeLogs]...';


GO
CREATE TABLE [dbo].[ChangeLogs] (
    [ChangeLogID]    INT            IDENTITY (1, 1) NOT NULL,
    [EntityName]     NVARCHAR (255) NULL,
    [DateChange]     DATETIME       NULL,
    [EventTypeID]    INT            NULL,
    [EmployeeCodeID] INT            NULL,
    CONSTRAINT [PK_ChangeLog] PRIMARY KEY CLUSTERED ([ChangeLogID] ASC)
);


GO
PRINT N'Creating [dbo].[OverTimes]...';


GO
CREATE TABLE [dbo].[OverTimes] (
    [OverTimeID]        INT             IDENTITY (1, 1) NOT NULL,
    [OverTimeStartDate] DATE            NOT NULL,
    [OverTimeEndDate]   DATE            NOT NULL,
    [WeekWorkHoursAvg]  FLOAT (53)      NOT NULL,
    [Tasks]             NVARCHAR (MAX)  NOT NULL,
    [CreatedDate]       DATETIME        NOT NULL,
    [LastUpdatedDate]   DATETIME        NULL,
    [CreatedBy]         INT             NULL,
    [LastUpdatedBy]     INT             NULL,
    [FridayHoursAvg]    FLOAT (53)      NULL,
    [SaturdayHoursAvg]  FLOAT (53)      NULL,
    [Requester]         NVARCHAR (1000) NULL,
    [IsApproved]        BIT             NOT NULL,
    [ApprovedBy]        INT             NULL,
    [ApprovedDate]      DATETIME        NULL,
    CONSTRAINT [PK_OverTimes] PRIMARY KEY CLUSTERED ([OverTimeID] ASC)
);


GO
PRINT N'Creating [dbo].[ChangeDetailsLogs]...';


GO
CREATE TABLE [dbo].[ChangeDetailsLogs] (
    [ChangeDetailLogID] INT            IDENTITY (1, 1) NOT NULL,
    [ChangeLogID]       INT            NOT NULL,
    [PropertyName]      NVARCHAR (255) NULL,
    [PrimaryKeyValue]   INT            NULL,
    [OldValue]          NVARCHAR (MAX) NULL,
    [NewValue]          NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_ChangeDetailLog] PRIMARY KEY CLUSTERED ([ChangeDetailLogID] ASC)
);


GO
PRINT N'Creating [dbo].[OrganizationsStructures]...';


GO
CREATE TABLE [dbo].[OrganizationsStructures] (
    [OrganizationID]       INT            IDENTITY (1, 1) NOT NULL,
    [OrganizationCode]     NVARCHAR (50)  NOT NULL,
    [OrganizationName]     NVARCHAR (150) NOT NULL,
    [ManagerCodeID]        INT            NULL,
    [OrganizationParentID] INT            NULL,
    [BranchID]             INT            NULL,
    [CreatedDate]          DATETIME       NOT NULL,
    [LastUpdatedDate]      DATETIME       NULL,
    [CreatedBy]            INT            NULL,
    [LastUpdatedBy]        INT            NULL,
    [ShowInECM]            BIT            NULL,
    CONSTRAINT [PK_OrganizationsStructures] PRIMARY KEY CLUSTERED ([OrganizationID] ASC)
);


GO
PRINT N'Creating [dbo].[CareersHistoryTypes]...';


GO
CREATE TABLE [dbo].[CareersHistoryTypes] (
    [CareerHistoryTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [CareerHistoryTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_CareersHistoryTypes] PRIMARY KEY CLUSTERED ([CareerHistoryTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[OrganizationsJobsStatus]...';


GO
CREATE TABLE [dbo].[OrganizationsJobsStatus] (
    [OrganizationJobStatusID]   INT           IDENTITY (1, 1) NOT NULL,
    [OrganizationJobStatusName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_OrganizationsJobsStatus] PRIMARY KEY CLUSTERED ([OrganizationJobStatusID] ASC)
);


GO
PRINT N'Creating [dbo].[InsteadDeportations]...';


GO
CREATE TABLE [dbo].[InsteadDeportations] (
    [InsteadDeportationID]    INT            IDENTITY (1, 1) NOT NULL,
    [EmployeeCareerHistoryID] INT            NOT NULL,
    [DeportationDate]         DATE           NOT NULL,
    [Note]                    NVARCHAR (MAX) NULL,
    [Amount]                  FLOAT (53)     NULL,
    [CreatedDate]             DATETIME       NOT NULL,
    [LastUpdatedDate]         DATETIME       NULL,
    [CreatedBy]               INT            NULL,
    [LastUpdatedBy]           INT            NULL,
    CONSTRAINT [PK_InsteadDeportations] PRIMARY KEY CLUSTERED ([InsteadDeportationID] ASC)
);


GO
PRINT N'Creating [dbo].[CareersDegrees]...';


GO
CREATE TABLE [dbo].[CareersDegrees] (
    [CareerDegreeID]   INT           IDENTITY (1, 1) NOT NULL,
    [CareerDegreeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_CareersDegrees] PRIMARY KEY CLUSTERED ([CareerDegreeID] ASC)
);


GO
PRINT N'Creating [dbo].[OrganizationsJobs]...';


GO
CREATE TABLE [dbo].[OrganizationsJobs] (
    [OrganizationJobID]       INT           IDENTITY (1, 1) NOT NULL,
    [JobNo]                   NVARCHAR (50) NOT NULL,
    [OrganizationID]          INT           NOT NULL,
    [JobID]                   INT           NOT NULL,
    [RankID]                  INT           NOT NULL,
    [IsVacant]                BIT           NOT NULL,
    [CreatedDate]             DATETIME      NOT NULL,
    [LastUpdatedDate]         DATETIME      NULL,
    [JobKindID]               INT           NULL,
    [IsReserved]              BIT           NULL,
    [CreatedBy]               INT           NULL,
    [LastUpdatedBy]           INT           NULL,
    [OrganizationJobStatusID] INT           NULL,
    CONSTRAINT [PK_OrganizationsJobs] PRIMARY KEY CLUSTERED ([OrganizationJobID] ASC)
);


GO
PRINT N'Creating [dbo].[OrganizationsJobs].[NonClusteredIndex-JobNo-RankID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [NonClusteredIndex-JobNo-RankID]
    ON [dbo].[OrganizationsJobs]([JobNo] ASC, [RankID] ASC);


GO
PRINT N'Creating [dbo].[BusinessSubCategories]...';


GO
CREATE TABLE [dbo].[BusinessSubCategories] (
    [BusinssSubCategoryID]  INT            NOT NULL,
    [BusinessSubCategoryAr] NVARCHAR (500) NOT NULL,
    [BusinessSubCategoryEn] NVARCHAR (500) NOT NULL,
    [BusinessCategoryID]    INT            NOT NULL,
    [EntityName]            NVARCHAR (100) NULL,
    CONSTRAINT [PK_BusinessSubCategories] PRIMARY KEY CLUSTERED ([BusinssSubCategoryID] ASC)
);


GO
PRINT N'Creating [dbo].[NormalVacationsTypes]...';


GO
CREATE TABLE [dbo].[NormalVacationsTypes] (
    [NormalVacationTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [NormalVacationTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_NormalVacationsTypes] PRIMARY KEY CLUSTERED ([NormalVacationTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[BusinessRules]...';


GO
CREATE TABLE [dbo].[BusinessRules] (
    [BusinessRuleID]        INT            NOT NULL,
    [BusinessRuleAr]        NVARCHAR (MAX) NOT NULL,
    [BusinessRuleEn]        NVARCHAR (MAX) NULL,
    [IsActive]              BIT            NOT NULL,
    [BusinessSubCategoryID] INT            NOT NULL,
    CONSTRAINT [PK_BusinessConditions] PRIMARY KEY CLUSTERED ([BusinessRuleID] ASC)
);


GO
PRINT N'Creating [dbo].[BusinessCategories]...';


GO
CREATE TABLE [dbo].[BusinessCategories] (
    [BusinessCategoryID] INT            NOT NULL,
    [BusinessCategoryAr] NVARCHAR (500) NOT NULL,
    [BusinessCategoryEn] NVARCHAR (500) NOT NULL,
    CONSTRAINT [PK_BusinessCategories] PRIMARY KEY CLUSTERED ([BusinessCategoryID] ASC)
);


GO
PRINT N'Creating [dbo].[MaturityYearsBalances]...';


GO
CREATE TABLE [dbo].[MaturityYearsBalances] (
    [MaturityYearID] INT IDENTITY (1, 1) NOT NULL,
    [MaturityYear]   INT NOT NULL,
    [Balance]        INT NOT NULL,
    CONSTRAINT [PK_MaturityYearsBalances] PRIMARY KEY CLUSTERED ([MaturityYearID] ASC)
);


GO
PRINT N'Creating [dbo].[Branches]...';


GO
CREATE TABLE [dbo].[Branches] (
    [BranchID]   INT           IDENTITY (1, 1) NOT NULL,
    [BranchName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_Branches] PRIMARY KEY CLUSTERED ([BranchID] ASC)
);


GO
PRINT N'Creating [dbo].[MaritalStatus]...';


GO
CREATE TABLE [dbo].[MaritalStatus] (
    [MaritalStatusID]   INT           IDENTITY (1, 1) NOT NULL,
    [MaritalStatusName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_MaritalStatus] PRIMARY KEY CLUSTERED ([MaritalStatusID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesTypes]...';


GO
CREATE TABLE [dbo].[EmployeesTypes] (
    [EmployeeTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [EmployeeTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_EmployeesTypes] PRIMARY KEY CLUSTERED ([EmployeeTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsRecordsEmployeesEducationsDetails]...';


GO
CREATE TABLE [dbo].[PromotionsRecordsEmployeesEducationsDetails] (
    [PromotionRecordEmployeeEducationDetailID] INT            IDENTITY (1, 1) NOT NULL,
    [PromotionRecordEmployeeID]                INT            NOT NULL,
    [QualificationDegreeID]                    INT            NOT NULL,
    [QualificationID]                          INT            NOT NULL,
    [GeneralSpecializationID]                  INT            NOT NULL,
    [Weight]                                   INT            NOT NULL,
    [Points]                                   DECIMAL (5, 2) NOT NULL,
    [IsIncluded]                               BIT            NOT NULL,
    CONSTRAINT [PK_PromotionsRecordsEmployeesEducationsDetails] PRIMARY KEY CLUSTERED ([PromotionRecordEmployeeEducationDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesQualifications]...';


GO
CREATE TABLE [dbo].[EmployeesQualifications] (
    [EmployeeQualificationID] INT             IDENTITY (1, 1) NOT NULL,
    [QualificationDegreeID]   INT             NULL,
    [QualificationID]         INT             NULL,
    [GeneralSpecializationID] INT             NULL,
    [ExactSpecializationID]   INT             NULL,
    [EmployeeCodeID]          INT             NULL,
    [UniSchName]              NVARCHAR (150)  NULL,
    [Department]              NVARCHAR (200)  NULL,
    [FullGPA]                 DECIMAL (18, 2) NULL,
    [GPA]                     DECIMAL (18, 2) NULL,
    [StudyPlace]              NVARCHAR (100)  NULL,
    [GraduationDate]          DATE            NULL,
    [AttachFile]              IMAGE           NULL,
    [Percentage]              DECIMAL (5, 2)  NULL,
    [QualificationTypeID]     INT             NULL,
    [GraduationYear]          NVARCHAR (4)    NULL,
    [CreatedDate]             DATETIME        NULL,
    [CreatedBy]               INT             NULL,
    [LastUpdatedDate]         DATETIME        NULL,
    [LastUpdatedBy]           INT             NULL,
    CONSTRAINT [PK_EmployeesQualifications] PRIMARY KEY CLUSTERED ([EmployeeQualificationID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesQualifications].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[EmployeesQualifications]([QualificationDegreeID] ASC, [QualificationID] ASC, [GeneralSpecializationID] ASC, [EmployeeCodeID] ASC);


GO
PRINT N'Creating [dbo].[PromotionsRecordsEmployees]...';


GO
CREATE TABLE [dbo].[PromotionsRecordsEmployees] (
    [PromotionRecordEmployeeID]       INT            IDENTITY (1, 1) NOT NULL,
    [PromotionRecordID]               INT            NOT NULL,
    [PromotionRecordJobVacancyID]     INT            NULL,
    [NewEmployeeCareerHistoryID]      INT            NULL,
    [CurrentEmployeeCareerHistoryID]  INT            NULL,
    [CurrentJobDaysCount]             INT            NULL,
    [PreviousEmployeeCareerHistoryID] INT            NULL,
    [PreviousJobDaysCount]            INT            NOT NULL,
    [LastQualificationDegreeID]       INT            NULL,
    [LastQualificationID]             INT            NULL,
    [LastGeneralSpecializationID]     INT            NULL,
    [OnGoingServiceDaysCount]         INT            NULL,
    [PriorServiceDaysCount]           INT            NULL,
    [EducationPoints]                 DECIMAL (5, 2) NULL,
    [SeniorityPoints]                 DECIMAL (5, 2) NULL,
    [EvaluationPoints]                DECIMAL (5, 2) NULL,
    [IsIncluded]                      BIT            NOT NULL,
    [PromotionCandidateAddedWayID]    INT            NOT NULL,
    [ManualAddedReason]               NVARCHAR (MAX) NULL,
    [IsDeserveExtraBonus]             BIT            NULL,
    [IsRemovedAfterIncluding]         BIT            NULL,
    [RemovingReason]                  NVARCHAR (MAX) NULL,
    [RemovingBy]                      INT            NULL,
    [PromotionDecisionID]             INT            NULL,
    [IsApproved]                      BIT            NULL,
    [ApprovedDate]                    DATETIME       NULL,
    [ApprovedBy]                      INT            NULL,
    [CreatedDate]                     DATETIME       NOT NULL,
    [CreatedBy]                       INT            NOT NULL,
    [LastUpdatedDate]                 DATETIME       NULL,
    [LastUpdatedBy]                   INT            NULL,
    CONSTRAINT [PK_PromotionsRecordsEmployees] PRIMARY KEY CLUSTERED ([PromotionRecordEmployeeID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsRecordsEmployees].[idx_PromotionRecordJobVacancyID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [idx_PromotionRecordJobVacancyID]
    ON [dbo].[PromotionsRecordsEmployees]([PromotionRecordJobVacancyID] ASC) WHERE ([PromotionRecordJobVacancyID] IS NOT NULL);


GO
PRINT N'Creating [dbo].[PromotionsRecordsEmployees].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[PromotionsRecordsEmployees]([PromotionRecordID] ASC, [CurrentEmployeeCareerHistoryID] ASC);


GO
PRINT N'Creating [dbo].[EmployeesExperiences]...';


GO
CREATE TABLE [dbo].[EmployeesExperiences] (
    [EmployeeExperienceID] INT      IDENTITY (1, 1) NOT NULL,
    [EmployeeCodeID]       INT      NOT NULL,
    [TotalYears]           INT      NOT NULL,
    [TotalMonths]          INT      NOT NULL,
    [TotalDays]            INT      NOT NULL,
    [CreatedBy]            INT      NOT NULL,
    [CreatedDate]          DATETIME NULL,
    [LastUpdatedBy]        INT      NULL,
    [LastUpdatedDate]      DATETIME NULL,
    CONSTRAINT [PK_EmployeesExperiences] PRIMARY KEY CLUSTERED ([EmployeeExperienceID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesExperiences].[IX_EmployeesExperiences]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EmployeesExperiences]
    ON [dbo].[EmployeesExperiences]([EmployeeCodeID] ASC);


GO
PRINT N'Creating [dbo].[PromotionsRecordsActionsTypes]...';


GO
CREATE TABLE [dbo].[PromotionsRecordsActionsTypes] (
    [PromotionActionTypeID]   INT           NOT NULL,
    [PromotionActionTypeName] NVARCHAR (50) NULL,
    CONSTRAINT [PK_PromotionsActionsTypes] PRIMARY KEY CLUSTERED ([PromotionActionTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesEvaluationsDetails]...';


GO
CREATE TABLE [dbo].[EmployeesEvaluationsDetails] (
    [EmployeeEvaluationDetailID] INT             IDENTITY (1, 1) NOT NULL,
    [EvaluationQuarterID]        INT             NOT NULL,
    [DirectManagerEvaluation]    DECIMAL (18, 2) NOT NULL,
    [TimeAttendanceEvaluation]   DECIMAL (18, 2) NOT NULL,
    [ViolationsEvaluation]       DECIMAL (18, 2) NOT NULL,
    [EmployeeEvaluationID]       INT             NOT NULL,
    CONSTRAINT [PK_EmployeesEvaluationsDetails] PRIMARY KEY CLUSTERED ([EmployeeEvaluationDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsRecords]...';


GO
CREATE TABLE [dbo].[PromotionsRecords] (
    [PromotionRecordID]       INT      IDENTITY (1, 1) NOT NULL,
    [PromotionRecordNo]       INT      NOT NULL,
    [PromotionRecordDate]     DATE     NOT NULL,
    [RankID]                  INT      NOT NULL,
    [JobCategoryID]           INT      NOT NULL,
    [PromotionPeriodID]       INT      NOT NULL,
    [PromotionRecordStatusID] INT      NOT NULL,
    [OpeningTime]             DATETIME NOT NULL,
    [OpeningBy]               INT      NOT NULL,
    [PreferenceTime]          DATETIME NULL,
    [PreferenceBy]            INT      NULL,
    [InstallationTime]        DATETIME NULL,
    [InstallationBy]          INT      NULL,
    [ClosingTime]             DATETIME NULL,
    [ClosingBy]               INT      NULL,
    [CreationDate]            DATETIME NOT NULL,
    [CreatedBy]               INT      NOT NULL,
    [LastUpdatedDate]         DATETIME NULL,
    [LastUpdatedBy]           INT      NULL,
    [PromotionDate]           DATE     NULL,
    CONSTRAINT [PK_PromotionsRecords] PRIMARY KEY CLUSTERED ([PromotionRecordID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsRecords].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[PromotionsRecords]([RankID] ASC, [JobCategoryID] ASC, [PromotionPeriodID] ASC);


GO
PRINT N'Creating [dbo].[PromotionsRecords].[Unique-No]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique-No]
    ON [dbo].[PromotionsRecords]([PromotionRecordNo] ASC, [PromotionPeriodID] ASC);


GO
PRINT N'Creating [dbo].[EmployeesEvaluations]...';


GO
CREATE TABLE [dbo].[EmployeesEvaluations] (
    [EmployeeEvaluationID] INT        IDENTITY (1, 1) NOT NULL,
    [MaturityYearID]       INT        NOT NULL,
    [EvaluationPointID]    INT        NOT NULL,
    [EvaluationDegree]     FLOAT (53) NOT NULL,
    [EmployeeCodeID]       INT        NOT NULL,
    [CreatedBy]            INT        NULL,
    [CreatedDate]          DATETIME   NULL,
    [LastUpdatedBy]        INT        NULL,
    [LastUpdatedDate]      DATETIME   NULL,
    CONSTRAINT [PK_EmployeesEvaluations] PRIMARY KEY CLUSTERED ([EmployeeEvaluationID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesEvaluations].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[EmployeesEvaluations]([MaturityYearID] ASC, [EmployeeCodeID] ASC);


GO
PRINT N'Creating [dbo].[PromotionsPeriods]...';


GO
CREATE TABLE [dbo].[PromotionsPeriods] (
    [PromotionPeriodID]  INT      IDENTITY (1, 1) NOT NULL,
    [PeriodID]           INT      NOT NULL,
    [YearID]             INT      NOT NULL,
    [PromotionStartDate] DATE     NOT NULL,
    [PromotionEndDate]   DATE     NOT NULL,
    [IsActive]           BIT      NULL,
    [CreatedBy]          INT      NULL,
    [CreatedDate]        DATETIME NULL,
    [LastUpdatedBy]      INT      NULL,
    [LastUpdatedDate]    DATETIME NULL,
    CONSTRAINT [PK_PromotionsPeriods] PRIMARY KEY CLUSTERED ([PromotionPeriodID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsPeriods].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[PromotionsPeriods]([PeriodID] ASC, [YearID] ASC);


GO
PRINT N'Creating [dbo].[EmployeesCodes]...';


GO
CREATE TABLE [dbo].[EmployeesCodes] (
    [EmployeeCodeID]  INT           IDENTITY (1, 1) NOT NULL,
    [EmployeeID]      INT           NOT NULL,
    [EmployeeCodeNo]  NVARCHAR (12) NOT NULL,
    [EmployeeTypeID]  INT           NOT NULL,
    [IsActive]        BIT           NOT NULL,
    [CreatedDate]     DATETIME      NULL,
    [CreatedBy]       INT           NULL,
    [LastUpdatedDate] DATETIME      NULL,
    [LastUpdatedBy]   INT           NULL,
    CONSTRAINT [PK_EmployeesCodes] PRIMARY KEY CLUSTERED ([EmployeeCodeID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesCodes].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[EmployeesCodes]([EmployeeCodeNo] ASC);


GO
PRINT N'Creating [dbo].[PromotionsJobsCategories]...';


GO
CREATE TABLE [dbo].[PromotionsJobsCategories] (
    [PromotionJobCategoryID] INT      IDENTITY (1, 1) NOT NULL,
    [PromotionPeriodID]      INT      NOT NULL,
    [JobCategoryID]          INT      NOT NULL,
    [AssignedJobCategoryID]  INT      NOT NULL,
    [CreatedDate]            DATETIME NOT NULL,
    [CreatedBy]              INT      NOT NULL,
    CONSTRAINT [PK_PromotionJobsCategories] PRIMARY KEY CLUSTERED ([PromotionJobCategoryID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsJobsCategories].[NonClusteredIndex-JobCategory-AssignedJobCategory-PromotionPeriod]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [NonClusteredIndex-JobCategory-AssignedJobCategory-PromotionPeriod]
    ON [dbo].[PromotionsJobsCategories]([PromotionPeriodID] ASC, [JobCategoryID] ASC, [AssignedJobCategoryID] ASC);


GO
PRINT N'Creating [dbo].[EmployeesCareersHistory]...';


GO
CREATE TABLE [dbo].[EmployeesCareersHistory] (
    [EmployeeCareerHistoryID] INT      IDENTITY (1, 1) NOT NULL,
    [EmployeeCodeID]          INT      NOT NULL,
    [CareerHistoryTypeID]     INT      NOT NULL,
    [OrganizationJobID]       INT      NOT NULL,
    [CareerDegreeID]          INT      NOT NULL,
    [JoinDate]                DATE     NOT NULL,
    [TransactionStartDate]    DATE     NOT NULL,
    [TransactionEndDate]      DATE     NULL,
    [IsActive]                BIT      NOT NULL,
    [CreatedDate]             DATETIME NOT NULL,
    [LastUpdatedDate]         DATETIME NULL,
    [CreatedBy]               INT      NULL,
    [LastUpdatedBy]           INT      NULL,
    CONSTRAINT [PK_EmployeesCareersHistory] PRIMARY KEY CLUSTERED ([EmployeeCareerHistoryID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesCareersHistory].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[EmployeesCareersHistory]([EmployeeCodeID] ASC, [OrganizationJobID] ASC);


GO
PRINT N'Creating [dbo].[PromotionsDecisions]...';


GO
CREATE TABLE [dbo].[PromotionsDecisions] (
    [PromotionDecisionID]   INT           NOT NULL,
    [PromotionDecisionName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_PromotionsDecisions] PRIMARY KEY CLUSTERED ([PromotionDecisionID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesAllowances]...';


GO
CREATE TABLE [dbo].[EmployeesAllowances] (
    [EmployeeAllowanceID]     INT      IDENTITY (1, 1) NOT NULL,
    [EmployeeCareerHistoryID] INT      NOT NULL,
    [AllowanceID]             INT      NOT NULL,
    [AllowanceStartDate]      DATE     NOT NULL,
    [IsActive]                BIT      NOT NULL,
    [CreatedDate]             DATETIME NOT NULL,
    [LastUpdatedDate]         DATETIME NULL,
    [CreatedBy]               INT      NULL,
    [LastUpdatedBy]           INT      NULL,
    CONSTRAINT [PK_EmployeesAllowances] PRIMARY KEY CLUSTERED ([EmployeeAllowanceID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesAllowances].[IX_EmployeesAllowances]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EmployeesAllowances]
    ON [dbo].[EmployeesAllowances]([AllowanceID] ASC, [EmployeeCareerHistoryID] ASC);


GO
PRINT N'Creating [dbo].[PromotionsCandidatesAddedWays]...';


GO
CREATE TABLE [dbo].[PromotionsCandidatesAddedWays] (
    [PromotionCandidateAddedWayID]   INT           NOT NULL,
    [PromotionCandidateAddedWayName] NVARCHAR (50) NULL,
    CONSTRAINT [PK_PromotionsCandidatesAddedWays] PRIMARY KEY CLUSTERED ([PromotionCandidateAddedWayID] ASC)
);


GO
PRINT N'Creating [dbo].[Employees]...';


GO
CREATE TABLE [dbo].[Employees] (
    [EmployeeID]                INT            IDENTITY (1, 1) NOT NULL,
    [EmployeeIDNo]              NVARCHAR (11)  NOT NULL,
    [FirstNameAr]               NVARCHAR (100) NOT NULL,
    [MiddleNameAr]              NVARCHAR (100) NOT NULL,
    [GrandFatherNameAr]         NVARCHAR (100) NOT NULL,
    [LastNameAr]                NVARCHAR (100) NOT NULL,
    [FirstNameEn]               NVARCHAR (100) NOT NULL,
    [MiddleNameEn]              NVARCHAR (100) NOT NULL,
    [GrandFatherNameEn]         NVARCHAR (100) NOT NULL,
    [LastNameEn]                NVARCHAR (100) NOT NULL,
    [EmployeeBirthDate]         DATE           NOT NULL,
    [EmployeeMobileNo]          NVARCHAR (50)  NOT NULL,
    [EmployeeBirthPlace]        NVARCHAR (50)  NULL,
    [EmployeeEMail]             NVARCHAR (50)  NULL,
    [EmployeeIDIssueDate]       DATE           NULL,
    [EmployeePassportNo]        NVARCHAR (50)  NULL,
    [EmployeePassportSource]    NVARCHAR (100) NULL,
    [EmployeePassportIssueDate] DATE           NULL,
    [EmployeePassportEndDate]   DATE           NULL,
    [CreatedDate]               DATETIME       NOT NULL,
    [LastUpdatedDate]           DATETIME       NULL,
    [EmployeeIDExpiryDate]      DATE           NULL,
    [EmployeeIDCopyNo]          INT            NULL,
    [EmployeeIDIssuePlace]      NVARCHAR (100) NULL,
    [DependentCount]            INT            NULL,
    [MaritalStatusID]           INT            NULL,
    [GenderID]                  INT            NULL,
    [NationalityID]             INT            NULL,
    CONSTRAINT [PK_Employees] PRIMARY KEY CLUSTERED ([EmployeeID] ASC)
);


GO
PRINT N'Creating [dbo].[Periods]...';


GO
CREATE TABLE [dbo].[Periods] (
    [PeriodID]   INT           NOT NULL,
    [PeriodName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_Periods] PRIMARY KEY CLUSTERED ([PeriodID] ASC)
);


GO
PRINT N'Creating [dbo].[DelegationsTypes]...';


GO
CREATE TABLE [dbo].[DelegationsTypes] (
    [DelegationTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [DelegationTypeName] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_DelegationsTypes] PRIMARY KEY CLUSTERED ([DelegationTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[PassengerOrdersTypes]...';


GO
CREATE TABLE [dbo].[PassengerOrdersTypes] (
    [PassengerOrderTypeID]   INT           NOT NULL,
    [PassengerOrderTypeName] NVARCHAR (50) NULL,
    CONSTRAINT [PK_PassengerOrdersTypes] PRIMARY KEY CLUSTERED ([PassengerOrderTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[DelegationsKinds]...';


GO
CREATE TABLE [dbo].[DelegationsKinds] (
    [DelegationKindID]   INT           IDENTITY (1, 1) NOT NULL,
    [DelegationKindName] NVARCHAR (50) NOT NULL,
    [IsIncludeInventory] BIT           NULL,
    CONSTRAINT [PK_DelegationsKinds] PRIMARY KEY CLUSTERED ([DelegationKindID] ASC)
);


GO
PRINT N'Creating [dbo].[PassengerOrdersItineraries]...';


GO
CREATE TABLE [dbo].[PassengerOrdersItineraries] (
    [PassengerOrdersItineraryID] INT            IDENTITY (1, 1) NOT NULL,
    [PassengerOrderID]           INT            NOT NULL,
    [FromCity]                   NVARCHAR (100) NULL,
    [ToCity]                     NVARCHAR (100) NULL,
    [CreatedDate]                DATETIME       NOT NULL,
    [LastUpdatedDate]            DATETIME       NULL,
    CONSTRAINT [PK_PassengerOrdersItineraries] PRIMARY KEY CLUSTERED ([PassengerOrdersItineraryID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsRecordsQualificationsPoints]...';


GO
CREATE TABLE [dbo].[PromotionsRecordsQualificationsPoints] (
    [PromotionRecordQualificationPointID] INT            IDENTITY (1, 1) NOT NULL,
    [PromotionRecordID]                   INT            NOT NULL,
    [QualificationDegreeID]               INT            NULL,
    [QualificationID]                     INT            NULL,
    [GeneralSpecializationID]             INT            NULL,
    [PromotionRecordQualificationKindID]  INT            NULL,
    [Points]                              DECIMAL (5, 2) NULL,
    [CreatedDate]                         DATETIME       NOT NULL,
    [CreatedBy]                           INT            NOT NULL,
    [LastUpdatedDate]                     DATETIME       NULL,
    [LastUpdatedBy]                       INT            NULL,
    CONSTRAINT [PK_PromotionsRecordsQualificationsPoints] PRIMARY KEY CLUSTERED ([PromotionRecordQualificationPointID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsRecordsQualificationsPoints].[Unique]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Unique]
    ON [dbo].[PromotionsRecordsQualificationsPoints]([PromotionRecordID] ASC, [QualificationDegreeID] ASC, [QualificationID] ASC, [GeneralSpecializationID] ASC);


GO
PRINT N'Creating [dbo].[EndOfServicesVacations]...';


GO
CREATE TABLE [dbo].[EndOfServicesVacations] (
    [EndOfServiceVacationID] INT      IDENTITY (1, 1) NOT NULL,
    [EndOfServiceID]         INT      NOT NULL,
    [VacationTypeID]         INT      NOT NULL,
    [VacationStartDate]      DATE     NOT NULL,
    [VacationEndDate]        DATE     NOT NULL,
    [CreatedBy]              INT      NULL,
    [CreatedDate]            DATETIME NOT NULL,
    [LastUpdatedBy]          INT      NULL,
    [LastUpdatedDate]        DATETIME NULL,
    CONSTRAINT [PK_EndOfServicesVacations] PRIMARY KEY CLUSTERED ([EndOfServiceVacationID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsRecordsQualificationsKinds]...';


GO
CREATE TABLE [dbo].[PromotionsRecordsQualificationsKinds] (
    [PromotionRecordQualificationKindID]   INT            IDENTITY (1, 1) NOT NULL,
    [PromotionRecordQualificationKindName] NVARCHAR (100) NOT NULL,
    CONSTRAINT [PK_PromotionsRecordsQualificationsKinds] PRIMARY KEY CLUSTERED ([PromotionRecordQualificationKindID] ASC)
);


GO
PRINT N'Creating [dbo].[EndOfServicesReasons]...';


GO
CREATE TABLE [dbo].[EndOfServicesReasons] (
    [EndOfServiceReasonID] INT           NOT NULL,
    [EndOfServiceCaseID]   INT           NOT NULL,
    [EndOfServiceReason]   NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_EndOfServicesReasons] PRIMARY KEY CLUSTERED ([EndOfServiceReasonID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsRecordsLogs]...';


GO
CREATE TABLE [dbo].[PromotionsRecordsLogs] (
    [PromotionRecordLogID]        INT            IDENTITY (1, 1) NOT NULL,
    [PromotionRecordID]           INT            NOT NULL,
    [PromotionRecordNo]           NVARCHAR (50)  NOT NULL,
    [ActionDescription]           NVARCHAR (MAX) NOT NULL,
    [PromotionRecordActionTypeID] INT            NOT NULL,
    [ActionBy]                    INT            NOT NULL,
    [ActionDate]                  DATETIME       NOT NULL,
    CONSTRAINT [PK_PromotionsRecordsLogs] PRIMARY KEY CLUSTERED ([PromotionRecordLogID] ASC)
);


GO
PRINT N'Creating [dbo].[EndOfServicesCases]...';


GO
CREATE TABLE [dbo].[EndOfServicesCases] (
    [EndOfServiceCaseID] INT           NOT NULL,
    [EndOfServiceCase]   NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_EndOfServicesCases] PRIMARY KEY CLUSTERED ([EndOfServiceCaseID] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionsRecordsJobsVacancies]...';


GO
CREATE TABLE [dbo].[PromotionsRecordsJobsVacancies] (
    [PromotionRecordJobVacancyID] INT      IDENTITY (1, 1) NOT NULL,
    [OrganizationJobID]           INT      NOT NULL,
    [PromotionRecordID]           INT      NOT NULL,
    [CreatedBy]                   INT      NOT NULL,
    [CreatedDate]                 DATETIME NOT NULL,
    CONSTRAINT [PK_PromotionsRecordsJobsVacancies] PRIMARY KEY CLUSTERED ([PromotionRecordJobVacancyID] ASC)
);


GO
PRINT N'Creating [dbo].[EndOfServices]...';


GO
CREATE TABLE [dbo].[EndOfServices] (
    [EndOfServiceID]           INT           IDENTITY (1, 1) NOT NULL,
    [EmployeeCareerHistoryID]  INT           NOT NULL,
    [EndOfServiceDate]         DATE          NOT NULL,
    [EndOfServiceDecisionNo]   NVARCHAR (50) NOT NULL,
    [EndOfServiceDecisionDate] DATE          NOT NULL,
    [EndOfServiceReasonID]     INT           NOT NULL,
    [isProcessed]              BIT           NULL,
    [CreatedDate]              DATETIME      NOT NULL,
    [LastUpdatedDate]          DATETIME      NULL,
    [CreatedBy]                INT           NULL,
    [LastUpdatedBy]            INT           NULL,
    CONSTRAINT [PK_EndOfServices] PRIMARY KEY CLUSTERED ([EndOfServiceID] ASC)
);


GO
PRINT N'Creating [dbo].[EndOfServices].[IX_EndOfServices]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EndOfServices]
    ON [dbo].[EndOfServices]([EmployeeCareerHistoryID] ASC);


GO
PRINT N'Creating [dbo].[PromotionsRecordsEmployeesSeniorityDetails]...';


GO
CREATE TABLE [dbo].[PromotionsRecordsEmployeesSeniorityDetails] (
    [PromotionRecordEmployeeSeniorityDetailID] INT            IDENTITY (1, 1) NOT NULL,
    [PromotionRecordEmployeeID]                INT            NOT NULL,
    [Months]                                   INT            NOT NULL,
    [Points]                                   DECIMAL (5, 2) NOT NULL,
    CONSTRAINT [PK_PromotionsRecordsEmployeesSeniorityDetails] PRIMARY KEY CLUSTERED ([PromotionRecordEmployeeSeniorityDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesVacationsOpeningBalances]...';


GO
CREATE TABLE [dbo].[EmployeesVacationsOpeningBalances] (
    [EmployeeVacationOpeningBalanceID] INT IDENTITY (1, 1) NOT NULL,
    [EmployeeCodeID]                   INT NOT NULL,
    [VacationTypeID]                   INT NOT NULL,
    [OpeningBalance]                   INT NOT NULL,
    CONSTRAINT [PK_EmployeesVacationsOpeningBalances] PRIMARY KEY CLUSTERED ([EmployeeVacationOpeningBalanceID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeesVacationsOpeningBalances].[NonClusteredIndex-EmployeeCode-VacationType]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [NonClusteredIndex-EmployeeCode-VacationType]
    ON [dbo].[EmployeesVacationsOpeningBalances]([EmployeeCodeID] ASC, [VacationTypeID] ASC);


GO
PRINT N'Creating [dbo].[PromotionsRecordsEmployeesEvaluationsDetails]...';


GO
CREATE TABLE [dbo].[PromotionsRecordsEmployeesEvaluationsDetails] (
    [PromotionRecordEmployeeEvaluationDetailID] INT            IDENTITY (1, 1) NOT NULL,
    [PromotionRecordEmployeeID]                 INT            NOT NULL,
    [EvaluationYear]                            INT            NOT NULL,
    [Evaluation]                                NVARCHAR (50)  NOT NULL,
    [Points]                                    DECIMAL (5, 2) NOT NULL,
    CONSTRAINT [PK_PromotionsRecordsEmployeesEvaluationsDetails] PRIMARY KEY CLUSTERED ([PromotionRecordEmployeeEvaluationDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeeExperiencesWithDetails]...';


GO
CREATE TABLE [dbo].[EmployeeExperiencesWithDetails] (
    [EmployeeExperienceWithDetailID] INT            IDENTITY (1, 1) NOT NULL,
    [FromDate]                       DATETIME       NULL,
    [ToDate]                         DATETIME       NULL,
    [SectorTypeID]                   INT            NOT NULL,
    [SectorName]                     NVARCHAR (100) NULL,
    [JobName]                        NVARCHAR (50)  NULL,
    [EmployeeCodeID]                 INT            NOT NULL,
    [CreatedBy]                      INT            NOT NULL,
    [CreatedDate]                    DATETIME       NULL,
    [LastUpdatedBy]                  INT            NULL,
    [LastUpdatedDate]                DATETIME       NULL,
    CONSTRAINT [PK_EmployeeExperiencesWithDetails] PRIMARY KEY CLUSTERED ([EmployeeExperienceWithDetailID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[SectorsTypes]...';


GO
CREATE TABLE [dbo].[SectorsTypes] (
    [SectorTypeID]   INT            IDENTITY (1, 1) NOT NULL,
    [SectorTypeName] NVARCHAR (100) NULL,
    CONSTRAINT [PK_SectorsTypes] PRIMARY KEY CLUSTERED ([SectorTypeID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[DF_Allowances_CreatedDate]...';


GO
ALTER TABLE [dbo].[Allowances]
    ADD CONSTRAINT [DF_Allowances_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_EmployeesScholarships_CreatedDate]...';


GO
ALTER TABLE [dbo].[Scholarships]
    ADD CONSTRAINT [DF_EmployeesScholarships_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF__Scholarsh__IsCan__629A9179]...';


GO
ALTER TABLE [dbo].[Scholarships]
    ADD CONSTRAINT [DF__Scholarsh__IsCan__629A9179] DEFAULT ((0)) FOR [IsCanceled];


GO
PRINT N'Creating [dbo].[DF_RanksTicketsClasses_CreatedDate]...';


GO
ALTER TABLE [dbo].[RanksTicketsClasses]
    ADD CONSTRAINT [DF_RanksTicketsClasses_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_RanksCategories_CreatedDate]...';


GO
ALTER TABLE [dbo].[RanksCategories]
    ADD CONSTRAINT [DF_RanksCategories_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Ranks_CreatedDate]...';


GO
ALTER TABLE [dbo].[Ranks]
    ADD CONSTRAINT [DF_Ranks_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF__ExactSpec__Creat__07420643]...';


GO
ALTER TABLE [dbo].[ExactSpecializations]
    ADD CONSTRAINT [DF__ExactSpec__Creat__07420643] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[EvaluationPoints]...';


GO
ALTER TABLE [dbo].[EvaluationPoints]
    ADD DEFAULT ((0)) FOR [IsExcludedFromPromotion];


GO
PRINT N'Creating [dbo].[DF_Vacations_IsSickLeaveAmountPaid]...';


GO
ALTER TABLE [dbo].[Vacations]
    ADD CONSTRAINT [DF_Vacations_IsSickLeaveAmountPaid] DEFAULT ((0)) FOR [IsSickLeaveAmountPaid];


GO
PRINT N'Creating [dbo].[DF_EmployeesTransfers_CreatedDate]...';


GO
ALTER TABLE [dbo].[Transfers]
    ADD CONSTRAINT [DF_EmployeesTransfers_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_GovernmentFundsTypes_CreatedDate]...';


GO
ALTER TABLE [dbo].[GovernmentFundsTypes]
    ADD CONSTRAINT [DF_GovernmentFundsTypes_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_TicketsClasses_CreatedDate]...';


GO
ALTER TABLE [dbo].[TicketsClasses]
    ADD CONSTRAINT [DF_TicketsClasses_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_GovernmentFunds_CreatedDate]...';


GO
ALTER TABLE [dbo].[GovernmentFunds]
    ADD CONSTRAINT [DF_GovernmentFunds_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_EmployeesDegreesUpgrades_CreatedDate]...';


GO
ALTER TABLE [dbo].[EmployeesDegreesUpgrades]
    ADD CONSTRAINT [DF_EmployeesDegreesUpgrades_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_TempNormalVacationsBalances_CreatedDate]...';


GO
ALTER TABLE [dbo].[TempNormalVacationsBalances]
    ADD CONSTRAINT [DF_TempNormalVacationsBalances_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF__GeneralSp__Creat__092A4EB5]...';


GO
ALTER TABLE [dbo].[GeneralSpecializations]
    ADD CONSTRAINT [DF__GeneralSp__Creat__092A4EB5] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_KSARegions_CreatedDate]...';


GO
ALTER TABLE [dbo].[KSARegions]
    ADD CONSTRAINT [DF_KSARegions_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_KSACities_CreatedDate]...';


GO
ALTER TABLE [dbo].[KSACities]
    ADD CONSTRAINT [DF_KSACities_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Assignings_CreatedDate]...';


GO
ALTER TABLE [dbo].[Assignings]
    ADD CONSTRAINT [DF_Assignings_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_JobsGroups_CreatedDate]...';


GO
ALTER TABLE [dbo].[JobsGroups]
    ADD CONSTRAINT [DF_JobsGroups_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_JobsGeneralGroups_CreatedDate]...';


GO
ALTER TABLE [dbo].[JobsGeneralGroups]
    ADD CONSTRAINT [DF_JobsGeneralGroups_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_JobsCategories_CreatedDate]...';


GO
ALTER TABLE [dbo].[JobsCategories]
    ADD CONSTRAINT [DF_JobsCategories_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_RanksAllowances_CreatedDate]...';


GO
ALTER TABLE [dbo].[JobsAllowances]
    ADD CONSTRAINT [DF_RanksAllowances_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Jobs_CreatedDate]...';


GO
ALTER TABLE [dbo].[Jobs]
    ADD CONSTRAINT [DF_Jobs_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_InternshipScholarshipsDetails_CreatedDate]...';


GO
ALTER TABLE [dbo].[InternshipScholarshipsDetails]
    ADD CONSTRAINT [DF_InternshipScholarshipsDetails_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_InternshipScholarshipsDetails_IsPassengerOrderCompensation]...';


GO
ALTER TABLE [dbo].[InternshipScholarshipsDetails]
    ADD CONSTRAINT [DF_InternshipScholarshipsDetails_IsPassengerOrderCompensation] DEFAULT ((0)) FOR [IsPassengerOrderCompensation];


GO
PRINT N'Creating [dbo].[DF_InternshipScholarships_CreatedDate]...';


GO
ALTER TABLE [dbo].[InternshipScholarships]
    ADD CONSTRAINT [DF_InternshipScholarships_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_DelegationsDetails_CreatedDate]...';


GO
ALTER TABLE [dbo].[DelegationsDetails]
    ADD CONSTRAINT [DF_DelegationsDetails_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_DelegationsDetails_IsPassengerOrderCompensation]...';


GO
ALTER TABLE [dbo].[DelegationsDetails]
    ADD CONSTRAINT [DF_DelegationsDetails_IsPassengerOrderCompensation] DEFAULT ((0)) FOR [IsPassengerOrderCompensation];


GO
PRINT N'Creating [dbo].[DF_PassengerOrders_CreatedDate]...';


GO
ALTER TABLE [dbo].[PassengerOrders]
    ADD CONSTRAINT [DF_PassengerOrders_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Delegations_CreatedDate]...';


GO
ALTER TABLE [dbo].[Delegations]
    ADD CONSTRAINT [DF_Delegations_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Delegations_IsApproved]...';


GO
ALTER TABLE [dbo].[Delegations]
    ADD CONSTRAINT [DF_Delegations_IsApproved] DEFAULT ((0)) FOR [IsApproved];


GO
PRINT N'Creating [dbo].[DF_Countries_CreatedDate]...';


GO
ALTER TABLE [dbo].[Countries]
    ADD CONSTRAINT [DF_Countries_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF__OverTimes__IsApp__3631FF56]...';


GO
ALTER TABLE [dbo].[OverTimes]
    ADD CONSTRAINT [DF__OverTimes__IsApp__3631FF56] DEFAULT ((0)) FOR [IsApproved];


GO
PRINT N'Creating [dbo].[DF_OrganizationsStructures_CreatedDate]...';


GO
ALTER TABLE [dbo].[OrganizationsStructures]
    ADD CONSTRAINT [DF_OrganizationsStructures_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_OrganizationsJobs_CreatedDate]...';


GO
ALTER TABLE [dbo].[OrganizationsJobs]
    ADD CONSTRAINT [DF_OrganizationsJobs_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF__Employees__Creat__0559BDD1]...';


GO
ALTER TABLE [dbo].[EmployeesQualifications]
    ADD CONSTRAINT [DF__Employees__Creat__0559BDD1] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_EmployeesCodes_CreatedDate]...';


GO
ALTER TABLE [dbo].[EmployeesCodes]
    ADD CONSTRAINT [DF_EmployeesCodes_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_EmployeesCareersHistory_CreatedDate]...';


GO
ALTER TABLE [dbo].[EmployeesCareersHistory]
    ADD CONSTRAINT [DF_EmployeesCareersHistory_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_EmployeesAllowances_CreatedDate]...';


GO
ALTER TABLE [dbo].[EmployeesAllowances]
    ADD CONSTRAINT [DF_EmployeesAllowances_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Employees_CreatedDate]...';


GO
ALTER TABLE [dbo].[Employees]
    ADD CONSTRAINT [DF_Employees_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_PassengerOrdersItineraries_CreatedDate]...';


GO
ALTER TABLE [dbo].[PassengerOrdersItineraries]
    ADD CONSTRAINT [DF_PassengerOrdersItineraries_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_PromotionsRecordsQualificationsPoints_CreatedDate]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsQualificationsPoints]
    ADD CONSTRAINT [DF_PromotionsRecordsQualificationsPoints_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_PromotionsRecordsJobsVacancies_CreatedDate]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsJobsVacancies]
    ADD CONSTRAINT [DF_PromotionsRecordsJobsVacancies_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_EndOfServices_CreatedDate]...';


GO
ALTER TABLE [dbo].[EndOfServices]
    ADD CONSTRAINT [DF_EndOfServices_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[FK_SMSLogs_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[SMSLogs]
    ADD CONSTRAINT [FK_SMSLogs_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_Allowances_AllowancesAmountTypes]...';


GO
ALTER TABLE [dbo].[Allowances]
    ADD CONSTRAINT [FK_Allowances_AllowancesAmountTypes] FOREIGN KEY ([AllowanceAmountTypeID]) REFERENCES [dbo].[AllowancesAmountTypes] ([AllowanceAmountTypeID]);


GO
PRINT N'Creating [dbo].[FK_Allowances_AllwoancesCalcualtionTypes]...';


GO
ALTER TABLE [dbo].[Allowances]
    ADD CONSTRAINT [FK_Allowances_AllwoancesCalcualtionTypes] FOREIGN KEY ([AllowanceCalculationTypeID]) REFERENCES [dbo].[AllowancesCalculationTypes] ([AllowanceCalculationTypeID]);


GO
PRINT N'Creating [dbo].[FK_ScholarshipsDetails_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[ScholarshipsDetails]
    ADD CONSTRAINT [FK_ScholarshipsDetails_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_ScholarshipsDetails_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[ScholarshipsDetails]
    ADD CONSTRAINT [FK_ScholarshipsDetails_EmployeesCodes2] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_ScholarshipsDetails_Scholarships]...';


GO
ALTER TABLE [dbo].[ScholarshipsDetails]
    ADD CONSTRAINT [FK_ScholarshipsDetails_Scholarships] FOREIGN KEY ([ScholarshipID]) REFERENCES [dbo].[Scholarships] ([ScholarshipID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ScholarshipsDetails_ScholarshipsActions]...';


GO
ALTER TABLE [dbo].[ScholarshipsDetails]
    ADD CONSTRAINT [FK_ScholarshipsDetails_ScholarshipsActions] FOREIGN KEY ([ScholarshipActionID]) REFERENCES [dbo].[ScholarshipsActions] ([ScholarshipActionID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesScholarships_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[Scholarships]
    ADD CONSTRAINT [FK_EmployeesScholarships_EmployeesCodes] FOREIGN KEY ([EmployeeCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesScholarships_Qualifications]...';


GO
ALTER TABLE [dbo].[Scholarships]
    ADD CONSTRAINT [FK_EmployeesScholarships_Qualifications] FOREIGN KEY ([QualificationID]) REFERENCES [dbo].[Qualifications] ([QualificationID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesScholarships_ScholarshipTypes]...';


GO
ALTER TABLE [dbo].[Scholarships]
    ADD CONSTRAINT [FK_EmployeesScholarships_ScholarshipTypes] FOREIGN KEY ([ScholarshipTypeID]) REFERENCES [dbo].[ScholarshipsTypes] ([ScholarshipTypeID]);


GO
PRINT N'Creating [dbo].[FK_Scholarships_Countries]...';


GO
ALTER TABLE [dbo].[Scholarships]
    ADD CONSTRAINT [FK_Scholarships_Countries] FOREIGN KEY ([CountryID]) REFERENCES [dbo].[Countries] ([CountryID]);


GO
PRINT N'Creating [dbo].[FK_Scholarships_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[Scholarships]
    ADD CONSTRAINT [FK_Scholarships_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Scholarships_KSACities]...';


GO
ALTER TABLE [dbo].[Scholarships]
    ADD CONSTRAINT [FK_Scholarships_KSACities] FOREIGN KEY ([KSACityID]) REFERENCES [dbo].[KSACities] ([KSACityID]);


GO
PRINT N'Creating [dbo].[FK_StopWorks_CreatedByNav]...';


GO
ALTER TABLE [dbo].[StopWorks]
    ADD CONSTRAINT [FK_StopWorks_CreatedByNav] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_StopWorks_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[StopWorks]
    ADD CONSTRAINT [FK_StopWorks_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_StopWorks_LastUpdatedByNav]...';


GO
ALTER TABLE [dbo].[StopWorks]
    ADD CONSTRAINT [FK_StopWorks_LastUpdatedByNav] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_StopWorks_StopWorksTypes]...';


GO
ALTER TABLE [dbo].[StopWorks]
    ADD CONSTRAINT [FK_StopWorks_StopWorksTypes] FOREIGN KEY ([StopWorkTypeID]) REFERENCES [dbo].[StopWorksTypes] ([StopWorkTypeID]);


GO
PRINT N'Creating [dbo].[FK_RanksTicketsClasses_Ranks]...';


GO
ALTER TABLE [dbo].[RanksTicketsClasses]
    ADD CONSTRAINT [FK_RanksTicketsClasses_Ranks] FOREIGN KEY ([RankID]) REFERENCES [dbo].[Ranks] ([RankID]);


GO
PRINT N'Creating [dbo].[FK_RanksTicketsClasses_TicketsClasses]...';


GO
ALTER TABLE [dbo].[RanksTicketsClasses]
    ADD CONSTRAINT [FK_RanksTicketsClasses_TicketsClasses] FOREIGN KEY ([TicketClassID]) REFERENCES [dbo].[TicketsClasses] ([TicketClassID]);


GO
PRINT N'Creating [dbo].[FK_Ranks_Ranks]...';


GO
ALTER TABLE [dbo].[Ranks]
    ADD CONSTRAINT [FK_Ranks_Ranks] FOREIGN KEY ([NextRankID]) REFERENCES [dbo].[Ranks] ([RankID]);


GO
PRINT N'Creating [dbo].[FK_Ranks_RanksCategories]...';


GO
ALTER TABLE [dbo].[Ranks]
    ADD CONSTRAINT [FK_Ranks_RanksCategories] FOREIGN KEY ([RankCategoryID]) REFERENCES [dbo].[RanksCategories] ([RankCategoryID]);


GO
PRINT N'Creating [dbo].[FK_ExactSpecializations_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[ExactSpecializations]
    ADD CONSTRAINT [FK_ExactSpecializations_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_ExactSpecializations_GeneralSpecializations]...';


GO
ALTER TABLE [dbo].[ExactSpecializations]
    ADD CONSTRAINT [FK_ExactSpecializations_GeneralSpecializations] FOREIGN KEY ([GeneralSpecializationID]) REFERENCES [dbo].[GeneralSpecializations] ([GeneralSpecializationID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_QualificationsDegrees_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[QualificationsDegrees]
    ADD CONSTRAINT [FK_QualificationsDegrees_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Qualifications_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[Qualifications]
    ADD CONSTRAINT [FK_Qualifications_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_Qualifications_QualificationsDegrees]...';


GO
ALTER TABLE [dbo].[Qualifications]
    ADD CONSTRAINT [FK_Qualifications_QualificationsDegrees] FOREIGN KEY ([QualificationDegreeID]) REFERENCES [dbo].[QualificationsDegrees] ([QualificationDegreeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_HolidaysSettings_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[HolidaysSettings]
    ADD CONSTRAINT [FK_HolidaysSettings_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_HolidaysSettings_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[HolidaysSettings]
    ADD CONSTRAINT [FK_HolidaysSettings_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_HolidaysSettings_HolidaysTypes]...';


GO
ALTER TABLE [dbo].[HolidaysSettings]
    ADD CONSTRAINT [FK_HolidaysSettings_HolidaysTypes] FOREIGN KEY ([HolidayTypeID]) REFERENCES [dbo].[HolidaysTypes] ([HolidayTypeID]);


GO
PRINT N'Creating [dbo].[FK_HolidaysSettings_MaturityYearsBalances]...';


GO
ALTER TABLE [dbo].[HolidaysSettings]
    ADD CONSTRAINT [FK_HolidaysSettings_MaturityYearsBalances] FOREIGN KEY ([MaturityYearID]) REFERENCES [dbo].[MaturityYearsBalances] ([MaturityYearID]);


GO
PRINT N'Creating [dbo].[FK_Vacations_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[Vacations]
    ADD CONSTRAINT [FK_Vacations_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_Vacations_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[Vacations]
    ADD CONSTRAINT [FK_Vacations_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Vacations_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[Vacations]
    ADD CONSTRAINT [FK_Vacations_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_Vacations_HolidaysAttendanceDetails]...';


GO
ALTER TABLE [dbo].[Vacations]
    ADD CONSTRAINT [FK_Vacations_HolidaysAttendanceDetails] FOREIGN KEY ([HolidayAttendanceDetailID]) REFERENCES [dbo].[HolidaysAttendanceDetails] ([HolidayAttendanceDetailID]);


GO
PRINT N'Creating [dbo].[FK_Vacations_NormalVacationsTypes]...';


GO
ALTER TABLE [dbo].[Vacations]
    ADD CONSTRAINT [FK_Vacations_NormalVacationsTypes] FOREIGN KEY ([NormalVacationTypeID]) REFERENCES [dbo].[NormalVacationsTypes] ([NormalVacationTypeID]);


GO
PRINT N'Creating [dbo].[FK_Vacations_SickVacationsTypes]...';


GO
ALTER TABLE [dbo].[Vacations]
    ADD CONSTRAINT [FK_Vacations_SickVacationsTypes] FOREIGN KEY ([SickVacationTypeID]) REFERENCES [dbo].[SickVacationsTypes] ([SickVacationTypeID]);


GO
PRINT N'Creating [dbo].[FK_Vacations_SportsSeasons]...';


GO
ALTER TABLE [dbo].[Vacations]
    ADD CONSTRAINT [FK_Vacations_SportsSeasons] FOREIGN KEY ([SportsSeasonID]) REFERENCES [dbo].[SportsSeasons] ([SportsSeasonID]);


GO
PRINT N'Creating [dbo].[FK_Vacations_VacationsTypes]...';


GO
ALTER TABLE [dbo].[Vacations]
    ADD CONSTRAINT [FK_Vacations_VacationsTypes] FOREIGN KEY ([VacationTypeID]) REFERENCES [dbo].[VacationsTypes] ([VacationTypeID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_RanksCategoriesVacationsBalances_RanksCategories]...';


GO
ALTER TABLE [dbo].[RanksCategoriesVacationsBalances]
    ADD CONSTRAINT [FK_RanksCategoriesVacationsBalances_RanksCategories] FOREIGN KEY ([RankCategoryID]) REFERENCES [dbo].[RanksCategories] ([RankCategoryID]);


GO
PRINT N'Creating [dbo].[FK_RanksCategoriesVacationsBalances_VacationsTypes]...';


GO
ALTER TABLE [dbo].[RanksCategoriesVacationsBalances]
    ADD CONSTRAINT [FK_RanksCategoriesVacationsBalances_VacationsTypes] FOREIGN KEY ([VacationTypeID]) REFERENCES [dbo].[VacationsTypes] ([VacationTypeID]);


GO
PRINT N'Creating [dbo].[FK_HolidaysAttendanceDetails_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[HolidaysAttendanceDetails]
    ADD CONSTRAINT [FK_HolidaysAttendanceDetails_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_HolidaysAttendanceDetails_HolidaysAttendance]...';


GO
ALTER TABLE [dbo].[HolidaysAttendanceDetails]
    ADD CONSTRAINT [FK_HolidaysAttendanceDetails_HolidaysAttendance] FOREIGN KEY ([HolidayAttendanceID]) REFERENCES [dbo].[HolidaysAttendance] ([HolidayAttendanceID]);


GO
PRINT N'Creating [dbo].[FK_HolidaysAttendance_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[HolidaysAttendance]
    ADD CONSTRAINT [FK_HolidaysAttendance_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_HolidaysAttendance_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[HolidaysAttendance]
    ADD CONSTRAINT [FK_HolidaysAttendance_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_HolidaysAttendance_HolidaysSettings]...';


GO
ALTER TABLE [dbo].[HolidaysAttendance]
    ADD CONSTRAINT [FK_HolidaysAttendance_HolidaysSettings] FOREIGN KEY ([HolidaySettingID]) REFERENCES [dbo].[HolidaysSettings] ([HolidaySettingID]);


GO
PRINT N'Creating [dbo].[FK_HolidaysAttendance_OrganizationsStructures]...';


GO
ALTER TABLE [dbo].[HolidaysAttendance]
    ADD CONSTRAINT [FK_HolidaysAttendance_OrganizationsStructures] FOREIGN KEY ([OrganizationID]) REFERENCES [dbo].[OrganizationsStructures] ([OrganizationID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesTransfers_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[Transfers]
    ADD CONSTRAINT [FK_EmployeesTransfers_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesTransfers_TransfersTypes]...';


GO
ALTER TABLE [dbo].[Transfers]
    ADD CONSTRAINT [FK_EmployeesTransfers_TransfersTypes] FOREIGN KEY ([TransferTypeID]) REFERENCES [dbo].[TransfersTypes] ([TransferTypeID]);


GO
PRINT N'Creating [dbo].[FK_GovernmentFunds_CreatedByNav]...';


GO
ALTER TABLE [dbo].[GovernmentFunds]
    ADD CONSTRAINT [FK_GovernmentFunds_CreatedByNav] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_GovernmentFunds_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[GovernmentFunds]
    ADD CONSTRAINT [FK_GovernmentFunds_EmployeesCodes] FOREIGN KEY ([EmployeeCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_GovernmentFunds_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[GovernmentFunds]
    ADD CONSTRAINT [FK_GovernmentFunds_EmployeesCodes2] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_GovernmentFunds_GovernmentDeductionTypes]...';


GO
ALTER TABLE [dbo].[GovernmentFunds]
    ADD CONSTRAINT [FK_GovernmentFunds_GovernmentDeductionTypes] FOREIGN KEY ([GovernmentDeductionTypeID]) REFERENCES [dbo].[GovernmentDeductionsTypes] ([GovernmentDeductionTypeID]);


GO
PRINT N'Creating [dbo].[FK_GovernmentFunds_GovernmentFundsTypes]...';


GO
ALTER TABLE [dbo].[GovernmentFunds]
    ADD CONSTRAINT [FK_GovernmentFunds_GovernmentFundsTypes] FOREIGN KEY ([GovernmentFundTypeID]) REFERENCES [dbo].[GovernmentFundsTypes] ([GovernmentFundTypeID]);


GO
PRINT N'Creating [dbo].[FK_GovernmentFunds_KSACities]...';


GO
ALTER TABLE [dbo].[GovernmentFunds]
    ADD CONSTRAINT [FK_GovernmentFunds_KSACities] FOREIGN KEY ([KSACityID]) REFERENCES [dbo].[KSACities] ([KSACityID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesDegreesUpgrades_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[EmployeesDegreesUpgrades]
    ADD CONSTRAINT [FK_EmployeesDegreesUpgrades_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_GeneralSpecializations_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[GeneralSpecializations]
    ADD CONSTRAINT [FK_GeneralSpecializations_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_GeneralSpecializations_Qualifications]...';


GO
ALTER TABLE [dbo].[GeneralSpecializations]
    ADD CONSTRAINT [FK_GeneralSpecializations_Qualifications] FOREIGN KEY ([QualificationID]) REFERENCES [dbo].[Qualifications] ([QualificationID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_StopWorksTypes_StopWorksCategories]...';


GO
ALTER TABLE [dbo].[StopWorksTypes]
    ADD CONSTRAINT [FK_StopWorksTypes_StopWorksCategories] FOREIGN KEY ([StopWorkCategoryID]) REFERENCES [dbo].[StopWorksCategories] ([StopWorkCategoryID]);


GO
PRINT N'Creating [dbo].[FK_SportsSeasons_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[SportsSeasons]
    ADD CONSTRAINT [FK_SportsSeasons_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_SportsSeasons_MaturityYearsBalances]...';


GO
ALTER TABLE [dbo].[SportsSeasons]
    ADD CONSTRAINT [FK_SportsSeasons_MaturityYearsBalances] FOREIGN KEY ([MaturityYearID]) REFERENCES [dbo].[MaturityYearsBalances] ([MaturityYearID]);


GO
PRINT N'Creating [dbo].[FK__BasicSala__Caree__005FFE8A]...';


GO
ALTER TABLE [dbo].[BasicSalaries]
    ADD CONSTRAINT [FK__BasicSala__Caree__005FFE8A] FOREIGN KEY ([CareerDegreeID]) REFERENCES [dbo].[CareersDegrees] ([CareerDegreeID]);


GO
PRINT N'Creating [dbo].[FK__BasicSala__RankI__015422C3]...';


GO
ALTER TABLE [dbo].[BasicSalaries]
    ADD CONSTRAINT [FK__BasicSala__RankI__015422C3] FOREIGN KEY ([RankID]) REFERENCES [dbo].[Ranks] ([RankID]);


GO
PRINT N'Creating [dbo].[FK__BasicSalaries__CareesDegrees]...';


GO
ALTER TABLE [dbo].[BasicSalaries]
    ADD CONSTRAINT [FK__BasicSalaries__CareesDegrees] FOREIGN KEY ([CareerDegreeID]) REFERENCES [dbo].[CareersDegrees] ([CareerDegreeID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Lenders_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[Lenders]
    ADD CONSTRAINT [FK_Lenders_EmployeesCodes] FOREIGN KEY ([EmployeeCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Lenders_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[Lenders]
    ADD CONSTRAINT [FK_Lenders_EmployeesCodes1] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_Lenders_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[Lenders]
    ADD CONSTRAINT [FK_Lenders_EmployeesCodes2] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_Lenders_KSACities]...';


GO
ALTER TABLE [dbo].[Lenders]
    ADD CONSTRAINT [FK_Lenders_KSACities] FOREIGN KEY ([KSACityID]) REFERENCES [dbo].[KSACities] ([KSACityID]);


GO
PRINT N'Creating [dbo].[FK_PromotionCardsPrinting_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[PromotionCardsPrinting]
    ADD CONSTRAINT [FK_PromotionCardsPrinting_EmployeesCodes] FOREIGN KEY ([EmployeeCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionCardsPrinting_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[PromotionCardsPrinting]
    ADD CONSTRAINT [FK_PromotionCardsPrinting_EmployeesCodes1] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PromotionCardsPrinting_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[PromotionCardsPrinting]
    ADD CONSTRAINT [FK_PromotionCardsPrinting_EmployeesCodes2] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionCardsPrinting_PromotionsPeriods]...';


GO
ALTER TABLE [dbo].[PromotionCardsPrinting]
    ADD CONSTRAINT [FK_PromotionCardsPrinting_PromotionsPeriods] FOREIGN KEY ([PromotionPeriodID]) REFERENCES [dbo].[PromotionsPeriods] ([PromotionPeriodID]);


GO
PRINT N'Creating [dbo].[FK_KSACities_KSARegions]...';


GO
ALTER TABLE [dbo].[KSACities]
    ADD CONSTRAINT [FK_KSACities_KSARegions] FOREIGN KEY ([KSARegionID]) REFERENCES [dbo].[KSARegions] ([KSARegionID]);


GO
PRINT N'Creating [dbo].[FK_Assignings_AssigningsReasons]...';


GO
ALTER TABLE [dbo].[Assignings]
    ADD CONSTRAINT [FK_Assignings_AssigningsReasons] FOREIGN KEY ([AssigningReasonID]) REFERENCES [dbo].[AssigningsReasons] ([AssigningReasonID]);


GO
PRINT N'Creating [dbo].[FK_Assignings_AssigningTypes]...';


GO
ALTER TABLE [dbo].[Assignings]
    ADD CONSTRAINT [FK_Assignings_AssigningTypes] FOREIGN KEY ([AssigningTypID]) REFERENCES [dbo].[AssigningsTypes] ([AssigningTypID]);


GO
PRINT N'Creating [dbo].[FK_Assignings_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[Assignings]
    ADD CONSTRAINT [FK_Assignings_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_Assignings_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[Assignings]
    ADD CONSTRAINT [FK_Assignings_EmployeesCodes] FOREIGN KEY ([ManagerCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Assignings_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[Assignings]
    ADD CONSTRAINT [FK_Assignings_EmployeesCodes1] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_Assignings_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[Assignings]
    ADD CONSTRAINT [FK_Assignings_EmployeesCodes2] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_Assignings_Jobs]...';


GO
ALTER TABLE [dbo].[Assignings]
    ADD CONSTRAINT [FK_Assignings_Jobs] FOREIGN KEY ([JobID]) REFERENCES [dbo].[Jobs] ([JobID]);


GO
PRINT N'Creating [dbo].[FK_Assignings_KSACities]...';


GO
ALTER TABLE [dbo].[Assignings]
    ADD CONSTRAINT [FK_Assignings_KSACities] FOREIGN KEY ([ExternalKSACityID]) REFERENCES [dbo].[KSACities] ([KSACityID]);


GO
PRINT N'Creating [dbo].[FK_Assignings_OrganizationsStructures]...';


GO
ALTER TABLE [dbo].[Assignings]
    ADD CONSTRAINT [FK_Assignings_OrganizationsStructures] FOREIGN KEY ([OrganizationID]) REFERENCES [dbo].[OrganizationsStructures] ([OrganizationID]);


GO
PRINT N'Creating [dbo].[FK_JobsGroups_JobsGeneralGroups]...';


GO
ALTER TABLE [dbo].[JobsGroups]
    ADD CONSTRAINT [FK_JobsGroups_JobsGeneralGroups] FOREIGN KEY ([JobGeneralGroupID]) REFERENCES [dbo].[JobsGeneralGroups] ([JobGeneralGroupID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_JobsCategoriesQualifications_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[JobsCategoriesQualifications]
    ADD CONSTRAINT [FK_JobsCategoriesQualifications_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_JobsCategoriesQualifications_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[JobsCategoriesQualifications]
    ADD CONSTRAINT [FK_JobsCategoriesQualifications_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_JobsCategoriesQualifications_GeneralSpecializations]...';


GO
ALTER TABLE [dbo].[JobsCategoriesQualifications]
    ADD CONSTRAINT [FK_JobsCategoriesQualifications_GeneralSpecializations] FOREIGN KEY ([GeneralSpecializationID]) REFERENCES [dbo].[GeneralSpecializations] ([GeneralSpecializationID]);


GO
PRINT N'Creating [dbo].[FK_JobsCategoriesQualifications_JobsCategories]...';


GO
ALTER TABLE [dbo].[JobsCategoriesQualifications]
    ADD CONSTRAINT [FK_JobsCategoriesQualifications_JobsCategories] FOREIGN KEY ([JobCategoryID]) REFERENCES [dbo].[JobsCategories] ([JobCategoryID]);


GO
PRINT N'Creating [dbo].[FK_JobsCategoriesQualifications_PromotionsPeriods]...';


GO
ALTER TABLE [dbo].[JobsCategoriesQualifications]
    ADD CONSTRAINT [FK_JobsCategoriesQualifications_PromotionsPeriods] FOREIGN KEY ([PromotionPeriodID]) REFERENCES [dbo].[PromotionsPeriods] ([PromotionPeriodID]);


GO
PRINT N'Creating [dbo].[FK_JobsCategoriesQualifications_Qualifications]...';


GO
ALTER TABLE [dbo].[JobsCategoriesQualifications]
    ADD CONSTRAINT [FK_JobsCategoriesQualifications_Qualifications] FOREIGN KEY ([QualificationID]) REFERENCES [dbo].[Qualifications] ([QualificationID]);


GO
PRINT N'Creating [dbo].[FK_JobsCategoriesQualifications_QualificationsDegrees]...';


GO
ALTER TABLE [dbo].[JobsCategoriesQualifications]
    ADD CONSTRAINT [FK_JobsCategoriesQualifications_QualificationsDegrees] FOREIGN KEY ([QualificationDegreeID]) REFERENCES [dbo].[QualificationsDegrees] ([QualificationDegreeID]);


GO
PRINT N'Creating [dbo].[FK_JobsCategories_GeneralSpecializations]...';


GO
ALTER TABLE [dbo].[JobsCategories]
    ADD CONSTRAINT [FK_JobsCategories_GeneralSpecializations] FOREIGN KEY ([MinGeneralSpecializationID]) REFERENCES [dbo].[GeneralSpecializations] ([GeneralSpecializationID]);


GO
PRINT N'Creating [dbo].[FK_JobsCategories_JobsGroups]...';


GO
ALTER TABLE [dbo].[JobsCategories]
    ADD CONSTRAINT [FK_JobsCategories_JobsGroups] FOREIGN KEY ([JobGroupID]) REFERENCES [dbo].[JobsGroups] ([JobGroupID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_JobsCategories_Qualifications]...';


GO
ALTER TABLE [dbo].[JobsCategories]
    ADD CONSTRAINT [FK_JobsCategories_Qualifications] FOREIGN KEY ([MinQualificationID]) REFERENCES [dbo].[Qualifications] ([QualificationID]);


GO
PRINT N'Creating [dbo].[FK_JobsCategories_QualificationsDegrees]...';


GO
ALTER TABLE [dbo].[JobsCategories]
    ADD CONSTRAINT [FK_JobsCategories_QualificationsDegrees] FOREIGN KEY ([MinQualificationDegreeID]) REFERENCES [dbo].[QualificationsDegrees] ([QualificationDegreeID]);


GO
PRINT N'Creating [dbo].[FK_JobsAllowances_Jobs]...';


GO
ALTER TABLE [dbo].[JobsAllowances]
    ADD CONSTRAINT [FK_JobsAllowances_Jobs] FOREIGN KEY ([JobID]) REFERENCES [dbo].[Jobs] ([JobID]);


GO
PRINT N'Creating [dbo].[FK_RanksAllowances_Allowances]...';


GO
ALTER TABLE [dbo].[JobsAllowances]
    ADD CONSTRAINT [FK_RanksAllowances_Allowances] FOREIGN KEY ([AllowanceID]) REFERENCES [dbo].[Allowances] ([AllowanceID]);


GO
PRINT N'Creating [dbo].[FK_Jobs_JobsCategories]...';


GO
ALTER TABLE [dbo].[Jobs]
    ADD CONSTRAINT [FK_Jobs_JobsCategories] FOREIGN KEY ([JobCategoryID]) REFERENCES [dbo].[JobsCategories] ([JobCategoryID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_InternshipScholarshipsDetails_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[InternshipScholarshipsDetails]
    ADD CONSTRAINT [FK_InternshipScholarshipsDetails_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_InternshipScholarshipsDetails_InternshipScholarships]...';


GO
ALTER TABLE [dbo].[InternshipScholarshipsDetails]
    ADD CONSTRAINT [FK_InternshipScholarshipsDetails_InternshipScholarships] FOREIGN KEY ([InternshipScholarshipID]) REFERENCES [dbo].[InternshipScholarships] ([InternshipScholarshipID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Teachers_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[Teachers]
    ADD CONSTRAINT [FK_Teachers_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_Teachers_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[Teachers]
    ADD CONSTRAINT [FK_Teachers_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Teachers_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[Teachers]
    ADD CONSTRAINT [FK_Teachers_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_InternshipScholarships_Countries]...';


GO
ALTER TABLE [dbo].[InternshipScholarships]
    ADD CONSTRAINT [FK_InternshipScholarships_Countries] FOREIGN KEY ([CountryID]) REFERENCES [dbo].[Countries] ([CountryID]);


GO
PRINT N'Creating [dbo].[FK_InternshipScholarships_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[InternshipScholarships]
    ADD CONSTRAINT [FK_InternshipScholarships_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_InternshipScholarships_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[InternshipScholarships]
    ADD CONSTRAINT [FK_InternshipScholarships_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_InternshipScholarships_InternshipScholarshipsTypes]...';


GO
ALTER TABLE [dbo].[InternshipScholarships]
    ADD CONSTRAINT [FK_InternshipScholarships_InternshipScholarshipsTypes] FOREIGN KEY ([InternshipScholarshipTypeID]) REFERENCES [dbo].[InternshipScholarshipsTypes] ([InternshipScholarshipTypeID]);


GO
PRINT N'Creating [dbo].[FK_InternshipScholarships_KSACities]...';


GO
ALTER TABLE [dbo].[InternshipScholarships]
    ADD CONSTRAINT [FK_InternshipScholarships_KSACities] FOREIGN KEY ([KSACityID]) REFERENCES [dbo].[KSACities] ([KSACityID]);


GO
PRINT N'Creating [dbo].[FK_VacationsDetails_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[VacationsDetails]
    ADD CONSTRAINT [FK_VacationsDetails_EmployeesCodes] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_VacationsDetails_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[VacationsDetails]
    ADD CONSTRAINT [FK_VacationsDetails_EmployeesCodes1] FOREIGN KEY ([ApprovedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_VacationsDetails_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[VacationsDetails]
    ADD CONSTRAINT [FK_VacationsDetails_EmployeesCodes2] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_VacationsDetails_Vacations]...';


GO
ALTER TABLE [dbo].[VacationsDetails]
    ADD CONSTRAINT [FK_VacationsDetails_Vacations] FOREIGN KEY ([VacationID]) REFERENCES [dbo].[Vacations] ([VacationID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_VacationsDetails_VacationsActions]...';


GO
ALTER TABLE [dbo].[VacationsDetails]
    ADD CONSTRAINT [FK_VacationsDetails_VacationsActions] FOREIGN KEY ([VacationActionID]) REFERENCES [dbo].[VacationsActions] ([VacationActionID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_DelegationsDetails_Delegations]...';


GO
ALTER TABLE [dbo].[DelegationsDetails]
    ADD CONSTRAINT [FK_DelegationsDetails_Delegations] FOREIGN KEY ([DelegationID]) REFERENCES [dbo].[Delegations] ([DelegationID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_DelegationsDetails_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[DelegationsDetails]
    ADD CONSTRAINT [FK_DelegationsDetails_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_PassengerOrders_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[PassengerOrders]
    ADD CONSTRAINT [FK_PassengerOrders_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_PassengerOrders_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[PassengerOrders]
    ADD CONSTRAINT [FK_PassengerOrders_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PassengerOrders_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[PassengerOrders]
    ADD CONSTRAINT [FK_PassengerOrders_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PassengerOrders_Ranks]...';


GO
ALTER TABLE [dbo].[PassengerOrders]
    ADD CONSTRAINT [FK_PassengerOrders_Ranks] FOREIGN KEY ([RankID]) REFERENCES [dbo].[Ranks] ([RankID]);


GO
PRINT N'Creating [dbo].[FK_PassengerOrders_TicketsClasses]...';


GO
ALTER TABLE [dbo].[PassengerOrders]
    ADD CONSTRAINT [FK_PassengerOrders_TicketsClasses] FOREIGN KEY ([TicketClassID]) REFERENCES [dbo].[TicketsClasses] ([TicketClassID]);


GO
PRINT N'Creating [dbo].[FK_Delegations_Countries]...';


GO
ALTER TABLE [dbo].[Delegations]
    ADD CONSTRAINT [FK_Delegations_Countries] FOREIGN KEY ([CountryID]) REFERENCES [dbo].[Countries] ([CountryID]);


GO
PRINT N'Creating [dbo].[FK_Delegations_DelegationsKinds]...';


GO
ALTER TABLE [dbo].[Delegations]
    ADD CONSTRAINT [FK_Delegations_DelegationsKinds] FOREIGN KEY ([DelegationKindID]) REFERENCES [dbo].[DelegationsKinds] ([DelegationKindID]);


GO
PRINT N'Creating [dbo].[FK_Delegations_DelegationsTypes]...';


GO
ALTER TABLE [dbo].[Delegations]
    ADD CONSTRAINT [FK_Delegations_DelegationsTypes] FOREIGN KEY ([DelegationTypeID]) REFERENCES [dbo].[DelegationsTypes] ([DelegationTypeID]);


GO
PRINT N'Creating [dbo].[FK_Delegations_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[Delegations]
    ADD CONSTRAINT [FK_Delegations_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Delegations_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[Delegations]
    ADD CONSTRAINT [FK_Delegations_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_Delegations_KSACities]...';


GO
ALTER TABLE [dbo].[Delegations]
    ADD CONSTRAINT [FK_Delegations_KSACities] FOREIGN KEY ([KSACityID]) REFERENCES [dbo].[KSACities] ([KSACityID]);


GO
PRINT N'Creating [dbo].[FK_OverTimesDetails_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[OverTimesDetails]
    ADD CONSTRAINT [FK_OverTimesDetails_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_OverTimesDetails_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[OverTimesDetails]
    ADD CONSTRAINT [FK_OverTimesDetails_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_OverTimesDetails_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[OverTimesDetails]
    ADD CONSTRAINT [FK_OverTimesDetails_EmployeesCodes1] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_OverTimesDetails_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[OverTimesDetails]
    ADD CONSTRAINT [FK_OverTimesDetails_EmployeesCodes2] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_OverTimesDetails_OverTimes]...';


GO
ALTER TABLE [dbo].[OverTimesDetails]
    ADD CONSTRAINT [FK_OverTimesDetails_OverTimes] FOREIGN KEY ([OverTimeID]) REFERENCES [dbo].[OverTimes] ([OverTimeID]);


GO
PRINT N'Creating [dbo].[FK_OverTimesDays_OverTimes]...';


GO
ALTER TABLE [dbo].[OverTimesDays]
    ADD CONSTRAINT [FK_OverTimesDays_OverTimes] FOREIGN KEY ([OverTimeID]) REFERENCES [dbo].[OverTimes] ([OverTimeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ChangeLogs_EventTypes]...';


GO
ALTER TABLE [dbo].[ChangeLogs]
    ADD CONSTRAINT [FK_ChangeLogs_EventTypes] FOREIGN KEY ([EventTypeID]) REFERENCES [dbo].[EventTypes] ([EventTypeID]);


GO
PRINT N'Creating [dbo].[FK_OverTimes_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[OverTimes]
    ADD CONSTRAINT [FK_OverTimes_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_OverTimes_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[OverTimes]
    ADD CONSTRAINT [FK_OverTimes_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_ChangeDetailsLogs_ChangeLogs]...';


GO
ALTER TABLE [dbo].[ChangeDetailsLogs]
    ADD CONSTRAINT [FK_ChangeDetailsLogs_ChangeLogs] FOREIGN KEY ([ChangeLogID]) REFERENCES [dbo].[ChangeLogs] ([ChangeLogID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_OrganizationsStructures_Branches]...';


GO
ALTER TABLE [dbo].[OrganizationsStructures]
    ADD CONSTRAINT [FK_OrganizationsStructures_Branches] FOREIGN KEY ([BranchID]) REFERENCES [dbo].[Branches] ([BranchID]);


GO
PRINT N'Creating [dbo].[FK_OrganizationsStructures_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[OrganizationsStructures]
    ADD CONSTRAINT [FK_OrganizationsStructures_EmployeesCodes] FOREIGN KEY ([ManagerCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_OrganizationsStructures_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[OrganizationsStructures]
    ADD CONSTRAINT [FK_OrganizationsStructures_EmployeesCodes1] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_OrganizationsStructures_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[OrganizationsStructures]
    ADD CONSTRAINT [FK_OrganizationsStructures_EmployeesCodes2] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_OrganizationsStructures_OrganizationsStructures]...';


GO
ALTER TABLE [dbo].[OrganizationsStructures]
    ADD CONSTRAINT [FK_OrganizationsStructures_OrganizationsStructures] FOREIGN KEY ([OrganizationParentID]) REFERENCES [dbo].[OrganizationsStructures] ([OrganizationID]);


GO
PRINT N'Creating [dbo].[FK_InsteadDeportations_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[InsteadDeportations]
    ADD CONSTRAINT [FK_InsteadDeportations_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_InsteadDeportations_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[InsteadDeportations]
    ADD CONSTRAINT [FK_InsteadDeportations_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_InsteadDeportations_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[InsteadDeportations]
    ADD CONSTRAINT [FK_InsteadDeportations_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_OrganizationsJobs_Jobs]...';


GO
ALTER TABLE [dbo].[OrganizationsJobs]
    ADD CONSTRAINT [FK_OrganizationsJobs_Jobs] FOREIGN KEY ([JobID]) REFERENCES [dbo].[Jobs] ([JobID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_OrganizationsJobs_JobsKinds]...';


GO
ALTER TABLE [dbo].[OrganizationsJobs]
    ADD CONSTRAINT [FK_OrganizationsJobs_JobsKinds] FOREIGN KEY ([JobKindID]) REFERENCES [dbo].[JobsKinds] ([JobKindID]);


GO
PRINT N'Creating [dbo].[FK_OrganizationsJobs_OrganizationsJobsStatus]...';


GO
ALTER TABLE [dbo].[OrganizationsJobs]
    ADD CONSTRAINT [FK_OrganizationsJobs_OrganizationsJobsStatus] FOREIGN KEY ([OrganizationJobStatusID]) REFERENCES [dbo].[OrganizationsJobsStatus] ([OrganizationJobStatusID]);


GO
PRINT N'Creating [dbo].[FK_OrganizationsJobs_OrganizationsStructures]...';


GO
ALTER TABLE [dbo].[OrganizationsJobs]
    ADD CONSTRAINT [FK_OrganizationsJobs_OrganizationsStructures] FOREIGN KEY ([OrganizationID]) REFERENCES [dbo].[OrganizationsStructures] ([OrganizationID]);


GO
PRINT N'Creating [dbo].[FK_OrganizationsJobs_Ranks]...';


GO
ALTER TABLE [dbo].[OrganizationsJobs]
    ADD CONSTRAINT [FK_OrganizationsJobs_Ranks] FOREIGN KEY ([RankID]) REFERENCES [dbo].[Ranks] ([RankID]);


GO
PRINT N'Creating [dbo].[FK_BusinessSubCategories_BusinessCategories]...';


GO
ALTER TABLE [dbo].[BusinessSubCategories]
    ADD CONSTRAINT [FK_BusinessSubCategories_BusinessCategories] FOREIGN KEY ([BusinessCategoryID]) REFERENCES [dbo].[BusinessCategories] ([BusinessCategoryID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployeesEducationsDetails_GeneralSpecializations]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployeesEducationsDetails]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployeesEducationsDetails_GeneralSpecializations] FOREIGN KEY ([GeneralSpecializationID]) REFERENCES [dbo].[GeneralSpecializations] ([GeneralSpecializationID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployeesEducationsDetails_PromotionsRecordsEmployees]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployeesEducationsDetails]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployeesEducationsDetails_PromotionsRecordsEmployees] FOREIGN KEY ([PromotionRecordEmployeeID]) REFERENCES [dbo].[PromotionsRecordsEmployees] ([PromotionRecordEmployeeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployeesEducationsDetails_Qualifications]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployeesEducationsDetails]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployeesEducationsDetails_Qualifications] FOREIGN KEY ([QualificationID]) REFERENCES [dbo].[Qualifications] ([QualificationID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployeesEducationsDetails_QualificationsDegrees]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployeesEducationsDetails]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployeesEducationsDetails_QualificationsDegrees] FOREIGN KEY ([QualificationDegreeID]) REFERENCES [dbo].[QualificationsDegrees] ([QualificationDegreeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesQualifications_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[EmployeesQualifications]
    ADD CONSTRAINT [FK_EmployeesQualifications_EmployeesCodes] FOREIGN KEY ([EmployeeCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesQualifications_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[EmployeesQualifications]
    ADD CONSTRAINT [FK_EmployeesQualifications_EmployeesCodes1] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesQualifications_ExactSpecializations]...';


GO
ALTER TABLE [dbo].[EmployeesQualifications]
    ADD CONSTRAINT [FK_EmployeesQualifications_ExactSpecializations] FOREIGN KEY ([ExactSpecializationID]) REFERENCES [dbo].[ExactSpecializations] ([ExactSpecializationID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesQualifications_GeneralSpecializations]...';


GO
ALTER TABLE [dbo].[EmployeesQualifications]
    ADD CONSTRAINT [FK_EmployeesQualifications_GeneralSpecializations] FOREIGN KEY ([GeneralSpecializationID]) REFERENCES [dbo].[GeneralSpecializations] ([GeneralSpecializationID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesQualifications_Qualifications]...';


GO
ALTER TABLE [dbo].[EmployeesQualifications]
    ADD CONSTRAINT [FK_EmployeesQualifications_Qualifications] FOREIGN KEY ([QualificationID]) REFERENCES [dbo].[Qualifications] ([QualificationID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesQualifications_QualificationsDegrees]...';


GO
ALTER TABLE [dbo].[EmployeesQualifications]
    ADD CONSTRAINT [FK_EmployeesQualifications_QualificationsDegrees] FOREIGN KEY ([QualificationDegreeID]) REFERENCES [dbo].[QualificationsDegrees] ([QualificationDegreeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesQualifications_QualificationsTypes]...';


GO
ALTER TABLE [dbo].[EmployeesQualifications]
    ADD CONSTRAINT [FK_EmployeesQualifications_QualificationsTypes] FOREIGN KEY ([QualificationTypeID]) REFERENCES [dbo].[QualificationsTypes] ([QualificationTypeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_EmployeesCareersHistory] FOREIGN KEY ([CurrentEmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_EmployeesCodes2] FOREIGN KEY ([ApprovedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_EmployeesCodes3]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_EmployeesCodes3] FOREIGN KEY ([RemovingBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_GeneralSpecializations]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_GeneralSpecializations] FOREIGN KEY ([LastGeneralSpecializationID]) REFERENCES [dbo].[GeneralSpecializations] ([GeneralSpecializationID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_NewEmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_NewEmployeesCareersHistory] FOREIGN KEY ([NewEmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_PreviousEmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_PreviousEmployeesCareersHistory] FOREIGN KEY ([PreviousEmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_PromotionsCandidatesAddedWays]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_PromotionsCandidatesAddedWays] FOREIGN KEY ([PromotionCandidateAddedWayID]) REFERENCES [dbo].[PromotionsCandidatesAddedWays] ([PromotionCandidateAddedWayID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_PromotionsDecisions]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_PromotionsDecisions] FOREIGN KEY ([PromotionDecisionID]) REFERENCES [dbo].[PromotionsDecisions] ([PromotionDecisionID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_PromotionsRecords]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_PromotionsRecords] FOREIGN KEY ([PromotionRecordID]) REFERENCES [dbo].[PromotionsRecords] ([PromotionRecordID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_PromotionsRecordsJobsVacancies]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_PromotionsRecordsJobsVacancies] FOREIGN KEY ([PromotionRecordJobVacancyID]) REFERENCES [dbo].[PromotionsRecordsJobsVacancies] ([PromotionRecordJobVacancyID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_Qualifications]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_Qualifications] FOREIGN KEY ([LastQualificationID]) REFERENCES [dbo].[Qualifications] ([QualificationID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployees_QualificationsDegrees]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployees]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployees_QualificationsDegrees] FOREIGN KEY ([LastQualificationDegreeID]) REFERENCES [dbo].[QualificationsDegrees] ([QualificationDegreeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesExperiences_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[EmployeesExperiences]
    ADD CONSTRAINT [FK_EmployeesExperiences_EmployeesCodes] FOREIGN KEY ([EmployeeCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesExperiences_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[EmployeesExperiences]
    ADD CONSTRAINT [FK_EmployeesExperiences_EmployeesCodes1] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesEvaluationsDetails_EmployeesEvaluations]...';


GO
ALTER TABLE [dbo].[EmployeesEvaluationsDetails]
    ADD CONSTRAINT [FK_EmployeesEvaluationsDetails_EmployeesEvaluations] FOREIGN KEY ([EmployeeEvaluationID]) REFERENCES [dbo].[EmployeesEvaluations] ([EmployeeEvaluationID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesEvaluationsDetails_EvaluationsQuarters]...';


GO
ALTER TABLE [dbo].[EmployeesEvaluationsDetails]
    ADD CONSTRAINT [FK_EmployeesEvaluationsDetails_EvaluationsQuarters] FOREIGN KEY ([EvaluationQuarterID]) REFERENCES [dbo].[EvaluationsQuarters] ([EvaluationQuarterID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecords_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[PromotionsRecords]
    ADD CONSTRAINT [FK_PromotionsRecords_EmployeesCodes] FOREIGN KEY ([PreferenceBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecords_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[PromotionsRecords]
    ADD CONSTRAINT [FK_PromotionsRecords_EmployeesCodes1] FOREIGN KEY ([OpeningBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecords_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[PromotionsRecords]
    ADD CONSTRAINT [FK_PromotionsRecords_EmployeesCodes2] FOREIGN KEY ([InstallationBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecords_EmployeesCodes3]...';


GO
ALTER TABLE [dbo].[PromotionsRecords]
    ADD CONSTRAINT [FK_PromotionsRecords_EmployeesCodes3] FOREIGN KEY ([ClosingBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecords_EmployeesCodes4]...';


GO
ALTER TABLE [dbo].[PromotionsRecords]
    ADD CONSTRAINT [FK_PromotionsRecords_EmployeesCodes4] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecords_EmployeesCodes5]...';


GO
ALTER TABLE [dbo].[PromotionsRecords]
    ADD CONSTRAINT [FK_PromotionsRecords_EmployeesCodes5] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecords_JobsCategories]...';


GO
ALTER TABLE [dbo].[PromotionsRecords]
    ADD CONSTRAINT [FK_PromotionsRecords_JobsCategories] FOREIGN KEY ([JobCategoryID]) REFERENCES [dbo].[JobsCategories] ([JobCategoryID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PromotionsRecords_PromotionsPeriods]...';


GO
ALTER TABLE [dbo].[PromotionsRecords]
    ADD CONSTRAINT [FK_PromotionsRecords_PromotionsPeriods] FOREIGN KEY ([PromotionPeriodID]) REFERENCES [dbo].[PromotionsPeriods] ([PromotionPeriodID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecords_PromotionsRecordsStatus]...';


GO
ALTER TABLE [dbo].[PromotionsRecords]
    ADD CONSTRAINT [FK_PromotionsRecords_PromotionsRecordsStatus] FOREIGN KEY ([PromotionRecordStatusID]) REFERENCES [dbo].[PromotionsRecordsStatus] ([PromotionRecordStatusID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PromotionsRecords_Ranks]...';


GO
ALTER TABLE [dbo].[PromotionsRecords]
    ADD CONSTRAINT [FK_PromotionsRecords_Ranks] FOREIGN KEY ([RankID]) REFERENCES [dbo].[Ranks] ([RankID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesEvaluations_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[EmployeesEvaluations]
    ADD CONSTRAINT [FK_EmployeesEvaluations_EmployeesCodes] FOREIGN KEY ([EmployeeCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesEvaluations_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[EmployeesEvaluations]
    ADD CONSTRAINT [FK_EmployeesEvaluations_EmployeesCodes1] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesEvaluations_EvaluationPoints]...';


GO
ALTER TABLE [dbo].[EmployeesEvaluations]
    ADD CONSTRAINT [FK_EmployeesEvaluations_EvaluationPoints] FOREIGN KEY ([EvaluationPointID]) REFERENCES [dbo].[EvaluationPoints] ([EvaluationPointID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesEvaluations_MaturityYearsBalances]...';


GO
ALTER TABLE [dbo].[EmployeesEvaluations]
    ADD CONSTRAINT [FK_EmployeesEvaluations_MaturityYearsBalances] FOREIGN KEY ([MaturityYearID]) REFERENCES [dbo].[MaturityYearsBalances] ([MaturityYearID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsPeriods_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[PromotionsPeriods]
    ADD CONSTRAINT [FK_PromotionsPeriods_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsPeriods_MaturityYearsBalances]...';


GO
ALTER TABLE [dbo].[PromotionsPeriods]
    ADD CONSTRAINT [FK_PromotionsPeriods_MaturityYearsBalances] FOREIGN KEY ([YearID]) REFERENCES [dbo].[MaturityYearsBalances] ([MaturityYearID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsPeriods_Periods]...';


GO
ALTER TABLE [dbo].[PromotionsPeriods]
    ADD CONSTRAINT [FK_PromotionsPeriods_Periods] FOREIGN KEY ([PeriodID]) REFERENCES [dbo].[Periods] ([PeriodID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesCodes_Employees]...';


GO
ALTER TABLE [dbo].[EmployeesCodes]
    ADD CONSTRAINT [FK_EmployeesCodes_Employees] FOREIGN KEY ([EmployeeID]) REFERENCES [dbo].[Employees] ([EmployeeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesCodes_EmployeesTypes]...';


GO
ALTER TABLE [dbo].[EmployeesCodes]
    ADD CONSTRAINT [FK_EmployeesCodes_EmployeesTypes] FOREIGN KEY ([EmployeeTypeID]) REFERENCES [dbo].[EmployeesTypes] ([EmployeeTypeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionJobsCategories_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[PromotionsJobsCategories]
    ADD CONSTRAINT [FK_PromotionJobsCategories_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionJobsCategories_JobsCategories]...';


GO
ALTER TABLE [dbo].[PromotionsJobsCategories]
    ADD CONSTRAINT [FK_PromotionJobsCategories_JobsCategories] FOREIGN KEY ([JobCategoryID]) REFERENCES [dbo].[JobsCategories] ([JobCategoryID]);


GO
PRINT N'Creating [dbo].[FK_PromotionJobsCategories_JobsCategories1]...';


GO
ALTER TABLE [dbo].[PromotionsJobsCategories]
    ADD CONSTRAINT [FK_PromotionJobsCategories_JobsCategories1] FOREIGN KEY ([AssignedJobCategoryID]) REFERENCES [dbo].[JobsCategories] ([JobCategoryID]);


GO
PRINT N'Creating [dbo].[FK_PromotionJobsCategories_PromotionsPeriods]...';


GO
ALTER TABLE [dbo].[PromotionsJobsCategories]
    ADD CONSTRAINT [FK_PromotionJobsCategories_PromotionsPeriods] FOREIGN KEY ([PromotionPeriodID]) REFERENCES [dbo].[PromotionsPeriods] ([PromotionPeriodID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesCareersHistory_CareersDegrees]...';


GO
ALTER TABLE [dbo].[EmployeesCareersHistory]
    ADD CONSTRAINT [FK_EmployeesCareersHistory_CareersDegrees] FOREIGN KEY ([CareerDegreeID]) REFERENCES [dbo].[CareersDegrees] ([CareerDegreeID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesCareersHistory_CareersHistoryTypes]...';


GO
ALTER TABLE [dbo].[EmployeesCareersHistory]
    ADD CONSTRAINT [FK_EmployeesCareersHistory_CareersHistoryTypes] FOREIGN KEY ([CareerHistoryTypeID]) REFERENCES [dbo].[CareersHistoryTypes] ([CareerHistoryTypeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesCareersHistory_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[EmployeesCareersHistory]
    ADD CONSTRAINT [FK_EmployeesCareersHistory_EmployeesCodes] FOREIGN KEY ([EmployeeCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesCareersHistory_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[EmployeesCareersHistory]
    ADD CONSTRAINT [FK_EmployeesCareersHistory_EmployeesCodes1] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesCareersHistory_EmployeesCodes2]...';


GO
ALTER TABLE [dbo].[EmployeesCareersHistory]
    ADD CONSTRAINT [FK_EmployeesCareersHistory_EmployeesCodes2] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesCareersHistory_OrganizationsJobs]...';


GO
ALTER TABLE [dbo].[EmployeesCareersHistory]
    ADD CONSTRAINT [FK_EmployeesCareersHistory_OrganizationsJobs] FOREIGN KEY ([OrganizationJobID]) REFERENCES [dbo].[OrganizationsJobs] ([OrganizationJobID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesAllowances_Allowances]...';


GO
ALTER TABLE [dbo].[EmployeesAllowances]
    ADD CONSTRAINT [FK_EmployeesAllowances_Allowances] FOREIGN KEY ([AllowanceID]) REFERENCES [dbo].[Allowances] ([AllowanceID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesAllowances_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[EmployeesAllowances]
    ADD CONSTRAINT [FK_EmployeesAllowances_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesAllowances_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[EmployeesAllowances]
    ADD CONSTRAINT [FK_EmployeesAllowances_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeesAllowances_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[EmployeesAllowances]
    ADD CONSTRAINT [FK_EmployeesAllowances_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_Employees_Genders]...';


GO
ALTER TABLE [dbo].[Employees]
    ADD CONSTRAINT [FK_Employees_Genders] FOREIGN KEY ([GenderID]) REFERENCES [dbo].[Genders] ([GenderID]);


GO
PRINT N'Creating [dbo].[FK_Employees_MaritalStatus]...';


GO
ALTER TABLE [dbo].[Employees]
    ADD CONSTRAINT [FK_Employees_MaritalStatus] FOREIGN KEY ([MaritalStatusID]) REFERENCES [dbo].[MaritalStatus] ([MaritalStatusID]);


GO
PRINT N'Creating [dbo].[FK_PassengerOrdersItineraries_PassengerOrders]...';


GO
ALTER TABLE [dbo].[PassengerOrdersItineraries]
    ADD CONSTRAINT [FK_PassengerOrdersItineraries_PassengerOrders] FOREIGN KEY ([PassengerOrderID]) REFERENCES [dbo].[PassengerOrders] ([PassengerOrderID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsQualificationsPoints_GeneralSpecializations]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsQualificationsPoints]
    ADD CONSTRAINT [FK_PromotionsRecordsQualificationsPoints_GeneralSpecializations] FOREIGN KEY ([GeneralSpecializationID]) REFERENCES [dbo].[GeneralSpecializations] ([GeneralSpecializationID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsQualificationsPoints_PromotionsRecords]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsQualificationsPoints]
    ADD CONSTRAINT [FK_PromotionsRecordsQualificationsPoints_PromotionsRecords] FOREIGN KEY ([PromotionRecordID]) REFERENCES [dbo].[PromotionsRecords] ([PromotionRecordID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsQualificationsPoints_PromotionsRecordsQualificationsKinds]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsQualificationsPoints]
    ADD CONSTRAINT [FK_PromotionsRecordsQualificationsPoints_PromotionsRecordsQualificationsKinds] FOREIGN KEY ([PromotionRecordQualificationKindID]) REFERENCES [dbo].[PromotionsRecordsQualificationsKinds] ([PromotionRecordQualificationKindID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsQualificationsPoints_Qualifications]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsQualificationsPoints]
    ADD CONSTRAINT [FK_PromotionsRecordsQualificationsPoints_Qualifications] FOREIGN KEY ([QualificationID]) REFERENCES [dbo].[Qualifications] ([QualificationID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsQualificationsPoints_QualificationsDegrees]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsQualificationsPoints]
    ADD CONSTRAINT [FK_PromotionsRecordsQualificationsPoints_QualificationsDegrees] FOREIGN KEY ([QualificationDegreeID]) REFERENCES [dbo].[QualificationsDegrees] ([QualificationDegreeID]);


GO
PRINT N'Creating [dbo].[FK_EndOfServicesVacations_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[EndOfServicesVacations]
    ADD CONSTRAINT [FK_EndOfServicesVacations_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EndOfServicesVacations_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[EndOfServicesVacations]
    ADD CONSTRAINT [FK_EndOfServicesVacations_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EndOfServicesVacations_EndOfServices]...';


GO
ALTER TABLE [dbo].[EndOfServicesVacations]
    ADD CONSTRAINT [FK_EndOfServicesVacations_EndOfServices] FOREIGN KEY ([EndOfServiceID]) REFERENCES [dbo].[EndOfServices] ([EndOfServiceID]);


GO
PRINT N'Creating [dbo].[FK_EndOfServicesVacations_VacationsTypes]...';


GO
ALTER TABLE [dbo].[EndOfServicesVacations]
    ADD CONSTRAINT [FK_EndOfServicesVacations_VacationsTypes] FOREIGN KEY ([VacationTypeID]) REFERENCES [dbo].[VacationsTypes] ([VacationTypeID]);


GO
PRINT N'Creating [dbo].[FK_EndOfServicesReasons_EndOfServicesCases]...';


GO
ALTER TABLE [dbo].[EndOfServicesReasons]
    ADD CONSTRAINT [FK_EndOfServicesReasons_EndOfServicesCases] FOREIGN KEY ([EndOfServiceCaseID]) REFERENCES [dbo].[EndOfServicesCases] ([EndOfServiceCaseID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsLogs_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsLogs]
    ADD CONSTRAINT [FK_PromotionsRecordsLogs_EmployeesCodes] FOREIGN KEY ([ActionBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsLogs_PromotionsActionsTypes]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsLogs]
    ADD CONSTRAINT [FK_PromotionsRecordsLogs_PromotionsActionsTypes] FOREIGN KEY ([PromotionRecordActionTypeID]) REFERENCES [dbo].[PromotionsRecordsActionsTypes] ([PromotionActionTypeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsJobsVacancies_OrganizationsJobs]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsJobsVacancies]
    ADD CONSTRAINT [FK_PromotionsRecordsJobsVacancies_OrganizationsJobs] FOREIGN KEY ([OrganizationJobID]) REFERENCES [dbo].[OrganizationsJobs] ([OrganizationJobID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsJobsVacancies_PromotionsRecords]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsJobsVacancies]
    ADD CONSTRAINT [FK_PromotionsRecordsJobsVacancies_PromotionsRecords] FOREIGN KEY ([PromotionRecordID]) REFERENCES [dbo].[PromotionsRecords] ([PromotionRecordID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EndOfServices_EmployeesCareersHistory]...';


GO
ALTER TABLE [dbo].[EndOfServices]
    ADD CONSTRAINT [FK_EndOfServices_EmployeesCareersHistory] FOREIGN KEY ([EmployeeCareerHistoryID]) REFERENCES [dbo].[EmployeesCareersHistory] ([EmployeeCareerHistoryID]);


GO
PRINT N'Creating [dbo].[FK_EndOfServices_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[EndOfServices]
    ADD CONSTRAINT [FK_EndOfServices_EmployeesCodes] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EndOfServices_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[EndOfServices]
    ADD CONSTRAINT [FK_EndOfServices_EmployeesCodes1] FOREIGN KEY ([LastUpdatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EndOfServices_EndOfServicesReasons]...';


GO
ALTER TABLE [dbo].[EndOfServices]
    ADD CONSTRAINT [FK_EndOfServices_EndOfServicesReasons] FOREIGN KEY ([EndOfServiceReasonID]) REFERENCES [dbo].[EndOfServicesReasons] ([EndOfServiceReasonID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployeesSeniorityDetails_PromotionsRecordsEmployees]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployeesSeniorityDetails]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployeesSeniorityDetails_PromotionsRecordsEmployees] FOREIGN KEY ([PromotionRecordEmployeeID]) REFERENCES [dbo].[PromotionsRecordsEmployees] ([PromotionRecordEmployeeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesVacationsOpeningBalances_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[EmployeesVacationsOpeningBalances]
    ADD CONSTRAINT [FK_EmployeesVacationsOpeningBalances_EmployeesCodes] FOREIGN KEY ([EmployeeCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeesVacationsOpeningBalances_VacationsTypes]...';


GO
ALTER TABLE [dbo].[EmployeesVacationsOpeningBalances]
    ADD CONSTRAINT [FK_EmployeesVacationsOpeningBalances_VacationsTypes] FOREIGN KEY ([VacationTypeID]) REFERENCES [dbo].[VacationsTypes] ([VacationTypeID]);


GO
PRINT N'Creating [dbo].[FK_PromotionsRecordsEmployeesEvaluationsDetails_PromotionsRecordsEmployees]...';


GO
ALTER TABLE [dbo].[PromotionsRecordsEmployeesEvaluationsDetails]
    ADD CONSTRAINT [FK_PromotionsRecordsEmployeesEvaluationsDetails_PromotionsRecordsEmployees] FOREIGN KEY ([PromotionRecordEmployeeID]) REFERENCES [dbo].[PromotionsRecordsEmployees] ([PromotionRecordEmployeeID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_EmployeeExperiencesWithDetails_EmployeesCodes]...';


GO
ALTER TABLE [dbo].[EmployeeExperiencesWithDetails]
    ADD CONSTRAINT [FK_EmployeeExperiencesWithDetails_EmployeesCodes] FOREIGN KEY ([EmployeeCodeID]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeeExperiencesWithDetails_EmployeesCodes1]...';


GO
ALTER TABLE [dbo].[EmployeeExperiencesWithDetails]
    ADD CONSTRAINT [FK_EmployeeExperiencesWithDetails_EmployeesCodes1] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[EmployeesCodes] ([EmployeeCodeID]);


GO
PRINT N'Creating [dbo].[FK_EmployeeExperiencesWithDetails_SectorsTypes]...';


GO
ALTER TABLE [dbo].[EmployeeExperiencesWithDetails]
    ADD CONSTRAINT [FK_EmployeeExperiencesWithDetails_SectorsTypes] FOREIGN KEY ([SectorTypeID]) REFERENCES [dbo].[SectorsTypes] ([SectorTypeID]);


GO
PRINT N'Creating [dbo].[vwPassengerOrdersDetails]...';


GO
CREATE VIEW [dbo].[vwPassengerOrdersDetails]
AS
SELECT     ID, DetailID, EmployeeCareerHistoryID, StartDate, EndDate, Reason, Type
FROM         (SELECT     dbo.Delegations.DelegationID AS ID, dbo.DelegationsDetails.DelegationDetailID AS DetailID, dbo.DelegationsDetails.EmployeeCareerHistoryID, 
                                              dbo.Delegations.DelegationStartDate AS StartDate, dbo.Delegations.DelegationEndDate AS EndDate, dbo.Delegations.DelegationReason AS Reason, 
                                              1 AS Type
                        FROM         dbo.Delegations INNER JOIN
                                              dbo.DelegationsDetails ON dbo.Delegations.DelegationID = dbo.DelegationsDetails.DelegationID
                        UNION
                        SELECT     dbo.InternshipScholarships.InternshipScholarshipID AS ID, dbo.InternshipScholarshipsDetails.InternshipScholarshipDetailID AS DetailID, 
                                              dbo.InternshipScholarshipsDetails.EmployeeCareerHistoryID, dbo.InternshipScholarships.InternshipScholarshipStartDate AS StartDate, 
                                              dbo.InternshipScholarships.InternshipScholarshipEndDate AS EndDate, dbo.InternshipScholarships.InternshipScholarshipReason AS Reason, 
                                              2 AS Type
                        FROM         dbo.InternshipScholarships INNER JOIN
                                              dbo.InternshipScholarshipsDetails ON dbo.InternshipScholarships.InternshipScholarshipID = dbo.InternshipScholarshipsDetails.InternshipScholarshipID) 
                      AS v
GO
PRINT N'Creating [dbo].[vwOrganizationsJobs]...';


GO
CREATE VIEW [dbo].[vwOrganizationsJobs]
AS
SELECT     dbo.OrganizationsJobs.OrganizationJobID, dbo.OrganizationsJobs.JobNo, dbo.OrganizationsStructures.OrganizationCode, 
                      dbo.OrganizationsStructures.OrganizationName, dbo.Jobs.JobName, dbo.Jobs.JobCode, dbo.JobsCategories.JobCategoryName, dbo.Ranks.RankName
FROM         dbo.OrganizationsJobs INNER JOIN
                      dbo.OrganizationsStructures ON dbo.OrganizationsJobs.OrganizationID = dbo.OrganizationsStructures.OrganizationID INNER JOIN
                      dbo.Jobs ON dbo.OrganizationsJobs.JobID = dbo.Jobs.JobID INNER JOIN
                      dbo.JobsCategories ON dbo.Jobs.JobCategoryID = dbo.JobsCategories.JobCategoryID INNER JOIN
                      dbo.Ranks ON dbo.OrganizationsJobs.RankID = dbo.Ranks.RankID
GO
PRINT N'Creating [dbo].[vwEmployeesQualifications]...';


GO
CREATE VIEW [dbo].[vwEmployeesQualifications]
AS
SELECT     dbo.EmployeesQualifications.EmployeeCodeID, dbo.QualificationsDegrees.QualificationDegreeName, dbo.Qualifications.QualificationName, 
                      dbo.Qualifications.DirectPoints, dbo.Qualifications.IndirectPoints, dbo.EmployeesQualifications.QualificationDegreeID, dbo.EmployeesQualifications.QualificationID, 
                      dbo.EmployeesQualifications.GeneralSpecializationID, dbo.GeneralSpecializations.GeneralSpecializationName, dbo.QualificationsDegrees.Weight, 
                      dbo.EmployeesQualifications.GraduationYear, dbo.EmployeesQualifications.GraduationDate
FROM         dbo.EmployeesQualifications INNER JOIN
                      dbo.QualificationsDegrees ON dbo.EmployeesQualifications.QualificationDegreeID = dbo.QualificationsDegrees.QualificationDegreeID LEFT OUTER JOIN
                      dbo.GeneralSpecializations ON dbo.EmployeesQualifications.GeneralSpecializationID = dbo.GeneralSpecializations.GeneralSpecializationID FULL OUTER JOIN
                      dbo.Qualifications ON dbo.GeneralSpecializations.QualificationID = dbo.Qualifications.QualificationID AND 
                      dbo.EmployeesQualifications.QualificationID = dbo.Qualifications.QualificationID AND 
                      dbo.QualificationsDegrees.QualificationDegreeID = dbo.Qualifications.QualificationDegreeID
GO
PRINT N'Creating [dbo].[vwEmployeesCodes]...';


GO

CREATE VIEW [dbo].[vwEmployeesCodes]
AS
SELECT        dbo.EmployeesCodes.EmployeeCodeNo, dbo.EmployeesCodes.EmployeeCodeID, dbo.EmployeesCodes.EmployeeTypeID, dbo.EmployeesCodes.IsActive, 
                         dbo.Employees.EmployeeID, dbo.Employees.EmployeeIDNo, dbo.Employees.FirstNameAr, dbo.Employees.MiddleNameAr, dbo.Employees.GrandFatherNameAr, 
                         dbo.Employees.LastNameAr, dbo.Employees.FirstNameEn, dbo.Employees.MiddleNameEn, dbo.Employees.GrandFatherNameEn, dbo.Employees.LastNameEn, 
                         dbo.Employees.EmployeeBirthDate, dbo.Employees.EmployeeMobileNo, dbo.Employees.EmployeeBirthPlace, dbo.Employees.EmployeeEMail, 
                         dbo.Employees.EmployeeIDIssueDate, dbo.Employees.EmployeePassportNo, dbo.Employees.EmployeePassportSource, 
                         dbo.Employees.EmployeePassportIssueDate, dbo.Employees.EmployeePassportEndDate, dbo.Employees.CreatedDate, dbo.Employees.LastUpdatedDate, 
                         dbo.Employees.FirstNameAr + ' ' + dbo.Employees.MiddleNameAr + ' ' + dbo.Employees.GrandFatherNameAr + ' ' + dbo.Employees.LastNameAr AS EmployeeNameAr,
                          dbo.Employees.NationalityID
FROM            dbo.EmployeesCodes INNER JOIN
                         dbo.Employees ON dbo.EmployeesCodes.EmployeeID = dbo.Employees.EmployeeID
GO
PRINT N'Creating [dbo].[rndView]...';


GO

CREATE VIEW rndView
AS
SELECT RAND() rndResult
GO
PRINT N'Creating [dbo].[vwEmployeesCareers]...';


GO
CREATE VIEW [dbo].[vwEmployeesCareers]
AS
SELECT     dbo.vwEmployeesCodes.EmployeeCodeNo, dbo.vwEmployeesCodes.EmployeeIDNo, dbo.vwEmployeesCodes.EmployeeNameAr, 
                      dbo.OrganizationsStructures.OrganizationCode, dbo.OrganizationsStructures.OrganizationName, dbo.Ranks.RankName, dbo.Jobs.JobName, 
                      dbo.OrganizationsJobs.JobNo, dbo.vwEmployeesCodes.EmployeeCodeID, dbo.EmployeesCareersHistory.JoinDate, 
                      dbo.CareersHistoryTypes.CareerHistoryTypeName, dbo.CareersDegrees.CareerDegreeName, dbo.EmployeesCareersHistory.IsActive
FROM         dbo.OrganizationsJobs INNER JOIN
                      dbo.EmployeesCareersHistory ON dbo.OrganizationsJobs.OrganizationJobID = dbo.EmployeesCareersHistory.OrganizationJobID INNER JOIN
                      dbo.OrganizationsStructures ON dbo.OrganizationsJobs.OrganizationID = dbo.OrganizationsStructures.OrganizationID INNER JOIN
                      dbo.Ranks ON dbo.OrganizationsJobs.RankID = dbo.Ranks.RankID INNER JOIN
                      dbo.vwEmployeesCodes ON dbo.EmployeesCareersHistory.EmployeeCodeID = dbo.vwEmployeesCodes.EmployeeCodeID INNER JOIN
                      dbo.Jobs ON dbo.OrganizationsJobs.JobID = dbo.Jobs.JobID INNER JOIN
                      dbo.CareersHistoryTypes ON dbo.EmployeesCareersHistory.CareerHistoryTypeID = dbo.CareersHistoryTypes.CareerHistoryTypeID INNER JOIN
                      dbo.CareersDegrees ON dbo.EmployeesCareersHistory.CareerDegreeID = dbo.CareersDegrees.CareerDegreeID
GO
PRINT N'Creating [dbo].[vwEmployeesCareersHistory]...';


GO
CREATE VIEW [dbo].[vwEmployeesCareersHistory]
AS
SELECT     dbo.vwEmployeesCodes.EmployeeCodeNo, dbo.vwEmployeesCodes.EmployeeIDNo, dbo.vwEmployeesCodes.EmployeeNameAr, 
                      dbo.OrganizationsStructures.OrganizationCode, dbo.OrganizationsStructures.OrganizationName, dbo.Ranks.RankName, dbo.Jobs.JobName, 
                      dbo.OrganizationsJobs.JobNo, dbo.vwEmployeesCodes.EmployeeCodeID, dbo.EmployeesCareersHistory.EmployeeCareerHistoryID, 
                      dbo.EmployeesCareersHistory.JoinDate, dbo.Jobs.JobCode, dbo.Ranks.RankID, dbo.OrganizationsJobs.IsReserved, dbo.OrganizationsJobs.IsVacant, 
                      dbo.JobsCategories.JobCategoryID, dbo.JobsCategories.JobCategoryName, dbo.vwEmployeesCodes.IsActive, 
                      dbo.EmployeesCareersHistory.IsActive AS IsCurrentJob
FROM         dbo.OrganizationsJobs INNER JOIN
                      dbo.EmployeesCareersHistory ON dbo.OrganizationsJobs.OrganizationJobID = dbo.EmployeesCareersHistory.OrganizationJobID INNER JOIN
                      dbo.OrganizationsStructures ON dbo.OrganizationsJobs.OrganizationID = dbo.OrganizationsStructures.OrganizationID INNER JOIN
                      dbo.Ranks ON dbo.OrganizationsJobs.RankID = dbo.Ranks.RankID INNER JOIN
                      dbo.vwEmployeesCodes ON dbo.EmployeesCareersHistory.EmployeeCodeID = dbo.vwEmployeesCodes.EmployeeCodeID INNER JOIN
                      dbo.Jobs ON dbo.OrganizationsJobs.JobID = dbo.Jobs.JobID INNER JOIN
                      dbo.JobsCategories ON dbo.Jobs.JobCategoryID = dbo.JobsCategories.JobCategoryID
GO
PRINT N'Creating [dbo].[vwCurrentEmployeesCareer]...';


GO
CREATE VIEW [dbo].[vwCurrentEmployeesCareer]
AS
SELECT     dbo.vwEmployeesCodes.EmployeeCodeNo, dbo.vwEmployeesCodes.EmployeeIDNo, dbo.vwEmployeesCodes.EmployeeNameAr, 
                      dbo.OrganizationsStructures.OrganizationCode, dbo.OrganizationsStructures.OrganizationName, dbo.Ranks.RankName, dbo.Jobs.JobName, 
                      dbo.OrganizationsJobs.JobNo, dbo.vwEmployeesCodes.EmployeeCodeID, dbo.EmployeesCareersHistory.EmployeeCareerHistoryID, 
                      dbo.EmployeesCareersHistory.JoinDate
FROM         dbo.OrganizationsJobs INNER JOIN
                      dbo.EmployeesCareersHistory ON dbo.OrganizationsJobs.OrganizationJobID = dbo.EmployeesCareersHistory.OrganizationJobID INNER JOIN
                      dbo.OrganizationsStructures ON dbo.OrganizationsJobs.OrganizationID = dbo.OrganizationsStructures.OrganizationID INNER JOIN
                      dbo.Ranks ON dbo.OrganizationsJobs.RankID = dbo.Ranks.RankID INNER JOIN
                      dbo.vwEmployeesCodes ON dbo.EmployeesCareersHistory.EmployeeCodeID = dbo.vwEmployeesCodes.EmployeeCodeID INNER JOIN
                      dbo.Jobs ON dbo.OrganizationsJobs.JobID = dbo.Jobs.JobID
WHERE     (dbo.EmployeesCareersHistory.IsActive = 1)
GO
PRINT N'Creating [dbo].[fnGetCandidatesAlreadyPromotedCountByPromotionPeriodID]...';


GO
CREATE FUNCTION [dbo].[fnGetCandidatesAlreadyPromotedCountByPromotionPeriodID]
(
	@PromotionPeriodID int,
	@RankID int
)
RETURNS int
AS
BEGIN
	 DECLARE @CandidatesAlreadyPromotedCount int
	 SELECT @CandidatesAlreadyPromotedCount = COUNT(*)
	 FROM PromotionsRecordsEmployees
	 INNER JOIN PromotionsRecords on PromotionsRecords.PromotionRecordID=PromotionsRecordsEmployees.PromotionRecordID	
	 WHERE PromotionRecordJobVacancyID is not null
	 AND NewEmployeeCareerHistoryID is not null
	 AND PromotionPeriodID = @PromotionPeriodID
	 AND PromotionsRecords.RankID=@RankID
	 RETURN @CandidatesAlreadyPromotedCount
END
GO
PRINT N'Creating [dbo].[RandFn]...';


GO

CREATE FUNCTION RandFn()
RETURNS DECIMAL(18,18)
AS
BEGIN
DECLARE @rndValue DECIMAL(18,18)
SELECT @rndValue = rndResult
FROM rndView
RETURN @rndValue
END
GO
PRINT N'Creating [dbo].[GetHiringDateByEmployeeCodeID]...';


GO
--ALTER FUNCTION [dbo].[GetHiringDateByEmployeeCodeID] (@EmployeeCodeID INT)
--RETURNS varchar(50)
--BEGIN
--	DECLARE @Result varchar(50)
--	SELECT @Result = mic_db.dbo.fn_GregToUmAlqura(JoinDate) 
--	FROM [HCM].[dbo].[EmployeesCareersHistory] 
--	WHERE CareerHistoryTypeID =1 and EmployeeCodeID = @EmployeeCodeID
--	RETURN @Result
--END 

CREATE FUNCTION [dbo].[GetHiringDateByEmployeeCodeID] 
(
	@EmployeeCodeID INT
)
RETURNS DATE
BEGIN
	DECLARE @Result DATE
	SELECT @Result = JoinDate
	FROM EmployeesCareersHistory
	WHERE CareerHistoryTypeID = 1 
	AND EmployeeCodeID = @EmployeeCodeID
	RETURN @Result
END
GO
PRINT N'Creating [dbo].[GetEvaluationPointID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[GetEvaluationPointID]
(
	@degree FLOAT
)
RETURNS int
AS
BEGIN
	DECLARE @Result int
	IF(@degree BETWEEN 90 AND 100)
	SET @Result = 1
	ELSE IF(@degree BETWEEN 80 AND 89.99)
	SET @Result = 2
	ELSE IF(@degree BETWEEN 70 AND 79.99)
	SET @Result = 3
	ELSE IF(@degree BETWEEN 60 AND 69.99)
	SET @Result = 4
	ELSE 
	SET @Result = 5
	
	RETURN @Result
END
GO
PRINT N'Creating [dbo].[fnGetYearsFromTotalDays]...';


GO
CREATE function [dbo].[fnGetYearsFromTotalDays]
(
	@TotalDays int = 1060
)
RETURNS INT
BEGIN
	DECLARE 
	@DaysCountInUmAlquraYear int = 354,
	@DaysCountInUmAlquraMonth decimal(18,2) = 29.5
	RETURN @TotalDays / @DaysCountInUmAlquraYear
END
GO
PRINT N'Creating [dbo].[fnGetPromotionRecordCountByPromotionPeriodID]...';


GO
CREATE FUNCTION [dbo].[fnGetPromotionRecordCountByPromotionPeriodID]
(
	@PromotionPeriodID int,
	@RankID int
)
RETURNS int
AS
BEGIN
	 DECLARE @@PromotionsRecordsCount int
	 SELECT @@PromotionsRecordsCount = COUNT(*)
	 FROM PromotionsRecords	
	 WHERE PromotionPeriodID = @PromotionPeriodID and RankID=@RankID	
	 RETURN @@PromotionsRecordsCount
END
GO
PRINT N'Creating [dbo].[fnGetPeriodBetweenTwoDates]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[fnGetPeriodBetweenTwoDates]
(
	@StartDate DATE,
	@EndDate DATE
)
RETURNS INT
AS
BEGIN
	RETURN mic_db.dbo.fn_GetPeriodBetweenTwoUmAlquraDates(@StartDate,@EndDate) + 1
END
GO
PRINT N'Creating [dbo].[fnGetModMonthsFromTotalDays]...';


GO
CREATE function [dbo].[fnGetModMonthsFromTotalDays]
(
	@TotalDays int = 1060
)
RETURNS INT
BEGIN
	DECLARE 
	@DaysCountInUmAlquraYear int = 354,
	@DaysCountInUmAlquraMonth decimal(18,2) = 29.5
	RETURN CONVERT(INT,(@TotalDays % @DaysCountInUmAlquraYear) / @DaysCountInUmAlquraMonth)
END
GO
PRINT N'Creating [dbo].[fnGetModDaysFromTotalDays]...';


GO
CREATE function [dbo].[fnGetModDaysFromTotalDays]
(
	@TotalDays int = 1060
)
RETURNS INT
BEGIN
	DECLARE 
	@DaysCountInUmAlquraYear int = 354,
	@DaysCountInUmAlquraMonth decimal(18,2) = 29.5
	RETURN (CONVERT(INT,(@TotalDays % @DaysCountInUmAlquraYear) % @DaysCountInUmAlquraMonth)) + 1
END
GO
PRINT N'Creating [dbo].[fnGetCurrentQualification]...';


GO

CREATE Function [dbo].[fnGetCurrentQualification]			 
(
	@EmployeeCodeID int
)
Returns nvarchar(MAX)
BEGIN

	DECLARE @CurrentQualifications  nvarchar(MAX)

	SELECT @CurrentQualifications = ISNULL(QualificationsDegrees.QualificationDegreeName, '')  + ' - ' + ISNULL(Qualifications.QualificationName, '')
	FROM EmployeesQualifications AS eq LEFT OUTER JOIN
		Qualifications ON eq.QualificationID = Qualifications.QualificationID LEFT OUTER JOIN
		QualificationsDegrees ON eq.QualificationDegreeID = QualificationsDegrees.QualificationDegreeID
	WHERE eq.EmployeeCodeID = @EmployeeCodeID
	
	IF @CurrentQualifications is null
		SET @CurrentQualifications = ''
		
	RETURN @CurrentQualifications
END
GO
PRINT N'Creating [dbo].[fn_PickRandom]...';


GO

CREATE FUNCTION [dbo].[fn_PickRandom] 
(
	 @max_length INT=3
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
DECLARE @result nvarchar(max) = NULL;
DECLARE @s nvarchar(max) = '';
WITH chars(n, c) AS (
   SELECT 1, N'1' UNION ALL 
   SELECT 2, N'2' UNION ALL 
   SELECT 3, N'3' UNION ALL 
   SELECT 4, N'4' UNION ALL 
   SELECT 5, N'5' UNION ALL
   SELECT 6, N'6' UNION ALL 
   SELECT 7, N'7' UNION ALL
   SELECT 8, N'8' UNION ALL 
   SELECT 9, N'9' UNION ALL 
   SELECT 10, N'0'
   -- add more characters here to include them in a random string
),
lines AS (
   SELECT 1 AS n UNION ALL
   SELECT 2 UNION ALL
   SELECT 3 UNION ALL
   SELECT 4 UNION ALL
   SELECT 5 UNION ALL
   SELECT 6 UNION ALL
   SELECT 7 UNION ALL
   SELECT 8 UNION ALL
   SELECT 9 UNION ALL
   SELECT 10
),
all_lines AS (
   SELECT ROW_NUMBER() OVER(ORDER BY l1.n) AS n,
          convert(int, DBO.RandFn() * (SELECT COUNT(n) FROM chars)) + 1 AS char_n
   FROM lines l1
        CROSS JOIN lines l2 -- 100
        CROSS JOIN lines l3 -- 1000
        -- add more CROSS JOINs here to get longer string
),
only_lines AS (
   SELECT * FROM all_lines
   WHERE n <= @max_length
)
SELECT @s = @s + c 
FROM only_lines l INNER JOIN chars c ON l.char_n = c.n
SELECT @result=RTRIM(LTRIM(@s))
  RETURN @result;
END
GO
PRINT N'Creating [dbo].[fnGetPreviousConsumedVacationByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[fnGetPreviousConsumedVacationByEmployeeCodeID]
(
	 @VacationID int,
	 @EmployeeCodeID int,
	 @VacationTypeID int
)
RETURNS INT
AS
BEGIN
	DECLARE @Result INT
	SELECT @Result = ISNULL(SUM(DBO.fnGetPeriodBetweenTwoDates(Vacations.VacationStartDate,Vacations.VacationEndDate)),0)
	FROM Vacations
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = Vacations.EmployeeCareerHistoryID
	WHERE EmployeesCareersHistory.EmployeeCodeID = @EmployeeCodeID
	AND Vacations.VacationTypeID = @VacationTypeID
	AND Vacations.VacationID != @VacationID
	RETURN @Result
END
GO
PRINT N'Creating [dbo].[fnGetPreviousConsumedDelegationByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[fnGetPreviousConsumedDelegationByEmployeeCodeID]
(
	 @DelegationID int,
	 @EmployeeCodeID int,
	 @FinancialYear int
)
RETURNS INT
AS
BEGIN
	DECLARE @Result INT
	SELECT @Result = ISNULL(SUM(DBO.fnGetPeriodBetweenTwoDates(Delegations.DelegationstartDate,Delegations.DelegationEndDate)),0)
	FROM Delegations
	INNER JOIN DelegationsDetails ON Delegations.DelegationID = DelegationsDetails.DelegationID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = DelegationsDetails.EmployeeCareerHistoryID
	WHERE EmployeesCareersHistory.EmployeeCodeID = @EmployeeCodeID
	--AND Delegations.DelegationStartDate < (SELECT DelegationStartDate 
	--									   FROM Delegations 
	--									   INNER JOIN DelegationsDetails ON Delegations.DelegationID = DelegationsDetails.DelegationID
	--									   WHERE Delegations.DelegationID = @DelegationID 
	--									   AND DelegationsDetails.EmployeeCodeID=@EmployeeCodeID
	--									   AND DelegationKindID = 1) -- Tasks مهمة عمل
	AND DATEPART(YEAR,Delegations.DelegationStartDate) = @FinancialYear
	AND Delegations.DelegationKindID = 1 -- Tasks مهمة عمل
	AND Delegations.DelegationID != @DelegationID
	RETURN @Result
END
GO
PRINT N'Creating [dbo].[FnGetParent]...';


GO
CREATE FUNCTION [dbo].[FnGetParent](@OrganizationID int)
returns table as
RETURN (
		WITH EntityParent AS
		(
			SELECT OrganizationID , OrganizationParentID , OrganizationName
			FROM OrganizationsStructures 
			WHERE OrganizationID = @OrganizationID
			--ORDER BY ParentID
			
			UNION ALL
			
			SELECT e.OrganizationID , e.OrganizationParentID , e.OrganizationName
			FROM OrganizationsStructures e 
			INNER JOIN EntityParent e2 ON e.OrganizationID = e2.OrganizationParentID
			--ORDER BY E.ParentID
		)
	SELECT OrganizationID , OrganizationParentID , OrganizationName
	FROM EntityParent
);
GO
PRINT N'Creating [dbo].[FnGetChildren]...';


GO

CREATE FUNCTION [dbo].[FnGetChildren](@Parent INT)
RETURNS TABLE AS
RETURN (
		WITH EntityChildren AS
		(
			SELECT OrganizationsStructures.OrganizationID 
			FROM OrganizationsStructures
			WHERE OrganizationsStructures.OrganizationID = @Parent
			
			UNION ALL
			
			SELECT e.OrganizationID 
			FROM OrganizationsStructures e 
			INNER JOIN EntityChildren e2 ON e.OrganizationParentID = e2.OrganizationID
		)
	SELECT EntityChildren.OrganizationID 
	FROM EntityChildren
);
GO
PRINT N'Creating [dbo].[fnGetLastEmployeeQualificationByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[fnGetLastEmployeeQualificationByEmployeeCodeID]
(
	@EmployeeCodeID int
)

RETURNS TABLE 
AS
RETURN 
(
	SELECT TOP(1) *
	FROM vwEmployeesQualifications
	WHERE EmployeeCodeID = @EmployeeCodeID
	ORDER BY [WEIGHT] DESC
	, GraduationDate DESC
	, CONVERT(INT, GraduationYear) DESC
)
GO
PRINT N'Creating [dbo].[fnSplit]...';


GO

CREATE Function [dbo].[fnSplit]			-- e.g.  select * from [dbo].[fn_Split]('1,23,123,232',',')
(
@IDs nvarchar(max),
@Delimiter varchar(1)
)
Returns @Tbl_IDs table (Seq int, value nvarchar(100)) as
BEGIN

	-- Append delimiter
	SET @IDs = @IDs + @Delimiter
	
	-- Indexes to keep the position of searching
	Declare @pos1 int
	Declare @pos2 int
	Declare @RowNum int
	Declare @Seq int = 0
	
	-- Start from first character
	Set @pos1 = CHARINDEX(@Delimiter, @IDs, 1)
	Set @pos2 = 1
	While @pos1 > 0
	Begin
		SET @Seq = @Seq + 1
		Insert into @Tbl_IDs(Seq, [value]) Values(@Seq, isnull(SUBSTRING(@IDs, @pos2, @pos1 - @pos2),''))
		
		-- goto next non comma character
		Set @pos2 = @pos1 + 1
		
		-- search for the next character
		Set @pos1 = CHARINDEX(@Delimiter, @IDs, @pos1+1)
			
	End

	RETURN
END
GO
PRINT N'Creating [dbo].[spGetAssigningsByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetAssigningsByEmployeeCodeID] --93
(
	@EmployeeCodeID int
)
AS
BEGIN

	SELECT Assignings.*,
			AssigningsTypes.AssigningTypeName,
			Jobs.JobName,
			OrganizationsStructures.OrganizationName,
			KSACities.KSACityName
	FROM Assignings
	INNER JOIN AssigningsTypes ON Assignings.AssigningTypID = AssigningsTypes.AssigningTypID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = Assignings.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON EmployeesCareersHistory.EmployeeCodeID = vwEmployeesCodes.EmployeeCodeID
	LEFT JOIN Jobs ON Assignings.JobID = Jobs.JobID
	LEFT JOIN OrganizationsStructures ON OrganizationsStructures.OrganizationID = Assignings.OrganizationID
	LEFT JOIN KSACities ON KSACities.KSACityID = Assignings.ExternalKSACityID
	WHERE EmployeesCareersHistory.EmployeeCodeID = @EmployeeCodeID
	
END
GO
PRINT N'Creating [dbo].[spGetAssigningByAssigningID]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetAssigningByAssigningID]
(
	@AssigningID int
)
AS
BEGIN

	DECLARE @OrganizationID int 

	SELECT @OrganizationID = Assignings.OrganizationID  FROM Assignings WHERE AssigningID = @AssigningID
	
	--SELECT * FROM dbo.FnGetParent(@OrganizationID) WHERE OrganizationID > 1

	DECLARE @combine nvarchar(max)
	SET @combine = ''

	SELECT @combine = OrganizationName + ' / ' + @combine FROM dbo.FnGetParent(@OrganizationID) WHERE OrganizationID > 1
	SET @combine = LTRIM(RTRIM(@combine))
	SET @combine = SUBSTRING(@combine, 0 , LEN(@combine)-1)

	SELECT	Assignings.AssigningID,
			Assignings.EmployeeCareerHistoryID,
			Assignings.AssigningTypID,
			Assignings.OrganizationID,
			Assignings.JobID,
			 Assignings.AssigningStartDate, 
			 mic_db.dbo.fn_GregToUmAlqura(Assignings.AssigningStartDate) AS AssigningStartDateUmAlQura,
			 Assignings.AssigningEndDate, 
			 mic_db.dbo.fn_GregToUmAlqura(Assignings.AssigningEndDate) AS AssigningEndDateUmAlQura,		 
--			Assignings.ExternalCity,
			Assignings.ExternalOrganization,
			Assignings.IsFinished,
			Assignings.CreatedDate,
			Assignings.CreatedBy,
			Assignings.LastUpdatedDate,
			Assignings.LastUpdatedBy, 
			AssigningsTypes.AssigningTypeName , 
			Jobs.JobName, 
			--OrganizationsStructures.OrganizationCode + ' - ' + OrganizationsStructures.OrganizationName as OrganizationName,
			OrganizationsStructures.OrganizationCode, 
			OrganizationsStructures.OrganizationName,
			@combine  as OrganizationFullName,
			EmployeesCareersHistory.EmployeeCodeID,
			mgr.EmployeeNameAr as ManagerNameAr
	FROM Assignings
	LEFT JOIN Jobs ON Assignings.JobID = Jobs.JobID
	LEFT JOIN OrganizationsStructures ON Assignings.OrganizationID = OrganizationsStructures.OrganizationID
	LEFT JOIN vwCurrentEmployeesCareer mgr ON mgr.EmployeeCodeID = Assignings.ManagerCodeID 
	INNER JOIN AssigningsTypes ON Assignings.AssigningTypID = AssigningsTypes.AssigningTypID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = Assignings.EmployeeCareerHistoryID
	WHERE AssigningID = @AssigningID
	
END
GO
PRINT N'Creating [dbo].[spGetActivePromotionPeriod]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetActivePromotionPeriod]

AS
BEGIN
	SELECT TOP(1) mic_db.dbo.fn_GregToUmAlqura(PromotionsPeriods.PromotionStartDate) AS  PromotionStartDateUmAlqura, 
	mic_db.dbo.fn_GregToUmAlqura(PromotionsPeriods.PromotionEndDate) AS  PromotionEndDateUmAlqura,
	MaturityYearsBalances.MaturityYear, 
	Periods.PeriodName 
	FROM PromotionsPeriods
	INNER JOIN Periods ON PromotionsPeriods.PeriodID = Periods.PeriodID
	INNER JOIN MaturityYearsBalances ON PromotionsPeriods.YearID = MaturityYearsBalances.MaturityYearID
	WHERE IsActive = 1
	ORDER BY PromotionsPeriods.YearID DESC
END
GO
PRINT N'Creating [dbo].[spEndOfServices]...';


GO
CREATE PROCEDURE [dbo].[spEndOfServices]
AS
BEGIN
	/*	***************************
		SET IDENTITY_INSERT CareersHistoryTypes ON
		INSERT INTO CareersHistoryTypes (CareerHistoryTypeID, CareerHistoryTypeName) VALUES (3, N'EOS')
		SET IDENTITY_INSERT CareersHistoryTypes OFF	
		***************************		*/

	DECLARE @EndOfServiceID int, @EmployeeCareerHistoryID int, @OrganizationJobIDOLD int, @EndOfServiceDate date, @CreatedBy int	
	DECLARE @EmployeeCodeID int, @OrganizationJobID int
	DECLARE @CareerHistoryTypeID int = 3					-- EOS
	--DECLARE @IDs nvarchar(MAX) = '0'	
	
	DECLARE EOSCursor CURSOR LOCAL FAST_FORWARD FOR
	SELECT EOS.EndOfServiceID, EOS.EmployeeCareerHistoryID, EOS.EndOfServiceDate, ECH.EmployeeCodeID, EOS.CreatedBy, ECH.OrganizationJobID
	FROM EndOfServices EOS 
	INNER JOIN EmployeesCareersHistory ECH on ECH.EmployeeCareerHistoryID = EOS.EmployeeCareerHistoryID
	WHERE ISNULL(EOS.isProcessed, 0) = 0
	AND EOS.EndOfServiceDate <= GETDATE()
	OPEN EOSCursor
	FETCH NEXT FROM EOSCursor INTO @EndOfServiceID, @EmployeeCareerHistoryID, @EndOfServiceDate, @EmployeeCodeID, @CreatedBy, @OrganizationJobIDOLD
	WHILE @@FETCH_STATUS = 0
		BEGIN
		
			BEGIN TRY
				
				BEGIN TRANSACTION
				
					-- Create OrganizationsJobs record for EOS
					INSERT INTO OrganizationsJobs(JobNo, OrganizationID, JobID, RankID, JobKindID, IsVacant, IsReserved, CreatedBy) 
											SELECT 'EOS-'+ JobNo, OrganizationID, JobID, RankID, JobKindID, IsVacant, IsReserved, @CreatedBy 
												FROM OrganizationsJobs WHERE OrganizationJobID = @OrganizationJobIDOLD
					SET @OrganizationJobID = IDENT_CURRENT('OrganizationsJobs')
					--Print @OrganizationJobID 
					
					INSERT INTO EmployeesCareersHistory (EmployeeCodeID, CareerHistoryTypeID, OrganizationJobID, CareerDegreeID, JoinDate, TransactionStartDate, IsActive, CreatedBy)
											SELECT ECH1.EmployeeCodeID, @CareerHistoryTypeID, @OrganizationJobID, CareerDegreeID, @EndOfServiceDate, @EndOfServiceDate, 
												0 as IsActive, @CreatedBy 
												FROM EmployeesCareersHistory ECH1 WHERE EmployeeCareerHistoryID = @EmployeeCareerHistoryID

					UPDATE EmployeesCareersHistory SET IsActive = 0, LastUpdatedBy = @CreatedBy, LastUpdatedDate = GETDATE() WHERE EmployeeCareerHistoryID = @EmployeeCareerHistoryID
					UPDATE OrganizationsJobs SET IsVacant = 1, LastUpdatedBy = @CreatedBy, LastUpdatedDate = GETDATE() WHERE OrganizationJobID = @OrganizationJobIDOLD
					UPDATE EmployeesCodes SET IsActive = 0, LastUpdatedBy = @CreatedBy, LastUpdatedDate = GETDATE() WHERE EmployeeCodeID = @EmployeeCodeID
					
					--SET @IDs = @IDs + ',' + STR(@EndOfServiceID)
					UPDATE EndOfServices SET isProcessed = 1, LastUpdatedBy = @CreatedBy, LastUpdatedDate = GETDATE() WHERE EndOfServiceID = @EndOfServiceID
			
					--Print @EndOfServiceID
			
				COMMIT
				
			END TRY
			BEGIN CATCH
				ROLLBACK								
				PRINT 'error'
				RAISERROR('there is some error ...', 16, 1)
			END CATCH
			
			FETCH NEXT FROM EOSCursor INTO @EndOfServiceID, @EmployeeCareerHistoryID, @EndOfServiceDate, @EmployeeCodeID, @CreatedBy, @OrganizationJobIDOLD
		END
	CLOSE EOSCursor
	DEALLOCATE EOSCursor
	
	--EXECUTE('UPDATE EndOfServices SET isProcessed = 1 WHERE EndOfServiceID IN (' + @IDs + ')') 



END
GO
PRINT N'Creating [dbo].[spGetChangeLogs]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

--exec [dbo].[spGetChangeLogs] '2019-01-01', '2020-10-10'

CREATE PROCEDURE [dbo].[spGetChangeLogs]
(
	@StartDate date,
	@EndDate date,
	@BusinssSubCategoryID int = -1,
	@EmployeeCodeID int = -1
)
AS
BEGIN

	Declare @StartDate_local date = @StartDate 
	Declare @EndDate_local date = @EndDate
	Declare @BusinssSubCategoryID_local int = @BusinssSubCategoryID
	Declare @EmployeeCodeID_local int = @EmployeeCodeID

	IF @BusinssSubCategoryID_local = -1
	BEGIN
		SET @BusinssSubCategoryID_local = null
	END
	
	IF @EmployeeCodeID_local = -1
	BEGIN
		SET @EmployeeCodeID_local = null
	END

	SELECT Count(*) total, BusinessSubCategories.BusinessSubCategoryAr, vwEmployeesCodes.EmployeeCodeNo, ChangeLogs.EmployeeCodeID, 
		EventTypes.Type, vwEmployeesCodes.EmployeeNameAr, ChangeLogs.EntityName
	FROM ChangeLogs
		INNER JOIN EventTypes ON ChangeLogs.EventTypeID = EventTypes.EventTypeID
		INNER JOIN vwEmployeesCodes ON ChangeLogs.EmployeeCodeID = vwEmployeesCodes.EmployeeCodeID
		INNER JOIN BusinessSubCategories ON BusinessSubCategories.EntityName = ChangeLogs.EntityName 
	WHERE ChangeLogs.EmployeeCodeID is not null
		AND ChangeLogs.EntityName not like '%Details%'
		AND ChangeLogs.EntityName <> 'HCMDAL.SMSLogs'
		--AND EmployeeCodeNo <> '90012454'
		AND CONVERT(date, ChangeLogs.DateChange) BETWEEN @StartDate_local AND @EndDate_local 
		--AND CONVERT(date, ChangeLogs.DateChange) BETWEEN '2019-01-01' AND '2020-10-02'
		AND BusinessSubCategories.BusinssSubCategoryID = ISNULL(@BusinssSubCategoryID_local, BusinessSubCategories.BusinssSubCategoryID)
		AND vwEmployeesCodes.EmployeeCodeID = ISNULL(@EmployeeCodeID_local, vwEmployeesCodes.EmployeeCodeID)

	Group By BusinessSubCategories.BusinessSubCategoryAr, ChangeLogs.EmployeeCodeID, EventTypes.Type, vwEmployeesCodes.EmployeeNameAr, EmployeeCodeNo, ChangeLogs.EntityName
	Order By vwEmployeesCodes.EmployeeNameAr
	
	--SELECT DISTINCT EntityName FROM ChangeLogs
	
END
GO
PRINT N'Creating [dbo].[spStopWorksByEndedStatusAndEmployeeCodeID]...';


GO
CREATE PROC [dbo].[spStopWorksByEndedStatusAndEmployeeCodeID] 
(
	 @StopWorkEnded INT,--0 =Mean it didn't end1= mean ended,=2 all of them.
	@EmployeeCodeID int=NULL
)
AS
SELECT  SW.StopWorkID,
		SW.StopWorkStartDate AS StopWorkStartDateGregorian,
		mic_db.dbo.fn_GregToUmAlqura(SW.StopWorkStartDate)StopWorkStartDateHijri,
		SW.StopWorkEndDate AS StopWorkEndDateGregorian,
		mic_db.dbo.fn_GregToUmAlqura(SW.StopWorkEndDate)StopWorkEndDateHijri,
		SW.StopPoint,
		CASE WHEN SW.IsConvicted = 1 THEN N'مدان' ELSE N'غير مدان' END AS IsConvicted, 
		SW.StartStopWorkDecisionNumber,
		SW.StartStopWorkDecisionDate AS StartStopWorkDecisionDateGregorian,
		mic_db.dbo.fn_GregToUmAlqura(CAST(SW.StartStopWorkDecisionDate AS DATE))StartStopWorkDecisionDateHijri,
		SW.EndStopWorkDecisionNumber,
		SW.EndStopWorkDecisionDate AS EndStopWorkDecisionDateGregorian,
		mic_db.dbo.fn_GregToUmAlqura(CAST(SW.EndStopWorkDecisionDate AS DATE))EndStopWorkDecisionDateHijri,
		ECH.EmployeeCareerHistoryID,
		EC.EmployeeCodeID,
		EC.EmployeeCodeNo,
		E.EmployeeID,
		E.EmployeeIDNo,
		E.FirstNameAr+' '+E.MiddleNameAr+' '+E.GrandFatherNameAr+' '+E.LastNameAr AS EmployeeNameAr,
		E.EmployeeMobileNo,
		SWT.StopWorkTypeID,
		SWT.StopWorkTypeName,
		SWC.StopWorkCategoryID,
		SWC.StopWorkCategoryName,
		CASE WHEN  SW.StopWorkEndDate > GETDATE() THEN N'ساري' ELSE N'منتهي' END as StopWorkIsEnd
	FROM StopWorks SW
		INNER JOIN EmployeesCareersHistory ECH ON ECH.EmployeeCareerHistoryID=SW.EmployeeCareerHistoryID
		INNER JOIN EmployeesCodes EC ON EC.EmployeeCodeID=ECH.EmployeeCodeID
		INNER JOIN Employees E ON E.EmployeeID=EC.EmployeeID
		INNER JOIN StopWorksTypes SWT ON SWT.StopWorkTypeID=SW.StopWorkTypeID
		INNER JOIN StopWorksCategories SWC ON SWC.StopWorkCategoryID=SWT.StopWorkCategoryID
	where 
		 @StopWorkEnded  = CASE WHEN @StopWorkEnded =2 
											THEN 2 
											ELSE (CASE WHEN  SW.StopWorkEndDate > GETDATE() THEN 0 ELSE 1 END) END
	 AND EC.EmployeeCodeID =ISNULL(@EmployeeCodeID,EC.EmployeeCodeID)
GO
PRINT N'Creating [dbo].[spGetPassengerOrderByPassengerOrderIDOld]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPassengerOrderByPassengerOrderIDOld]
(
	@PassengerOrderID int
)
AS
BEGIN  

	DECLARE @PassengerOrderTypeID INT 
	SELECT @PassengerOrderTypeID = PassengerOrderTypeID FROM PassengerOrdersOld PassengerOrders WHERE PassengerOrders.PassengerOrderID = @PassengerOrderID
	
	DECLARE @tbl TABLE (ID int, DetailID int, EmployeeCareerHistoryID int, StartDate date, EndDate date, Reason nvarchar(500))
	
	IF @PassengerOrderTypeID = 1 
	BEGIN
		INSERT INTO @tbl SELECT Delegations.DelegationID, DelegationsDetails.DelegationDetailID, DelegationsDetails.EmployeeCareerHistoryID, Delegations.DelegationStartDate, Delegations.DelegationEndDate, 
								Delegations.DelegationReason
							FROM Delegations INNER JOIN
								DelegationsDetails ON Delegations.DelegationID = DelegationsDetails.DelegationID 
	END		
	ELSE
	BEGIN
		INSERT INTO @tbl SELECT InternshipScholarships.InternshipScholarshipID, InternshipScholarshipsDetails.InternshipScholarshipDetailID, 
							  InternshipScholarshipsDetails.EmployeeCareerHistoryID, InternshipScholarships.InternshipScholarshipStartDate, 
							  InternshipScholarships.InternshipScholarshipEndDate, InternshipScholarships.InternshipScholarshipReason
							FROM InternshipScholarships INNER JOIN
							  InternshipScholarshipsDetails ON InternshipScholarships.InternshipScholarshipID = InternshipScholarshipsDetails.InternshipScholarshipID
	END



	SELECT PassengerOrders.PassengerOrderID, PassengerOrders.DetailID, PassengerOrders.TravellingDate, PassengerOrders.RankID, 
	  PassengerOrders.TicketClassID, 
	  CASE WHEN PassengerOrders.Going = 1 THEN N'نعم' ELSE N'لا' END AS GoingText, 
	  CASE WHEN PassengerOrders.Returning = 1 THEN N'نعم' ELSE N'لا' END AS ReturningText,  
	  PassengerOrders.CreatedDate, PassengerOrders.LastUpdatedDate, 
	  detail.StartDate, detail.EndDate,  
	  mic_db.dbo.fn_GregToUmAlqura(detail.StartDate) AS StartDateUmAlQura, 
	  mic_db.dbo.fn_GregToUmAlqura(detail.EndDate) AS EndDateUmAlQura, 
	  detail.Reason, vwEmployeesCodes.EmployeeCodeNo, Employees.EmployeeIDNo, 
	  vwEmployeesCodes.EmployeeNameAr, Ranks.RankName, TicketsClasses.TicketClassName, PassengerOrders.PassengerOrderTypeID, 
	  PassengerOrdersTypes.PassengerOrderTypeName
	FROM PassengerOrdersOld PassengerOrders 
	INNER JOIN PassengerOrdersTypes on PassengerOrdersTypes.PassengerOrderTypeID = PassengerOrders.PassengerOrderTypeID
	INNER JOIN @tbl detail ON PassengerOrders.DetailID = detail.DetailID 
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = detail.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID=EmployeesCareersHistory.EmployeeCodeID
	INNER JOIN Employees ON vwEmployeesCodes.EmployeeID = Employees.EmployeeID 
	LEFT OUTER JOIN Ranks ON PassengerOrders.RankID = Ranks.RankID 
	LEFT OUTER JOIN TicketsClasses ON PassengerOrders.TicketClassID = TicketsClasses.TicketClassID
	WHERE PassengerOrders.PassengerOrderID = @PassengerOrderID
	
END
GO
PRINT N'Creating [dbo].[spGetPassengerOrdersByEmployeeCodeIDOld]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPassengerOrdersByEmployeeCodeIDOld]--21006
(
	@EmployeeCodeID int
)
AS
BEGIN 
	
	DECLARE @tbl TABLE (ID int, DetailID int, EmployeeCareerHistoryID int, StartDate date, EndDate date, Reason nvarchar(500), PassengerOrderTypeID int)

	INSERT INTO @tbl SELECT Delegations.DelegationID, DelegationsDetails.DelegationDetailID, DelegationsDetails.EmployeeCareerHistoryID, Delegations.DelegationStartDate, Delegations.DelegationEndDate, 
							Delegations.DelegationReason, 1
						FROM Delegations INNER JOIN
							DelegationsDetails ON Delegations.DelegationID = DelegationsDetails.DelegationID 
							
	INSERT INTO @tbl SELECT InternshipScholarships.InternshipScholarshipID, InternshipScholarshipsDetails.InternshipScholarshipDetailID, 
						  InternshipScholarshipsDetails.EmployeeCareerHistoryID, InternshipScholarships.InternshipScholarshipStartDate, 
						  InternshipScholarships.InternshipScholarshipEndDate, InternshipScholarships.InternshipScholarshipReason, 2
						FROM InternshipScholarships INNER JOIN
						  InternshipScholarshipsDetails ON InternshipScholarships.InternshipScholarshipID = InternshipScholarshipsDetails.InternshipScholarshipID


	SELECT PassengerOrders.*,
	  case when PassengerOrders.Going = 1 then N'نعم' else N'لا' end as GoingText, 
	  case when PassengerOrders.Returning = 1 then N'نعم' else N'لا' end as ReturningText,  
	  Detail.StartDate, Detail.EndDate, Detail.Reason, vwEmployeesCodes.EmployeeCodeNo, vwEmployeesCodes.EmployeeIDNo, 
	  vwEmployeesCodes.EmployeeNameAr, Ranks.RankName, TicketsClasses.TicketClassName, 
	  PassengerOrdersTypes.PassengerOrderTypeName
	FROM PassengerOrdersOld as PassengerOrders
	INNER JOIN PassengerOrdersTypes on PassengerOrdersTypes.PassengerOrderTypeID = PassengerOrders.PassengerOrderTypeID
	INNER JOIN @tbl Detail ON PassengerOrders.DetailID = Detail.DetailID AND Detail.PassengerOrderTypeID = PassengerOrders.PassengerOrderTypeID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = Detail.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID=EmployeesCareersHistory.EmployeeCodeID
	LEFT OUTER JOIN Ranks ON PassengerOrders.RankID = Ranks.RankID 
	LEFT OUTER JOIN TicketsClasses ON PassengerOrders.TicketClassID = TicketsClasses.TicketClassID
	WHERE vwEmployeesCodes.EmployeeCodeID = @EmployeeCodeID
	
END
GO
PRINT N'Creating [dbo].[spGetGovernmentFundsDeactivationByGovernmentFundsID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetGovernmentFundsDeactivationByGovernmentFundsID] 
(
	@GovernmentFundID int
)
AS
BEGIN
		
	SELECT GovernmentFunds.GovernmentFundID,
			GovernmentFunds.EmployeeCodeID,
			GovernmentFunds.GovernmentFundTypeID,
			GovernmentFunds.GovernmentDeductionTypeID,
			GovernmentFunds.LoanNo,
			GovernmentFunds.LoanDate,
			GovernmentFunds.DeductionStartDate,
			mic_db.dbo.fn_GregToUmAlqura(CONVERT(DATE,GovernmentFunds.LoanDate)) AS LoanDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(CONVERT(DATE,GovernmentFunds.DeductionStartDate)) AS DeductionStartDateUmAlQura,			
			GovernmentFunds.MonthlyDeductionAmount,
			GovernmentFunds.TotalDeductionAmount,
			--mic_db.dbo.fn_GregToUmAlqura(CONVERT(DATE,GovernmentFunds.ContractDate)) AS ContractDateUmAlQura,
			--GovernmentFunds.ContractDate,
			GovernmentFunds.ContractNo,
			GovernmentFunds.SponserToIDNo,
			GovernmentFunds.SponserToName,
			GovernmentFunds.CreatedDate,
			GovernmentFunds.LastUpdatedDate,
			GovernmentFunds.CreatedBy,
			GovernmentFunds.LastUpdatedBy,
			GovernmentDeductionsTypes.GovernmentDeductionTypeName,
			GovernmentFundsTypes.GovernmentFundTypeName,
			vwCurrentEmployeesCareer.EmployeeCodeNo, 
			vwCurrentEmployeesCareer.EmployeeIDNo, 
			vwCurrentEmployeesCareer.EmployeeNameAr,
			vwCurrentEmployeesCareer.RankName,
			vwCurrentEmployeesCareer.OrganizationName,
			vwCurrentEmployeesCareer.JobNo,
			KSACities.KSACityName,
			GovernmentFunds.LetterNo,
			mic_db.dbo.fn_GregToUmAlqura(CONVERT(DATE,GovernmentFunds.LetterDate)) AS LetterDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(CONVERT(DATE,GovernmentFunds.DeactiveDate)) AS DeactiveDateUmAlQura
	FROM GovernmentFunds
	INNER JOIN vwCurrentEmployeesCareer ON GovernmentFunds.EmployeeCodeID = vwCurrentEmployeesCareer.EmployeeCodeID
	LEFT JOIN GovernmentDeductionsTypes ON GovernmentFunds.GovernmentDeductionTypeID = GovernmentDeductionsTypes.GovernmentDeductionTypeID
	LEFT JOIN GovernmentFundsTypes ON GovernmentFunds.GovernmentFundTypeID = GovernmentFundsTypes.GovernmentFundTypeID
	LEFT JOIN KSACities ON GovernmentFunds.KSACityID = KSACities.KSACityID
	WHERE GovernmentFundID = @GovernmentFundID
END
GO
PRINT N'Creating [dbo].[spGetInsteadDeportationByID]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetInsteadDeportationByID]
(
	@InsteadDeportationID int
)
AS
BEGIN 

	SELECT InsteadDeportations.InsteadDeportationID, 
		InsteadDeportations.EmployeeCareerHistoryID, 
		vwEmployeesCareersHistory.EmployeeCodeID,
		InsteadDeportations.DeportationDate,
		mic_db.dbo.fn_GregToUmAlqura(cast(InsteadDeportations.DeportationDate as date)) AS DeportationDateUmAlQura,
		InsteadDeportations.Amount, 
		InsteadDeportations.Note
	FROM InsteadDeportations 
		INNER JOIN vwEmployeesCareersHistory ON InsteadDeportations.EmployeeCareerHistoryID = vwEmployeesCareersHistory.EmployeeCareerHistoryID
	WHERE InsteadDeportations.InsteadDeportationID = @InsteadDeportationID
 
END
GO
PRINT N'Creating [dbo].[spGetGovernmentFundsByGovernmentFundsID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetGovernmentFundsByGovernmentFundsID] 
(
	@GovernmentFundID int
)
AS
BEGIN
		
	SELECT GovernmentFunds.GovernmentFundID,
			GovernmentFunds.EmployeeCodeID,
			GovernmentFunds.GovernmentFundTypeID,
			GovernmentFunds.GovernmentDeductionTypeID,
			GovernmentFunds.LoanNo,
			GovernmentFunds.LoanDate,
			GovernmentFunds.DeductionStartDate,
			mic_db.dbo.fn_GregToUmAlqura(CONVERT(DATE,GovernmentFunds.LoanDate)) AS LoanDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(CONVERT(DATE,GovernmentFunds.DeductionStartDate)) AS DeductionStartDateUmAlQura,		
			GovernmentFunds.MonthlyDeductionAmount,
			GovernmentFunds.TotalDeductionAmount,
			--mic_db.dbo.fn_GregToUmAlqura(CONVERT(DATE,GovernmentFunds.ContractDate)) AS ContractDateUmAlQura,
			--GovernmentFunds.ContractDate,
			GovernmentFunds.ContractNo,
			GovernmentFunds.SponserToIDNo,
			GovernmentFunds.SponserToName,
			GovernmentFunds.CreatedDate,
			GovernmentFunds.LastUpdatedDate,
			GovernmentFunds.CreatedBy,
			GovernmentFunds.LastUpdatedBy,
			GovernmentDeductionsTypes.GovernmentDeductionTypeName,
			GovernmentFundsTypes.GovernmentFundTypeName,
			vwCurrentEmployeesCareer.EmployeeCodeNo, 
			vwCurrentEmployeesCareer.EmployeeIDNo, 
			vwCurrentEmployeesCareer.EmployeeNameAr,
			vwCurrentEmployeesCareer.RankName,
			vwCurrentEmployeesCareer.OrganizationName,
			vwCurrentEmployeesCareer.JobNo,
			KSACities.KSACityName
	FROM GovernmentFunds
	INNER JOIN vwCurrentEmployeesCareer ON GovernmentFunds.EmployeeCodeID = vwCurrentEmployeesCareer.EmployeeCodeID
	LEFT JOIN GovernmentDeductionsTypes ON GovernmentFunds.GovernmentDeductionTypeID = GovernmentDeductionsTypes.GovernmentDeductionTypeID
	LEFT JOIN GovernmentFundsTypes ON GovernmentFunds.GovernmentFundTypeID = GovernmentFundsTypes.GovernmentFundTypeID
	LEFT JOIN KSACities ON GovernmentFunds.KSACityID = KSACities.KSACityID
	WHERE GovernmentFundID = @GovernmentFundID
END
GO
PRINT N'Creating [dbo].[spGetGovernmentFundsByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetGovernmentFundsByEmployeeCodeID] 
(
	@EmployeeCodeID int
)
AS
BEGIN
	SELECT GovernmentFunds.*,
			GovernmentDeductionsTypes.GovernmentDeductionTypeName,
			GovernmentFundsTypes.GovernmentFundTypeName		
	FROM GovernmentFunds
	LEFT JOIN GovernmentDeductionsTypes ON GovernmentFunds.GovernmentDeductionTypeID = GovernmentDeductionsTypes.GovernmentDeductionTypeID
	LEFT JOIN GovernmentFundsTypes ON GovernmentFunds.GovernmentFundTypeID = GovernmentFundsTypes.GovernmentFundTypeID
	WHERE GovernmentFunds.EmployeeCodeID = @EmployeeCodeID
END
GO
PRINT N'Creating [dbo].[spGetExperienceByEmployeeCodeID]...';


GO
CREATE PROCEDURE [dbo].[spGetExperienceByEmployeeCodeID]
(
	@EmployeeCodeID int
)
AS
BEGIN
	SELECT TotalYears,TotalMonths,TotalDays 
	FROM EmployeesExperiences
	WHERE EmployeeCodeID = @EmployeeCodeID
END
GO
PRINT N'Creating [dbo].[spGetEvaluationByEmployeeCodeID]...';


GO
CREATE PROCEDURE [dbo].[spGetEvaluationByEmployeeCodeID]
(
	@EmployeeCodeID int = 22057
)
AS
BEGIN
	SELECT TOP 2  EmployeesEvaluations.EvaluationDegree,
				  EvaluationPoints.Evaluation,
				  MaturityYearsBalances.MaturityYear
	FROM EmployeesEvaluations  
	INNER JOIN EvaluationPoints ON EmployeesEvaluations.EvaluationPointID = EvaluationPoints.EvaluationPointID
	INNER JOIN MaturityYearsBalances ON EmployeesEvaluations.MaturityYearID = MaturityYearsBalances.MaturityYearID
	WHERE EmployeeCodeID = @EmployeeCodeID 
	ORDER BY CONVERT(INT, MaturityYearsBalances.MaturityYear) DESC
END
GO
PRINT N'Creating [dbo].[spGetEndOfServiceByEndOfServiceID]...';


GO
/*
EndOfServices Reports
*/
CREATE PROC [dbo].[spGetEndOfServiceByEndOfServiceID] --1
( 
	@EndOfServiceID INT 
)
AS
SELECT  EOS.EndOfServiceID,
		mic_db.dbo.fn_GregToUmAlqura(EOS.EndOfServiceDate) AS EndOfServiceDate, -- [تاريخ نهاية الخدمة],
		EOS.EndOfServiceDecisionNo AS EndOfServiceDecisionNo,--[رقم القرار],
		mic_db.dbo.fn_GregToUmAlqura(EOS.EndOfServiceDecisionDate) AS EndOfServiceDecisionDate,-- [تاريخ القرار],
		EOSC.EndOfServiceCase +N' '+ EOSR.EndOfServiceReason  AS [Subject],-- [الموضوع],
		EOSC.EndOfServiceCase AS [SubjectCase],--[الموضوع حاله],
		EOSR.EndOfServiceReason  AS [SubjectReason],-- [ الموضوع سبب],
		E.FirstNameAr +' '	+ E.MiddleNameAr + ' '+ E.GrandFatherNameAr +' '+ E.LastNameAr AS [EmployeeNameAr],-- [الاسم],
		E.EmployeeIDNo AS EmployeeIDNo,--[السجل المدني],
		mic_db.dbo.fn_GregToUmAlqura(E.EmployeeBirthDate) AS EmployeeBirthDate,-- [تاريخ الميلاد],
		EC.EmployeeCodeNo AS EmployeeCodeNo,-- [رقم الكمبيوتر],
		OJ.JobNo AS JobNo,-- [رقم الوظيفة],
		J.JobName AS JobName,-- [الوظيفة],
		R.RankName AS RankName,-- [المرتبة],
		CD.CareerDegreeName AS CareerDegreeName,-- [الدرجة],
		BS.BasicSalary AS BasicSalary,-- [الراتب],
		O.OrganizationName AS OrganizationName-- [الجهة]
	FROM EndOfServices EOS 
		INNER JOIN EndOfServicesReasons EOSR  ON EOSR.EndOfServiceReasonID=EOS.EndOfServiceReasonID
		INNER JOIN EndOfServicesCases EOSC ON EOSC.EndOfServiceCaseID=EOSR.EndOfServiceCaseID
		INNER JOIN EmployeesCareersHistory ECH ON ECH.EmployeeCareerHistoryID=EOS.EmployeeCareerHistoryID
		INNER JOIN EmployeesCodes EC ON EC.EmployeeCodeID=ECH.EmployeeCodeID 
		INNER JOIN Employees E ON E.EmployeeID=EC.EmployeeID
		INNER JOIN OrganizationsJobs OJ ON OJ.OrganizationJobID=ECH.OrganizationJobID 
		INNER JOIN Jobs J ON J.JobID=OJ.JobID 
		INNER JOIN Ranks R ON R.RankID= OJ.RankID
		INNER JOIN CareersDegrees CD ON CD.CareerDegreeID=ECH.CareerDegreeID 
		INNER JOIN BasicSalaries BS ON BS.CareerDegreeID=CD.CareerDegreeID AND BS.RankID=R.RankID 
		INNER JOIN OrganizationsStructures O ON O.OrganizationID=OJ.OrganizationID 
	WHERE EOS.EndOfServiceID=@EndOfServiceID
GO
PRINT N'Creating [dbo].[spGetEmployeesAllowancesByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetEmployeesAllowancesByEmployeeCodeID] 
(
	@EmployeeCodeID int
)
AS
BEGIN

	SELECT	ea.EmployeeAllowanceID, 
			ea.AllowanceStartDate,
			mic_db.dbo.fn_GregToUmAlqura(ea.AllowanceStartDate) AS AllowanceStartDateUmAlQura, 
			ec.EmployeeCodeNo, 
			ec.EmployeeCodeID,
			ec.EmployeeIDNo, 
			ec.EmployeeNameAr,
			Allowances.AllowanceID, 
			Allowances.AllowanceName, 
			Allowances.AllowanceAmount, 
			AllowancesAmountTypes.AllowanceAmountTypeName,
			Jobs.JobName,
			ea.IsActive
	FROM EmployeesAllowances ea
	INNER JOIN EmployeesCareersHistory ech ON ea.EmployeeCareerHistoryID = ech.EmployeeCareerHistoryID
	INNER JOIN Allowances ON Allowances.AllowanceID = ea.AllowanceID
	INNER JOIN AllowancesAmountTypes ON Allowances.AllowanceAmountTypeID = AllowancesAmountTypes.AllowanceAmountTypeID
	INNER JOIN OrganizationsJobs ON OrganizationsJobs.OrganizationJobID = ech.OrganizationJobID
	INNER JOIN vwEmployeesCodes ec ON ec.EmployeeCodeID = ech.EmployeeCodeID
	INNER JOIN Employees e ON e.EmployeeID = ec.EmployeeID
	INNER JOIN Jobs on Jobs.JobID = OrganizationsJobs.JobID
	WHERE ech.EmployeeCodeID = @EmployeeCodeID
	
END
GO
PRINT N'Creating [dbo].[spGetEmployeesAllowancesByEmployeeAllowanceID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetEmployeesAllowancesByEmployeeAllowanceID]
(
	@EmployeeAllowanceID int
)
AS
BEGIN 

	SELECT ea.EmployeeAllowanceID, 
		mic_db.dbo.fn_GregToUmAlqura(ea.AllowanceStartDate) AS AllowanceStartDateUmAlQura, 
			ea.AllowanceStartDate, 
			ec.EmployeeCodeID , 
			e.EmployeeIDNo, 
			e.FirstNameAr, 
			e.MiddleNameAr, 
			e.GrandFatherNameAr, 
			e.LastNameAr, 
			Allowances.AllowanceID, 
			Allowances.AllowanceName, 
			Allowances.AllowanceAmount, 
			AllowancesAmountTypes.AllowanceAmountTypeName,
			Jobs.JobName, 
			ranks.RankName
	FROM EmployeesAllowances ea
	INNER JOIN EmployeesCareersHistory ech ON ea.EmployeeCareerHistoryID = ech.EmployeeCareerHistoryID
	INNER JOIN Allowances ON Allowances.AllowanceID = ea.AllowanceID
	INNER JOIN AllowancesAmountTypes ON Allowances.AllowanceAmountTypeID = AllowancesAmountTypes.AllowanceAmountTypeID
	INNER JOIN OrganizationsJobs ON OrganizationsJobs.OrganizationJobID = ech.OrganizationJobID	
	INNER JOIN EmployeesCodes ec ON ec.EmployeeCodeID = ech.EmployeeCodeID
	INNER JOIN Employees e ON e.EmployeeID = ec.EmployeeID
	INNER JOIN Jobs on Jobs.JobID = OrganizationsJobs.JobID
	INNER JOIN Ranks ON Ranks.RankID = OrganizationsJobs.RankID
	WHERE ea.EmployeeAllowanceID = @EmployeeAllowanceID
	ORDER BY ranks.RankName DESC
END
GO
PRINT N'Creating [dbo].[spGetEmployeeQualificationsByEmployeeCodeID]...';


GO
CREATE PROCEDURE [dbo].[spGetEmployeeQualificationsByEmployeeCodeID]-- 22915
(
	@EmployeeCodeID int
)
AS
BEGIN	
	

	SELECT  EQ.EmployeeQualificationID,			
			QD.QualificationDegreeName,
			Q.QualificationName,
		    GS.GeneralSpecializationName,
		    ES.ExactSpecializationName,
			QT.QualificationTypeName,
			mic_db.dbo.fn_GregToUmAlqura(EQ.GraduationDate) AS GraduationDate,
			EQ.GraduationYear
			
	FROM EmployeesQualifications EQ
	INNER JOIN QualificationsDegrees QD ON  QD.QualificationDegreeID = EQ.QualificationDegreeID 
	INNER JOIN Qualifications Q ON Q.QualificationID = EQ.QualificationID	
	INNER JOIN GeneralSpecializations GS  ON GS.GeneralSpecializationID = EQ.GeneralSpecializationID
	LEFT JOIN ExactSpecializations  ES ON ES.ExactSpecializationID = EQ.ExactSpecializationID
	LEFT JOIN QualificationsTypes  QT ON QT.QualificationTypeID = EQ.QualificationTypeID
	WHERE EmployeeCodeID = @EmployeeCodeID
	ORDER BY EQ.EmployeeQualificationID
	
END
GO
PRINT N'Creating [dbo].[spGetPromotionPeriodByPromotionPeriodID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPromotionPeriodByPromotionPeriodID]
(
@PromotionPeriodID  int
)
AS
BEGIN
	SELECT TOP(1) mic_db.dbo.fn_GregToUmAlqura(PromotionsPeriods.PromotionStartDate) AS  PromotionStartDateUmAlqura, 
	mic_db.dbo.fn_GregToUmAlqura(PromotionsPeriods.PromotionEndDate) AS  PromotionEndDateUmAlqura,
	MaturityYearsBalances.MaturityYear, 
	Periods.PeriodName 
	FROM PromotionsPeriods
	INNER JOIN Periods ON PromotionsPeriods.PeriodID = Periods.PeriodID
	INNER JOIN MaturityYearsBalances ON PromotionsPeriods.YearID = MaturityYearsBalances.MaturityYearID
	--WHERE IsActive = 1
	WHERE PromotionPeriodID=@PromotionPeriodID
	ORDER BY PromotionsPeriods.YearID DESC
END
GO
PRINT N'Creating [dbo].[spGetEmployeeDetailsByEndOfServiceID]...';


GO

CREATE PROCEDURE [dbo].[spGetEmployeeDetailsByEndOfServiceID]
(
	@EndOfServiceID int
)
AS
BEGIN

	SELECT EC.EmployeeCodeNo, EC.EmployeeIDNo, EC.EmployeeNameAr, 
		OS.OrganizationCode, OS.OrganizationName, dbo.Ranks.RankName, dbo.Jobs.JobName, 
		dbo.OrganizationsJobs.JobNo, EC.EmployeeCodeID, ECH.EmployeeCareerHistoryID,
		(SELECT ECH1.JoinDate FROM dbo.EmployeesCareersHistory ECH1 WHERE ECH1.EmployeeCodeID=EC.EmployeeCodeID AND ECH1.CareerHistoryTypeID=1) as JoiningDate,
		(SELECT TOP 1 BasicSalary FROM BasicSalaries BS WHERE BS.CareerDegreeID=ECH.CareerDegreeID AND BS.RankID=OrganizationsJobs.RankID) as BasicSalary,
		EOS.EndOfServiceID,
		EOS.EndOfServiceDate,
		EOS.EndOfServiceDecisionNo,
		EOS.EndOfServiceDecisionDate,
		r.EndOfServiceReasonID,
		r.EndOfServiceReason,
		c.EndOfServiceCaseID,
		c.EndOfServiceCase
	FROM dbo.OrganizationsJobs 
		INNER JOIN dbo.EmployeesCareersHistory ECH ON dbo.OrganizationsJobs.OrganizationJobID = ECH.OrganizationJobID 
		INNER JOIN dbo.OrganizationsStructures OS ON dbo.OrganizationsJobs.OrganizationID = OS.OrganizationID 
		INNER JOIN dbo.Ranks ON dbo.OrganizationsJobs.RankID = dbo.Ranks.RankID 
		INNER JOIN dbo.vwEmployeesCodes EC ON ECH.EmployeeCodeID = EC.EmployeeCodeID 
		INNER JOIN dbo.Jobs ON dbo.OrganizationsJobs.JobID = dbo.Jobs.JobID
		INNER JOIN dbo.EndOfServices EOS ON EOS.EmployeeCareerHistoryID = ECH.EmployeeCareerHistoryID
		INNER JOIN dbo.EndOfServicesReasons r ON r.EndOfServiceReasonID = EOS.EndOfServiceReasonID
		INNER JOIN dbo.EndOfServicesCases c ON c.EndOfServiceCaseID = r.EndOfServiceCaseID
	WHERE EOS.EndOfServiceID = @EndOfServiceID	

END
GO
PRINT N'Creating [dbo].[spGetEmployeeCareerHistoryByEndOfServiceID]...';


GO

CREATE PROCEDURE [dbo].[spGetEmployeeCareerHistoryByEndOfServiceID]
(
	@EndOfServiceID int
)
AS
BEGIN

	DECLARE @EmployeeCareerHistoryID int, @EmployeeCodeID int
	SELECT @EmployeeCareerHistoryID = EmployeeCareerHistoryID FROM EndOfServices EOS WHERE EndOfServiceID = @EndOfServiceID
	SELECT @EmployeeCodeID = EmployeeCodeID FROM EmployeesCareersHistory WHERE EmployeeCareerHistoryID = @EmployeeCareerHistoryID
	
	SELECT EC.EmployeeCodeID, ECH.EmployeeCareerHistoryID, N'المؤسسة العامة للصناعات العسكرية' as OrganizationName,
		--OS.OrganizationCode, OS.OrganizationName, 
		dbo.Ranks.RankName, dbo.Jobs.JobName, dbo.OrganizationsJobs.JobNo, 
		CHT.CareerHistoryTypeID, CHT.CareerHistoryTypeName,
		ECH.JoinDate,
		BS.BasicSalary 
	FROM dbo.OrganizationsJobs 
	INNER JOIN dbo.EmployeesCareersHistory ECH ON dbo.OrganizationsJobs.OrganizationJobID = ECH.OrganizationJobID 
	--INNER JOIN dbo.OrganizationsStructures OS ON dbo.OrganizationsJobs.OrganizationID = OS.OrganizationID 
	INNER JOIN dbo.Ranks ON dbo.OrganizationsJobs.RankID = dbo.Ranks.RankID 
	INNER JOIN dbo.vwEmployeesCodes EC ON ECH.EmployeeCodeID = EC.EmployeeCodeID 
	INNER JOIN dbo.Jobs ON dbo.OrganizationsJobs.JobID = dbo.Jobs.JobID
	INNER JOIN dbo.CareersHistoryTypes CHT ON CHT.CareerHistoryTypeID = ECH.CareerHistoryTypeID
	LEFT OUTER JOIN dbo.BasicSalaries BS ON BS.CareerDegreeID = ECH.CareerDegreeID AND BS.RankID = ranks.RankID 
	WHERE EC.EmployeeCodeID = @EmployeeCodeID
	ORDER BY ECH.JoinDate
	
END
GO
PRINT N'Creating [dbo].[spGetEmployeeByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetEmployeeByEmployeeCodeID]
(
	@EmployeeCodeID int
)
AS
BEGIN
	SELECT *
	FROM vwEmployeesCodes
	WHERE EmployeeCodeID = @EmployeeCodeID
END
GO
PRINT N'Creating [dbo].[spGetEmployeeAllowancesByEndOfServiceID]...';


GO

CREATE PROCEDURE [dbo].[spGetEmployeeAllowancesByEndOfServiceID]
(
	@EndOfServiceID int
)
AS
BEGIN

	DECLARE @EmployeeCareerHistoryID int

	SELECT @EmployeeCareerHistoryID = EmployeeCareerHistoryID FROM EndOfServices EOS WHERE EndOfServiceID = @EndOfServiceID
	
	SELECT aat.AllowanceAmountTypeName, a.AllowanceName, SUM(a.AllowanceAmount) as TotalAllowanceAmount
	FROM EmployeesAllowances EA 
		INNER JOIN Allowances a ON a.AllowanceID = EA.AllowanceID
		INNER JOIN AllowancesAmountTypes aat ON aat.AllowanceAmountTypeID = a.AllowanceAmountTypeID
	WHERE EA.EmployeeCareerHistoryID = @EmployeeCareerHistoryID 
	GROUP BY aat.AllowanceAmountTypeName, a.AllowanceName 
	
END
GO
PRINT N'Creating [dbo].[spGetDeservedEmployeesToBeIncludedPromotion]...';


GO

CREATE PROCEDURE [dbo].[spGetDeservedEmployeesToBeIncludedPromotion]
(
	 @RankID int = 9,
	 @JobCategoryID int = 72,--78,
	 @PromotionPeriodID int = 1
)
AS
BEGIN

	--DECLARE @RankID int = 9
	--DECLARE @JobCategoryID int = 72--78
	--DECLARE @PromotionPeriodID int = 1
	
	
	DECLARE @PreviousRank int = 0
	DECLARE @TempTable TABLE(EmployeeCareerHistoryID int,
							EmployeeCodeID int, 
							EmployeeCodeNo nvarchar(15),
							EmployeeIDNo nvarchar(11), 
							EmployeeNameAr nvarchar(500), 
							JobCategoryID int,
							JobCategoryName nvarchar(100),
							JobCode nvarchar(100),
							JobName nvarchar(100),
							JobNo nvarchar(100),
							JoinDate date,
							OrganizationCode nvarchar(100),
							OrganizationName nvarchar(100),
							PromotionCandidateAddedWayID int,
							PromotionCandidateAddedWayName nvarchar(100),
							RankID int,
							RankName nvarchar(200))
							
	SELECT @PreviousRank = RankID 
	FROM Ranks 
	WHERE Ranks.NextRankID = @RankID
	
	-- By Current Job
	INSERT INTO @TempTable
	SELECT EmployeeCareerHistoryID ,
			EmployeeCodeID , 
			EmployeeCodeNo , 
			EmployeeIDNo,
			EmployeeNameAr , 
			JobCategoryID ,
			JobCategoryName ,
			JobCode ,
			JobName ,
			JobNo ,
			JoinDate ,
			OrganizationCode ,
			OrganizationName ,
			1 AS PromotionCandidateAddedWayID ,
			 (SELECT PromotionCandidateAddedWayName FROM PromotionsCandidatesAddedWays WHERE PromotionCandidateAddedWayID = 1) AS PromotionCandidateAddedWayName,
			RankID ,
			RankName 
	FROM vwEmployeesCareersHistory
	WHERE IsCurrentJob = 1
	AND RankID = @RankID
	AND JobCategoryID = @JobCategoryID
	
	-- By Previous Job
	INSERT INTO @TempTable
	SELECT EmployeeCareerHistoryID ,
			vwEmployeesCareersHistory.EmployeeCodeID , 
			EmployeeCodeNo , 
			EmployeeIDNo,
			EmployeeNameAr , 
			JobCategoryID ,
			JobCategoryName ,
			JobCode ,
			JobName ,
			JobNo ,
			JoinDate ,
			OrganizationCode ,
			OrganizationName ,
			2 AS PromotionCandidateAddedWayID ,
			 (SELECT PromotionCandidateAddedWayName FROM PromotionsCandidatesAddedWays WHERE PromotionCandidateAddedWayID = 2) AS PromotionCandidateAddedWayName,
			RankID ,
			RankName 
	FROM vwEmployeesCareersHistory
	INNER JOIN (SELECT EmployeeCodeID	
				FROM vwEmployeesCareersHistory 
				WHERE RankID = @PreviousRank
				AND JobCategoryID = @JobCategoryID
				AND EmployeeCodeID IN (SELECT EmployeeCodeID
									   FROM vwEmployeesCareersHistory
									   WHERE IsCurrentJob = 1
										AND RankID = @RankID)
			    AND EmployeeCodeID NOT IN (SELECT EmployeeCodeID 
										   FROM @TempTable)) AS PreviousJob ON PreviousJob.EmployeeCodeID = vwEmployeesCareersHistory.EmployeeCodeID
	WHERE IsCurrentJob = 1
	AND RankID = @RankID


	-- By Job Category
	INSERT INTO @TempTable
	SELECT DISTINCT EmployeeCareerHistoryID ,
			vwEmployeesCareersHistory.EmployeeCodeID , 
			EmployeeCodeNo , 
			EmployeeIDNo,
			EmployeeNameAr , 
			JobCategoryID ,
			JobCategoryName ,
			JobCode ,
			JobName ,
			JobNo ,
			JoinDate ,
			OrganizationCode ,
			OrganizationName ,
			3 AS PromotionCandidateAddedWayID ,
			 (SELECT PromotionCandidateAddedWayName FROM PromotionsCandidatesAddedWays WHERE PromotionCandidateAddedWayID = 3) AS PromotionCandidateAddedWayName,
			RankID ,
			RankName 
	FROM vwEmployeesCareersHistory 
	INNER JOIN vwEmployeesQualifications ON vwEmployeesCareersHistory.EmployeeCodeID = vwEmployeesQualifications.EmployeeCodeID
	WHERE IsCurrentJob = 1
	AND RankID = @RankID
	AND JobCategoryID IN (SELECT AssignedJobCategoryID 
						 FROM PromotionsJobsCategories 
						 WHERE JobCategoryID = @JobCategoryID)
   AND vwEmployeesCareersHistory.EmployeeCodeID NOT IN (SELECT EmployeeCodeID FROM @TempTable)
	
   IF(@RankID <= 6)
	BEGIN
		-- By Qualification
		INSERT INTO @TempTable
		SELECT DISTINCT EmployeeCareerHistoryID ,
			vwEmployeesCareersHistory.EmployeeCodeID , 
			EmployeeCodeNo , 
			EmployeeIDNo,
			EmployeeNameAr , 
			JobCategoryID ,
			JobCategoryName ,
			JobCode ,
			JobName ,
			JobNo ,
			JoinDate ,
			OrganizationCode ,
			OrganizationName ,
			4 AS PromotionCandidateAddedWayID ,
			 (SELECT PromotionCandidateAddedWayName FROM PromotionsCandidatesAddedWays WHERE PromotionCandidateAddedWayID = 4) AS PromotionCandidateAddedWayName,
			RankID ,
			RankName 
		FROM vwEmployeesCareersHistory 
		INNER JOIN vwEmployeesQualifications ON vwEmployeesCareersHistory.EmployeeCodeID = vwEmployeesQualifications.EmployeeCodeID
		WHERE IsCurrentJob = 1
		AND RankID = @RankID
		AND vwEmployeesCareersHistory.EmployeeCodeID NOT IN (SELECT EmployeeCodeID FROM @TempTable)
	END
	
   SELECT * , 
		[dbo].[GetHiringDateByEmployeeCodeID](F.EmployeeCodeID) AS HiringDate
	FROM @TempTable AS F
	WHERE F.EmployeeCareerHistoryID NOT IN (SELECT CurrentEmployeeCareerHistoryID
										  FROM PromotionsRecords
										  INNER JOIN PromotionsRecordsEmployees ON PromotionsRecords.PromotionRecordID = PromotionsRecordsEmployees.PromotionRecordID
										  WHERE PromotionPeriodID = @PromotionPeriodID
										  AND PromotionsRecordsEmployees.PromotionRecordJobVacancyID IS NOT NULL)
    ORDER BY EmployeeCodeID
	

		------INSERT INTO @TempTable
	------SELECT (SELECT EmployeeCareerHistoryID FROM vwCurrentEmployeesCareer WHERE EmployeeCodeID = vwEmployeesCareersHistory.EmployeeCodeID),
	------		EmployeeCodeID , 
	------		EmployeeCodeNo , 
	------		EmployeeIDNo,
	------		EmployeeNameAr , 
	------		JobCategoryID ,
	------		JobCategoryName ,
	------		JobCode ,
	------		JobName ,
	------		JobNo ,
	------		JoinDate ,
	------		OrganizationCode ,
	------		OrganizationName ,
	------		2 AS PromotionCandidateAddedWayID ,
	------		 (SELECT PromotionCandidateAddedWayName FROM PromotionsCandidatesAddedWays WHERE PromotionCandidateAddedWayID = 2) AS PromotionCandidateAddedWayName,
	------		RankID ,
	------		RankName 
	------FROM vwEmployeesCareersHistory 
	------WHERE RankID = @PreviousRank
	------AND JobCategoryID = @JobCategoryID
	------AND EmployeeCodeID IN (SELECT EmployeeCodeID
	------						FROM vwEmployeesCareersHistory
	------						WHERE IsCurrentJob = 1
	------						AND RankID = @RankID)
	------  AND EmployeeCodeID NOT IN (SELECT EmployeeCodeID FROM @TempTable)
	
	
	-- it should be distinct because of may be some candidates will repeat if he has more than one qualification
	--SELECT DISTINCT vwEmployeesCareersHistory.*,
	--	[dbo].[GetHiringDateByEmployeeCodeID](vwEmployeesCareersHistory.EmployeeCodeID) AS HiringDate,
	--	'1' AS PromotionCandidateAddedWayID ,(select PromotionCandidateAddedWayName from PromotionsCandidatesAddedWays where PromotionCandidateAddedWayID = 1) as PromotionCandidateAddedWayName
	--FROM vwEmployeesCareersHistory
	--LEFT JOIN vwEmployeesQualifications ON vwEmployeesCareersHistory.EmployeeCodeID = vwEmployeesQualifications.EmployeeCodeID
	--WHERE vwEmployeesCareersHistory.RANKID = @RankID
	--AND vwEmployeesCareersHistory.IsActive = 1
	--AND vwEmployeesCareersHistory.IsCurrentJob = 1
	---- EXCLUDING EMPLOYEES THAT ALREADY RESERVED NEW JOB VACANCY IN THE SAME PROMOTION PERIOD
	--AND vwEmployeesCareersHistory.EmployeeCareerHistoryID NOT IN(SELECT CurrentEmployeeCareerHistoryID
	--															FROM PromotionsRecords
	--															INNER JOIN PromotionsRecordsEmployees ON PromotionsRecords.PromotionRecordID = PromotionsRecordsEmployees.PromotionRecordID
	--															WHERE PromotionPeriodID = @PromotionPeriodID
	--															AND PromotionsRecordsEmployees.PromotionRecordJobVacancyID IS NOT NULL) -- thats mean already the candidate reserved new job vancancy ... no need to fetch him again in other promotion record
	--AND (JOBCATEGORYID = @JobCategoryID OR JOBCATEGORYID IN (SELECT AssignedJobCategoryID 
	--														 FROM PromotionsJobsCategories 
	--														 WHERE JobCategoryID = @JobCategoryID))												  

	--UNION 
	
	--SELECT DISTINCT vwEmployeesCareersHistory.*,
	--	[dbo].[GetHiringDateByEmployeeCodeID](vwEmployeesCareersHistory.EmployeeCodeID) AS HiringDate,
	--	'2' AS PromotionCandidateAddedWayID ,(select PromotionCandidateAddedWayName from PromotionsCandidatesAddedWays where PromotionCandidateAddedWayID = 2) as PromotionCandidateAddedWayName
	--FROM vwEmployeesCareersHistory
	--LEFT JOIN vwEmployeesQualifications ON vwEmployeesCareersHistory.EmployeeCodeID = vwEmployeesQualifications.EmployeeCodeID
	----CROSS APPLY DBO.fnGetLastEmployeeQualificationByEmployeeCodeID(vwEmployeesCareersHistory.EmployeeCodeID) as LastEmployeeQualification
	--WHERE vwEmployeesCareersHistory.RANKID = @RankID
	--AND vwEmployeesCareersHistory.IsActive = 1
	--AND vwEmployeesCareersHistory.IsCurrentJob = 1
	---- EXCLUDING EMPLOYEES THAT ALREADY RESERVED NEW JOB VACANCY IN THE SAME PROMOTION PERIOD
	--AND vwEmployeesCareersHistory.EmployeeCareerHistoryID NOT IN(SELECT CurrentEmployeeCareerHistoryID
	--															FROM PromotionsRecords
	--															INNER JOIN PromotionsRecordsEmployees ON PromotionsRecords.PromotionRecordID = PromotionsRecordsEmployees.PromotionRecordID
	--															WHERE PromotionPeriodID = @PromotionPeriodID
	--															AND PromotionsRecordsEmployees.PromotionRecordJobVacancyID IS NOT NULL) -- thats mean already the candidate reserved new job vancancy ... no need to fetch him again in other promotion record
	--AND (vwEmployeesQualifications.QualificationDegreeID IN (SELECT QualificationDegreeID 
	--														 FROM JobsCategoriesQualifications 
	--														 WHERE JobsCategoriesQualifications.JobCategoryID = @JobCategoryID
	--														 AND PromotionPeriodID = @PromotionPeriodID) 
															 
	--														 and 
	--vwEmployeesQualifications.QualificationID IN (SELECT ISNULL(JobsCategoriesQualifications.QualificationID ,vwEmployeesQualifications.QualificationID)
	--											  FROM JobsCategoriesQualifications 
	--											  WHERE JobsCategoriesQualifications.JobCategoryID = @JobCategoryID
	--											  AND JobsCategoriesQualifications.QualificationDegreeID = vwEmployeesQualifications.QualificationDegreeID
	--											  AND PromotionPeriodID = @PromotionPeriodID) 
												  
	--											  and
	--vwEmployeesQualifications.GeneralSpecializationID IN (SELECT ISNULL(GeneralSpecializationID ,vwEmployeesQualifications.GeneralSpecializationID)
	--													  FROM JobsCategoriesQualifications 
	--													  WHERE JobsCategoriesQualifications.JobCategoryID = @JobCategoryID
	--													  AND JobsCategoriesQualifications.QualificationDegreeID = vwEmployeesQualifications.QualificationDegreeID
	--													  --AND JobsCategoriesQualifications.QualificationID = vwEmployeesQualifications.QualificationID
	--													  AND PromotionPeriodID = @PromotionPeriodID))	
														  
	--AND NOT EXISTS (SELECT D.EmployeeCodeID
	--														FROM vwEmployeesCareersHistory AS D
	--														LEFT JOIN vwEmployeesQualifications ON D.EmployeeCodeID = vwEmployeesQualifications.EmployeeCodeID
	--														WHERE D.RANKID = @RankID
	--														AND D.EmployeeCodeID = vwEmployeesCareersHistory.EmployeeCodeID 
	--														AND D.IsActive = 1
	--														AND D.IsCurrentJob = 1
	--														-- EXCLUDING EMPLOYEES THAT ALREADY RESERVED NEW JOB VACANCY IN THE SAME PROMOTION PERIOD
	--														AND D.EmployeeCareerHistoryID NOT IN(SELECT CurrentEmployeeCareerHistoryID
	--																													FROM PromotionsRecords
	--																													INNER JOIN PromotionsRecordsEmployees ON PromotionsRecords.PromotionRecordID = PromotionsRecordsEmployees.PromotionRecordID
	--																													WHERE PromotionPeriodID = @PromotionPeriodID
	--																													AND PromotionsRecordsEmployees.PromotionRecordJobVacancyID IS NOT NULL) -- thats mean already the candidate reserved new job vancancy ... no need to fetch him again in other promotion record
	--														AND (JOBCATEGORYID = @JobCategoryID OR JOBCATEGORYID IN (SELECT AssignedJobCategoryID 
	--																												 FROM PromotionsJobsCategories 
	--																												 WHERE JobCategoryID = @JobCategoryID))		)

														  
	--ORDER BY EmployeeCodeNo
--END

END
GO
PRINT N'Creating [dbo].[spGetDelegationDetailsByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetDelegationDetailsByEmployeeCodeID]-- 22915
(
	@EmployeeCodeID int
)
AS
BEGIN

	SELECT Delegations.*,
			vwEmployeesCodes.EmployeeCodeNo, 
			vwEmployeesCodes.EmployeeCodeID,
			vwEmployeesCodes.EmployeeIDNo, 
			vwEmployeesCodes.EmployeeNameAr,
			DelegationsKinds.DelegationKindName,
			DelegationsTypes.DelegationTypeName,
			dbo.fnGetPeriodBetweenTwoDates(Delegations.DelegationStartDate , Delegations.DelegationEndDate) AS DelegationPeriod,
			dbo.[fnGetPreviousConsumedDelegationByEmployeeCodeID](Delegations.DelegationID,vwEmployeesCodes.EmployeeCodeID,YEAR(Delegations.DelegationStartDate)) AS PreviousConsumedDelegation
	FROM Delegations
	INNER JOIN DelegationsDetails ON Delegations.DelegationID = DelegationsDetails.DelegationID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = DelegationsDetails.EmployeeCareerHistoryID
	INNER JOIN DelegationsKinds ON Delegations.DelegationKindID = DelegationsKinds.DelegationKindID
	INNER JOIN DelegationsTypes ON Delegations.DelegationTypeID = DelegationsTypes.DelegationTypeID
	INNER JOIN vwEmployeesCodes ON EmployeesCareersHistory.EmployeeCodeID = vwEmployeesCodes.EmployeeCodeID
	WHERE vwEmployeesCodes.EmployeeCodeID = @EmployeeCodeID
	ORDER BY DelegationStartDate
	
END
GO
PRINT N'Creating [dbo].[spGetDelegationDetailsByDelegationID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetDelegationDetailsByDelegationID] --93
(
	@DelegationID int
)
AS
BEGIN

	SELECT Delegations.DelegationID, 
			vwEmployeesCodes.EmployeeCodeNo, 
			vwEmployeesCodes.EmployeeCodeID,
			vwEmployeesCodes.EmployeeIDNo, 
			vwEmployeesCodes.EmployeeNameAr,
			dbo.[fnGetPreviousConsumedDelegationByEmployeeCodeID](Delegations.DelegationID,vwEmployeesCodes.EmployeeCodeID,
			DATEPART(YEAR,Delegations.DelegationStartDate)) AS PreviousConsumedDelegation,
			ranks.RankName
	FROM Delegations
	INNER JOIN DelegationsDetails ON Delegations.DelegationID = DelegationsDetails.DelegationID 
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = DelegationsDetails.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON EmployeesCareersHistory.EmployeeCodeID = vwEmployeesCodes.EmployeeCodeID
	INNER JOIN OrganizationsJobs ON OrganizationsJobs.OrganizationJobID = EmployeesCareersHistory.OrganizationJobID
	INNER JOIN Ranks ON Ranks.RankID = OrganizationsJobs.RankID
	WHERE Delegations.DelegationID = @DelegationID
	ORDER BY 	Ranks.RankName DESC
END
GO
PRINT N'Creating [dbo].[spGetDelegationByDelegationID]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetDelegationByDelegationID]
(
	@DelegationID int
)
AS
BEGIN

	SELECT Delegations.DelegationID,
		 Delegations.DelegationDistancePeriod,
		 Delegations.DelegationKindID, 
		 Delegations.DelegationTypeID, 
		 Delegations.DelegationStartDate, 
		 mic_db.dbo.fn_GregToUmAlqura(Delegations.DelegationStartDate) AS DelegationStartDateUmAlQura,
		 Delegations.DelegationEndDate, 
		 mic_db.dbo.fn_GregToUmAlqura(Delegations.DelegationEndDate) AS DelegationEndDateUmAlQura,
		 Delegations.DelegationReason,
		 Delegations.Notes,
		 Delegations.CountryID, 
		 Delegations.KSACityID, 
		 Delegations.IsActive, 
		 Delegations.CreatedDate, 
		 Delegations.LastUpdatedDate, 
		 DelegationsTypes.DelegationTypeName, 
		 DelegationsKinds.DelegationKindName, 
		 Countries.CountryName, 
		 KSARegions.KSARegionName, 
		 KSACities.KSACityName, 
		 dbo.fnGetPeriodBetweenTwoDates(Delegations.DelegationStartDate,Delegations.DelegationEndDate) AS DelegationPeriod
	FROM KSARegions 
		INNER JOIN KSACities ON KSARegions.KSARegionID = KSACities.KSARegionID 
		RIGHT OUTER JOIN Delegations 
		INNER JOIN DelegationsKinds ON Delegations.DelegationKindID = DelegationsKinds.DelegationKindID 
		INNER JOIN DelegationsTypes ON Delegations.DelegationTypeID = DelegationsTypes.DelegationTypeID ON KSACities.KSACityID = Delegations.KSACityID 
		LEFT OUTER JOIN Countries ON Delegations.CountryID = Countries.CountryID
	WHERE DelegationID = @DelegationID
	
END
GO
PRINT N'Creating [dbo].[spGetCurrentJobPeriodByEmployeeCodeID]...';


GO
--SELECT * FROM OrganizationsJobs
--INNER JOIN Jobs ON Jobs.JobID = OrganizationsJobs.JobID
--WHERE RankID = 9
--ORDER BY OrganizationsJobs.CreatedDate

CREATE PROCEDURE [dbo].[spGetCurrentJobPeriodByEmployeeCodeID]
(
	@EmployeeCodeID int = 22951
)
AS
BEGIN

	DECLARE @CurrentJobDate date
	DECLARE @PromotionEndDate date
	DECLARE @DaysCount int

	SELECT @PromotionEndDate = PromotionEndDate 
	FROM PromotionsPeriods
	WHERE IsActive = 1

	SELECT @CurrentJobDate = JoinDate 
	FROM vwCurrentEmployeesCareer 
	WHERE EmployeeCodeID = @EmployeeCodeID

	SELECT @DaysCount = DATEDIFF(DAY,@CurrentJobDate,@PromotionEndDate)

	SELECT @DaysCount AS TotalDays,
		dbo.fnGetYearsFromTotalDays(@DaysCount) Years,
		dbo.fnGetModMonthsFromTotalDays(@DaysCount) ModMonths,
		dbo.fnGetModDaysFromTotalDays(@DaysCount) ModDays
END
GO
PRINT N'Creating [dbo].[spGetCurrentCareerByEmployeeCodeID]...';


GO
CREATE PROCEDURE [dbo].[spGetCurrentCareerByEmployeeCodeID]
(
	@EmployeeCodeID INT
)
AS
BEGIN
SELECT [EmployeeCodeNo]
      ,[EmployeeIDNo]
      ,[EmployeeNameAr]
      ,[OrganizationCode]
      ,[OrganizationName]
      ,[RankName]
      ,[JobName]
      ,[JobNo]
      ,[EmployeeCodeID]
      ,[EmployeeCareerHistoryID]
      ,mic_db.dbo.fn_GregToUmAlqura(JoinDate) AS JoinDate
      ,mic_db.dbo.fn_GregToUmAlqura(dbo.GetHiringDateByEmployeeCodeID(@EmployeeCodeID)) AS HiringDate
  FROM vwCurrentEmployeesCareer
  WHERE EmployeeCodeID = @EmployeeCodeID
END
GO
PRINT N'Creating [dbo].[spGetCandidatesByPromotionRecordID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetCandidatesByPromotionRecordID]
(
	@PromotionRecordID int	= 284
)
AS
BEGIN
	SELECT  vwEmployeesCareersHistory.EmployeeCodeNo,
			vwEmployeesCareersHistory.EmployeeNameAr,
			vwEmployeesCareersHistory.JobNo AS CurrentJobNo,
			vwEmployeesCareersHistory.JobCode AS CurrentJobCode,
			vwEmployeesCareersHistory.JobName AS CurrentJobName,
			MIC_DB.dbo.fn_GregToUmAlqura(JoinDate) AS CurrentJoinDate,
			vwEmployeesCareersHistory.RankName AS CurrentRankName,
			vwOrganizationsJobs.JobNo AS NewJobNo,
			vwOrganizationsJobs.OrganizationName AS NewOrganizationName,
			vwOrganizationsJobs.JobName AS NewJobName,
			vwOrganizationsJobs.JobCode AS NewJobCode,
			vwOrganizationsJobs.RankName AS NewRankName,
			vwOrganizationsJobs.JobCategoryName AS NewJobCategoryName,
			QualificationsDegrees.QualificationDegreeName,
			Qualifications.QualificationName,
			GeneralSpecializations.GeneralSpecializationName,
			dbo.fnGetYearsFromTotalDays(PromotionsRecordsEmployees.OnGoingServiceDaysCount) OnGoingServiceYears,
			dbo.fnGetModMonthsFromTotalDays(PromotionsRecordsEmployees.OnGoingServiceDaysCount) OnGoingServiceMonths,
			dbo.fnGetModDaysFromTotalDays(PromotionsRecordsEmployees.OnGoingServiceDaysCount) OnGoingServiceDays,
			dbo.fnGetYearsFromTotalDays(PromotionsRecordsEmployees.PriorServiceDaysCount) PriorServiceYears,
			dbo.fnGetModMonthsFromTotalDays(PromotionsRecordsEmployees.PriorServiceDaysCount) PriorServiceMonths,
			dbo.fnGetModDaysFromTotalDays(PromotionsRecordsEmployees.PriorServiceDaysCount) PriorServiceDays,
			PromotionsRecordsEmployees.EducationPoints,
			PromotionsRecordsEmployees.EvaluationPoints,
			PromotionsRecordsEmployees.SeniorityPoints,
			PromotionsRecordsEmployees.IsRemovedAfterIncluding,
			PromotionsDecisions.PromotionDecisionName
	FROM PromotionsRecordsEmployees
	INNER JOIN vwEmployeesCareersHistory ON vwEmployeesCareersHistory.EmployeeCareerHistoryID = PromotionsRecordsEmployees.CurrentEmployeeCareerHistoryID
	LEFT JOIN PromotionsDecisions ON PromotionsRecordsEmployees.PromotionDecisionID = PromotionsDecisions.PromotionDecisionID
	LEFT JOIN PromotionsRecordsJobsVacancies ON PromotionsRecordsEmployees.PromotionRecordJobVacancyID = PromotionsRecordsJobsVacancies.PromotionRecordJobVacancyID
	LEFT JOIN vwOrganizationsJobs ON PromotionsRecordsJobsVacancies.OrganizationJobID = vwOrganizationsJobs.OrganizationJobID
	LEFT JOIN QualificationsDegrees ON PromotionsRecordsEmployees.LastQualificationDegreeID = QualificationsDegrees.QualificationDegreeID
	LEFT JOIN Qualifications ON PromotionsRecordsEmployees.LastQualificationID = Qualifications.QualificationID
	LEFT JOIN GeneralSpecializations ON PromotionsRecordsEmployees.LastGeneralSpecializationID = GeneralSpecializations.GeneralSpecializationID
	WHERE PromotionsRecordsEmployees.PromotionRecordID = @PromotionRecordID
	AND PromotionsRecordsEmployees.IsIncluded = 1
	AND ISNULL(PromotionsRecordsEmployees.IsRemovedAfterIncluding, 0) = 0
	ORDER BY ISNULL(PromotionsRecordsEmployees.PromotionDecisionID,500),
	(PromotionsRecordsEmployees.EducationPoints +
			PromotionsRecordsEmployees.EvaluationPoints +
			PromotionsRecordsEmployees.SeniorityPoints) DESC
	--AND PromotionsRecordsEmployees.IsRemovedAfterIncluding = 0
END
GO
PRINT N'Creating [dbo].[spGetScholarshipByID]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetScholarshipByID]
(
	@ScholarshipID int
)
AS
BEGIN

	SELECT Scholarships.ScholarshipID, 
		Scholarships.EmployeeCodeID, 
		Scholarships.ScholarshipTypeID,
		KSACities.KSACityName, 
		Countries.CountryName, 
	    Scholarships.Location, 
	    Scholarships.ScholarshipStartDate,
	    Scholarships.ScholarshipEndDate,
	    mic_db.dbo.fn_GregToUmAlqura(Scholarships.ScholarshipStartDate) AS ScholarshipStartDateUmAlQura,
	    mic_db.dbo.fn_GregToUmAlqura(Scholarships.ScholarshipEndDate) AS ScholarshipEndDateUmAlQura,
	  Scholarships.QualificationID, 
	  Scholarships.CreatedDate, 
	  Scholarships.LastUpdatedDate, 
     ScholarshipsTypes.ScholarshipType, 
	  dbo.[fnGetCurrentQualification](Scholarships.EmployeeCodeID) AS CurrentQualification, 
	  QualificationsDegrees.QualificationDegreeName, 
	  Qualifications.QualificationName,
	  Scholarships.ScholarshipReason,
	   dbo.fnGetPeriodBetweenTwoDates(Scholarships.ScholarshipStartDate,Scholarships.ScholarshipEndDate) AS Period
	FROM QualificationsDegrees 
		INNER JOIN Qualifications ON QualificationsDegrees.QualificationDegreeID = Qualifications.QualificationDegreeID 
		RIGHT OUTER JOIN Scholarships 
		INNER JOIN ScholarshipsTypes ON Scholarships.ScholarshipTypeID = ScholarshipsTypes.ScholarshipTypeID ON  Qualifications.QualificationID = Scholarships.QualificationID
		LEFT JOIN KSACities on KSACities.KSACityID=Scholarships.KSACityID
		LEFT JOIN Countries on Countries.CountryID=Scholarships.CountryID
	WHERE ScholarshipID = @ScholarshipID

END
GO
PRINT N'Creating [dbo].[spGetQualificationsByPromotionRecordID]...';


GO
CREATE PROCEDURE [dbo].[spGetQualificationsByPromotionRecordID]
(
	@PromotionRecordID int	
)
AS
BEGIN
	SELECT  QualificationsDegrees.QualificationDegreeName,
			Qualifications.QualificationName,
			GeneralSpecializations.GeneralSpecializationName,
			PromotionsRecordsQualificationsKinds.PromotionRecordQualificationKindName,
			PromotionsRecordsQualificationsPoints.Points
	FROM PromotionsRecordsQualificationsPoints
	LEFT JOIN QualificationsDegrees ON PromotionsRecordsQualificationsPoints.QualificationDegreeID = QualificationsDegrees.QualificationDegreeID
	LEFT JOIN Qualifications ON PromotionsRecordsQualificationsPoints.QualificationID = Qualifications.QualificationID
	LEFT JOIN GeneralSpecializations ON PromotionsRecordsQualificationsPoints.GeneralSpecializationID = GeneralSpecializations.GeneralSpecializationID
	LEFT JOIN PromotionsRecordsQualificationsKinds ON PromotionsRecordsQualificationsKinds.PromotionRecordQualificationKindID = PromotionsRecordsQualificationsPoints.PromotionRecordQualificationKindID
	WHERE PromotionRecordID = @PromotionRecordID
	ORDER BY QualificationsDegrees.[Weight] DESC,
			Qualifications.QualificationName
END
GO
PRINT N'Creating [dbo].[spGetQualificationByEmployeeCodeID]...';


GO
CREATE PROCEDURE [dbo].[spGetQualificationByEmployeeCodeID]
(
	@EmployeeCodeID int
)
AS
BEGIN
	SELECT EmployeesQualifications.EmployeeCodeID, 
			QualificationsDegrees.QualificationDegreeName,
			Qualifications.QualificationName,
			GeneralSpecializations.GeneralSpecializationName 
	FROM EmployeesQualifications  
	LEFT JOIN QualificationsDegrees ON EmployeesQualifications.QualificationDegreeID = QualificationsDegrees.QualificationDegreeID
	LEFT JOIN Qualifications ON EmployeesQualifications.QualificationID = Qualifications.QualificationID
	LEFT JOIN GeneralSpecializations ON EmployeesQualifications.GeneralSpecializationID = GeneralSpecializations.GeneralSpecializationID
	WHERE EmployeesQualifications.EmployeeCodeID = @EmployeeCodeID
END
GO
PRINT N'Creating [dbo].[spGetPromotionsDecisions]...';


GO
--#####################################################################
/*
	PROMOTIONS DECISIONS 
*/

CREATE PROC [dbo].[spGetPromotionsDecisions]
(
	@PromotionRecordID INT,
	@CurrentEmployeeCareerHistoryID INT=NULL
)
AS
SELECT	PR.PromotionRecordID,
		PR.PromotionRecordNo,
		PR.PromotionRecordDate,
		mic_db.dbo.fn_GregToUmAlqura(PR.PromotionRecordDate) AS PromotionRecordDateUmAlQura, 
		ISNULL(PRE.IsDeserveExtraBonus,0) AS IsDeserveExtraBonus,
		EmpCurrent.FirstNameAr +' '	+ EmpCurrent.MiddleNameAr + ' '+ EmpCurrent.GrandFatherNameAr +' '+ EmpCurrent.LastNameAr AS EmployeeNameAr,
		EmpCurrent.EmployeeIDNo,
		EmpCodCurrent.EmployeeCodeNo,
		mic_db.dbo.fn_GregToUmAlqura(dbo.GetHiringDateByEmployeeCodeID(EmpCodCurrent.EmployeeCodeID)) AS HiringDateUmAlqura,	

		EmpCHCurrent.EmployeeCareerHistoryID AS CurrentEmployeeCareerHistoryID,
		JobCurrent.JobName AS CurrentJobName,
		RnkCurrent.RankName AS CurrentRankName,
		OrgJobCurrent.JobNo AS CurrentJobNo,
		OrgCurrent.OrganizationName AS CurrentOrganizationName,
		CDCurrent.CareerDegreeName AS CurrentCareerDegreeName ,
		(SELECT BS.BasicSalary FROM BasicSalaries BS WHERE BS.CareerDegreeID=EmpCHCurrent.CareerDegreeID AND BS.RankID=RnkCurrent.RankID)  AS CurrentBasicSalary,



		EmpCHNew.EmployeeCareerHistoryID AS NewEmployeeCareerHistoryID,
		JobNew.JobName AS NewJobName,
		RnkNew.RankName AS NewRankName,
		OrgJobNew.JobNo AS NewJobNo,
		OrgNew.OrganizationName AS NewOrganizationName,
		CDNew.CareerDegreeName AS NewCareerDegreeName,
		(SELECT BS.BasicSalary FROM BasicSalaries BS WHERE BS.CareerDegreeID=EmpCHNew.CareerDegreeID AND BS.RankID=RnkNew.RankID)  AS NewBasicSalary
	
	FROM PromotionsRecords PR
		INNER JOIN PromotionsRecordsEmployees PRE ON PR.PromotionRecordID=PRE.PromotionRecordID
		--======================   CURRENT JOB  =======================
		INNER JOIN EmployeesCareersHistory EmpCHCurrent ON EmpCHCurrent.EmployeeCareerHistoryID=PRE.CurrentEmployeeCareerHistoryID
		INNER JOIN EmployeesCodes EmpCodCurrent ON EmpCodCurrent.EmployeeCodeID=EmpCHCurrent.EmployeeCodeID
		INNER JOIN Employees EmpCurrent ON EmpCurrent.EmployeeID=EmpCodCurrent.EmployeeID
		INNER JOIN OrganizationsJobs OrgJobCurrent ON OrgJobCurrent.OrganizationJobID=EmpCHCurrent.OrganizationJobID
		INNER JOIN Jobs JobCurrent ON JobCurrent.JobID=OrgJobCurrent.JobID
		INNER JOIN OrganizationsStructures OrgCurrent ON OrgCurrent.OrganizationID=OrgJobCurrent.OrganizationID
		INNER JOIN Ranks RnkCurrent ON RnkCurrent.RankID=OrgJobCurrent.RankID
		INNER JOIN CareersDegrees CDCurrent on CDCurrent.CareerDegreeID=EmpCHCurrent.CareerDegreeID
		--======================   NEW JOB  =======================
		LEFT OUTER JOIN EmployeesCareersHistory EmpCHNew ON EmpCHNew.EmployeeCareerHistoryID=PRE.NewEmployeeCareerHistoryID
		LEFT OUTER JOIN EmployeesCodes EmpCodNew ON EmpCodNew.EmployeeCodeID=EmpCHNew.EmployeeCodeID
		LEFT OUTER JOIN OrganizationsJobs OrgJobNew ON OrgJobNew.OrganizationJobID=EmpCHNew.OrganizationJobID
		LEFT OUTER JOIN Jobs JobNew ON JobNew.JobID=OrgJobNew.JobID
		LEFT OUTER JOIN OrganizationsStructures OrgNew ON OrgNew.OrganizationID=OrgJobNew.OrganizationID
		LEFT OUTER JOIN Ranks RnkNew ON RnkNew.RankID=OrgJobNew.RankID
		LEFT OUTER JOIN CareersDegrees CDNew on CDNew.CareerDegreeID=EmpCHNew.CareerDegreeID
	WHERE PR.PromotionRecordID=@PromotionRecordID
		AND EmpCHCurrent.EmployeeCareerHistoryID=ISNULL(@CurrentEmployeeCareerHistoryID,EmpCHCurrent.EmployeeCareerHistoryID)
		AND PRE.IsIncluded=1
		AND (PRE.IsRemovedAfterIncluding=0 OR PRE.IsRemovedAfterIncluding IS NULL)
		AND PRE.NewEmployeeCareerHistoryID is not NULL
GO
PRINT N'Creating [dbo].[spGetPromotionRecordsCount]...';


GO
CREATE PROCEDURE [dbo].[spGetPromotionRecordsCount] 
	@PromotionPeriodID int 
AS
BEGIN
	
	SELECT RankName,
	dbo.fnGetPromotionRecordCountByPromotionPeriodID(@PromotionPeriodID,PromotionsRecords.RankID) AS PromotionRecordCount,
	dbo.fnGetCandidatesAlreadyPromotedCountByPromotionPeriodID(@PromotionPeriodID,PromotionsRecords.RankID) AS CandidatesAlreadyPromoted
	FROM PromotionsRecordsEmployees
	INNER JOIN PromotionsRecords on PromotionsRecords.PromotionRecordID=PromotionsRecordsEmployees.PromotionRecordID
	INNER JOIN Ranks on PromotionsRecords.RankID = Ranks.RankID	 
	WHERE  PromotionPeriodID = @PromotionPeriodID
	GROUP BY RankName,PromotionsRecords.RankID

END
GO
PRINT N'Creating [dbo].[spGetPromotionRecordsByPromotionPeriodID]...';


GO
CREATE PROCEDURE [dbo].[spGetPromotionRecordsByPromotionPeriodID] 
	@PromotionPeriodID int 
AS
BEGIN
	
	SELECT 
	MaturityYear,
	PeriodName,
	mic_db.dbo.fn_GregToUmAlqura(PromotionStartDate) PromotionStartDate,
	mic_db.dbo.fn_GregToUmAlqura(PromotionEndDate) PromotionEndDate
	FROM PromotionsPeriods
	INNER JOIN MaturityYearsBalances on MaturityYearsBalances.MaturityYearID=PromotionsPeriods.YearID
	INNER JOIN Periods on Periods.PeriodID=PromotionsPeriods.PeriodID
	WHERE PromotionPeriodID=@PromotionPeriodID

END
GO
PRINT N'Creating [dbo].[spGetPromotionRecordByPromotionRecordID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPromotionRecordByPromotionRecordID]
(
	@PromotionRecordID int	
)
AS
BEGIN
	SELECT  PromotionsRecords.PromotionRecordID, 
			PromotionsRecords.PromotionRecordNo,
			mic_db.dbo.fn_GregToUmAlqura(PromotionsRecords.PromotionRecordDate) AS PromotionRecordDateUmAlQura,
			MaturityYearsBalances.MaturityYear,
			Periods.PeriodName,
			mic_db.dbo.fn_GregToUmAlqura(PromotionsPeriods.PromotionStartDate) AS PromotionStartDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(PromotionsPeriods.PromotionEndDate) AS PromotionEndDateUmAlQura,
			--PromotionsPeriods.PromotionStartDate, 
			--PromotionsPeriods.PromotionEndDate,
			JobsCategories.JobCategoryNo,
			JobsCategories.JobCategoryName,
			JobsGroups.JobGroupName,
			Ranks.RankName,
			PromotionsRecordsStatus.PromotionRecordStatusName,
			vwEmployeesCodes.EmployeeCodeNo CreatedByCode,
			vwEmployeesCodes.EmployeeNameAr CreatedByName,
			PromotionsRecords.CreationDate 
	FROM PromotionsRecords
	INNER JOIN Ranks ON Ranks.RankID = PromotionsRecords.RankID
	INNER JOIN JobsCategories ON JobsCategories.JobCategoryID = PromotionsRecords.JobCategoryID
	INNER JOIN JobsGroups ON JobsGroups.JobGroupID = JobsCategories.JobGroupID
	INNER JOIN PromotionsPeriods ON PromotionsRecords.PromotionPeriodID = PromotionsPeriods.PromotionPeriodID
	INNER JOIN MaturityYearsBalances ON MaturityYearsBalances.MaturityYearID = PromotionsPeriods.YearID
	INNER JOIN PromotionsRecordsStatus ON PromotionsRecordsStatus.PromotionRecordStatusID = PromotionsRecords.PromotionRecordStatusID
	INNER JOIN Periods ON PromotionsPeriods.PeriodID = Periods.PeriodID
	INNER JOIN vwEmployeesCodes ON PromotionsRecords.CreatedBy = vwEmployeesCodes.EmployeeCodeID
	WHERE PromotionRecordID = @PromotionRecordID
END
GO
PRINT N'Creating [dbo].[spGetPassengerOrdersItinerariesByPassengerOrderID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPassengerOrdersItinerariesByPassengerOrderID]
(
	@PassengerOrderID int
)
AS
BEGIN
	
	SELECT * 
	FROM PassengerOrdersItineraries 
	WHERE PassengerOrdersItineraries.PassengerOrderID = @PassengerOrderID
	
END
GO
PRINT N'Creating [dbo].[spGetPassengerOrdersByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPassengerOrdersByEmployeeCodeID]--21006
(
	@EmployeeCodeID int
)
AS
BEGIN  

	SELECT PassengerOrders.*,
	  case when PassengerOrders.Going = 1 then N'نعم' else N'لا' end as GoingText, 
	  case when PassengerOrders.Returning = 1 then N'نعم' else N'لا' end as ReturningText,  
	  PassengerOrders.Reason, vwEmployeesCodes.EmployeeCodeNo, vwEmployeesCodes.EmployeeIDNo, 
	  vwEmployeesCodes.EmployeeNameAr, Ranks.RankName, TicketsClasses.TicketClassName
	FROM PassengerOrders	
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = PassengerOrders.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID=EmployeesCareersHistory.EmployeeCodeID
	LEFT OUTER JOIN Ranks ON PassengerOrders.RankID = Ranks.RankID 
	LEFT OUTER JOIN TicketsClasses ON PassengerOrders.TicketClassID = TicketsClasses.TicketClassID
	WHERE vwEmployeesCodes.EmployeeCodeID = @EmployeeCodeID
	
END
GO
PRINT N'Creating [dbo].[spGetPassengerOrderByPassengerOrderID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPassengerOrderByPassengerOrderID]
(
	@PassengerOrderID int
)
AS
BEGIN  

	SELECT PassengerOrders.PassengerOrderID, PassengerOrders.EmployeeCareerHistoryID, PassengerOrders.TravellingDate, PassengerOrders.RankID, 
	  PassengerOrders.TicketClassID, 
	  CASE WHEN PassengerOrders.Going = 1 THEN N'نعم' ELSE N'لا' END AS GoingText, 
	  CASE WHEN PassengerOrders.Returning = 1 THEN N'نعم' ELSE N'لا' END AS ReturningText,  
	  PassengerOrders.CreatedDate, PassengerOrders.LastUpdatedDate, 
	  PassengerOrders.Reason, vwEmployeesCodes.EmployeeCodeNo, Employees.EmployeeIDNo, 
	  vwEmployeesCodes.EmployeeNameAr, Ranks.RankName, TicketsClasses.TicketClassName
	FROM PassengerOrders 
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = PassengerOrders.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID=EmployeesCareersHistory.EmployeeCodeID
	INNER JOIN Employees ON vwEmployeesCodes.EmployeeID = Employees.EmployeeID 
	LEFT OUTER JOIN Ranks ON PassengerOrders.RankID = Ranks.RankID 
	LEFT OUTER JOIN TicketsClasses ON PassengerOrders.TicketClassID = TicketsClasses.TicketClassID
	WHERE PassengerOrders.PassengerOrderID = @PassengerOrderID
	
END
GO
PRINT N'Creating [dbo].[spGetOverTimesDetailsByOverTimeID]...';


GO
CREATE PROC [dbo].[spGetOverTimesDetailsByOverTimeID]
(
	 @OverTimeID INT
)
AS
SELECT OverTimesDetails.OverTimeID, 
	   vwEmployeesCodes.EmployeeCodeNo, 
	   vwEmployeesCodes.EmployeeIDNo, 
	   vwEmployeesCodes.EmployeeNameAr
FROM OverTimesDetails
INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = OverTimesDetails.EmployeeCareerHistoryID
INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID = EmployeesCareersHistory.EmployeeCodeID
WHERE OverTimesDetails.OverTimeID = @OverTimeID
GO
PRINT N'Creating [dbo].[spGetOverTimesByOverTimeID]...';


GO
CREATE PROC [dbo].[spGetOverTimesByOverTimeID]
(
	@OverTimeID INT
)
AS
BEGIN
	SELECT  OverTimes.OverTimeID, 
			OverTimes.OverTimeStartDate, 
			OverTimes.OverTimeEndDate, 
			mic_db.dbo.fn_GregToUmAlqura(OverTimes.OverTimeStartDate) AS OverTimeStartDateUmAlQura, 
			mic_db.dbo.fn_GregToUmAlqura(OverTimes.OverTimeEndDate) AS OverTimeEndDateUmAlQura, 
			OverTimes.WeekWorkHoursAvg, 
			OverTimes.SaturdayHoursAvg, 
			OverTimes.FridayHoursAvg, 
			OverTimes.Requester,
			OverTimes.Tasks, 
			OverTimes.CreatedDate,
			OverTimes.LastUpdatedDate, 
			dbo.fnGetPeriodBetweenTwoDates(OverTimes.OverTimeStartDate,OverTimes.OverTimeEndDate) AS OverTimePeriod
	FROM    OverTimes  
	WHERE   OverTimes.OverTimeID = @OverTimeID
END
GO
PRINT N'Creating [dbo].[spGetOverTimeDetailsByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetOverTimeDetailsByEmployeeCodeID] --24870
(
	@EmployeeCodeID int
)
AS
BEGIN

	SELECT OverTimes.*,
			vwEmployeesCodes.EmployeeCodeNo, 
			vwEmployeesCodes.EmployeeCodeID,
			vwEmployeesCodes.EmployeeIDNo, 
			vwEmployeesCodes.EmployeeNameAr,
			dbo.fnGetPeriodBetweenTwoDates(OverTimes.OverTimeStartDate , OverTimes.OverTimeEndDate) AS OverTimePeriod
	FROM OverTimes
	INNER JOIN OverTimesDetails ON OverTimes.OverTimeID = OverTimesDetails.OverTimeID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = OverTimesDetails.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON EmployeesCareersHistory.EmployeeCodeID = vwEmployeesCodes.EmployeeCodeID
	WHERE vwEmployeesCodes.EmployeeCodeID = @EmployeeCodeID
	
END
GO
PRINT N'Creating [dbo].[spGetLendersByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetLendersByEmployeeCodeID] --93
(
	@EmployeeCodeID int
)
AS
BEGIN

	SELECT Lenders.*,
			KSACities.KSACityName
	FROM Lenders
	INNER JOIN vwEmployeesCodes ON Lenders.EmployeeCodeID = vwEmployeesCodes.EmployeeCodeID
	LEFT JOIN KSACities ON Lenders.KSACityID = KSACities.KSACityID
	WHERE Lenders.EmployeeCodeID = @EmployeeCodeID
	
END
GO
PRINT N'Creating [dbo].[spGetLenderByLenderID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetLenderByLenderID]
(
	@LenderID int
)
AS
BEGIN
	SELECT Lenders.LenderID,
		Lenders.LenderStartDate,
		Lenders.LenderEndDate,
		mic_db.dbo.fn_GregToUmAlqura(Lenders.LenderStartDate) AS LenderStartDateUmAlQura,		
		mic_db.dbo.fn_GregToUmAlqura(Lenders.LenderEndDate) AS LenderEndDateUmAlQura,
		Lenders.KSACityID,
		Lenders.LenderOrganization,
		Lenders.EmployeeCodeID,
		Lenders.IsFinished,
		Lenders.CreatedDate,
		Lenders.CreatedBy,
		Lenders.LastUpdatedDate,
		Lenders.LastUpdatedBy, 
		KSACities.KSACityName
	FROM Lenders
	INNER JOIN KSACities ON Lenders.KSACityID = KSACities.KSACityID
	WHERE LenderID = @LenderID
END
GO
PRINT N'Creating [dbo].[spGetJoiningPeriodBasedOnActivePromotionPeriod]...';


GO
--SELECT * FROM OrganizationsJobs
--INNER JOIN Jobs ON Jobs.JobID = OrganizationsJobs.JobID
--WHERE RankID = 9
--ORDER BY OrganizationsJobs.CreatedDate

CREATE PROCEDURE [dbo].[spGetJoiningPeriodBasedOnActivePromotionPeriod]
(
	@EmployeeCodeID int = 22951
)
AS
BEGIN

	DECLARE @HiringDate date
	DECLARE @PromotionEndDate date
	DECLARE @DaysCount int

	SELECT @PromotionEndDate = PromotionEndDate 
	FROM PromotionsPeriods
	WHERE IsActive = 1

	SELECT @HiringDate = dbo.GetHiringDateByEmployeeCodeID(@EmployeeCodeID)

	SELECT @DaysCount = DATEDIFF(DAY,@HiringDate,@PromotionEndDate)

	SELECT @DaysCount AS TotalDays,
		dbo.fnGetYearsFromTotalDays(@DaysCount) Years,
		dbo.fnGetModMonthsFromTotalDays(@DaysCount) ModMonths,
		dbo.fnGetModDaysFromTotalDays(@DaysCount) ModDays
END
GO
PRINT N'Creating [dbo].[spGetJobVacanciesByRankID]...';


GO

Create PROCEDURE [dbo].[spGetJobVacanciesByRankID]
(
@RankID int 
)
AS
BEGIN
SELECT RankName ,JobNo, JobName ,OrganizationName ,JobsCategories.JobCategoryName,jobs.JobCode
  FROM OrganizationsJobs 
  INNER JOIN Ranks ON [OrganizationsJobs].RankID = Ranks.RankID
  INNER JOIN Jobs ON [OrganizationsJobs].JobID = Jobs.JobID 
  INNER JOIN JobsCategories ON Jobs.JobCategoryID = JobsCategories.JobCategoryID
  INNER JOIN OrganizationsStructures ON OrganizationsStructures.OrganizationID = OrganizationsJobs.OrganizationID
  WHERE IsVacant = 1 and Ranks.RankID = @RankID
END
GO
PRINT N'Creating [dbo].[spGetJobVacanciesByRankAndCategory]...';


GO
CREATE  PROCEDURE [dbo].[spGetJobVacanciesByRankAndCategory]  
@RankID int=null,
@JobCategoryID int=null
AS
BEGIN
  SELECT RankName,
		 JobsCategories.JobCategoryName,		 
		 JobName,
		 OJobs.JobNo,
		 JobsCategories.JobCategoryNo,  
		 OrganizationName,     
		 OrganizationJobStatusName
  FROM   OrganizationsJobs as OJobs
  inner join Ranks  on Ranks.RankID = OJobs.RankID
  inner join Jobs   on Jobs.JobID=OJobs.JobID
  inner join OrganizationsJobsStatus   on OrganizationsJobsStatus.OrganizationJobStatusID=OJobs.OrganizationJobStatusID
  inner join JobsCategories on Jobs.JobCategoryID=JobsCategories.JobCategoryID
  inner join OrganizationsStructures on OrganizationsStructures.OrganizationID=OJobs.OrganizationID
  where IsVacant=1 and OJobs.RankID=ISNULL(@RankID,OJobs.RankID) and JobsCategories.JobCategoryID=ISNULL(@JobCategoryID,JobsCategories.JobCategoryID)
  order by OJobs.RankID
END
GO
PRINT N'Creating [dbo].[spGetJobsVacanciesByPromotionRecordID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetJobsVacanciesByPromotionRecordID]
(
	@PromotionRecordID int	
)
AS
BEGIN
	SELECT  vwOrganizationsJobs.JobNo,
			vwOrganizationsJobs.OrganizationCode,
			vwOrganizationsJobs.OrganizationName,
			vwOrganizationsJobs.JobName,
			vwOrganizationsJobs.JobCode,
			vwOrganizationsJobs.JobCategoryName,
			vwOrganizationsJobs.RankName
	FROM PromotionsRecordsJobsVacancies
	INNER JOIN vwOrganizationsJobs ON PromotionsRecordsJobsVacancies.OrganizationJobID = vwOrganizationsJobs.OrganizationJobID
	WHERE PromotionRecordID = @PromotionRecordID
END
GO
PRINT N'Creating [dbo].[spGetInternshipScholarshipDetailsByInternshipScholarshipID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetInternshipScholarshipDetailsByInternshipScholarshipID] --93
(
	@InternshipScholarshipID int
)
AS
BEGIN

	SELECT InternshipScholarships.InternshipScholarshipID, 
			vwEmployeesCodes.EmployeeCodeNo, 
			vwEmployeesCodes.EmployeeCodeID,
			vwEmployeesCodes.EmployeeIDNo, 
			vwEmployeesCodes.EmployeeNameAr
			,Ranks.RankName
	FROM InternshipScholarships
	INNER JOIN InternshipScholarshipsDetails ON InternshipScholarships.InternshipScholarshipID = InternshipScholarshipsDetails.InternshipScholarshipID 
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = InternshipScholarshipsDetails.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON EmployeesCareersHistory.EmployeeCodeID = vwEmployeesCodes.EmployeeCodeID
	INNER JOIN OrganizationsJobs ON OrganizationsJobs.OrganizationJobID = EmployeesCareersHistory.OrganizationJobID
	INNER JOIN Ranks ON Ranks.RankID = OrganizationsJobs.RankID
	WHERE InternshipScholarships.InternshipScholarshipID = @InternshipScholarshipID
	ORDER BY 	Ranks.RankName DESC
	
END
GO
PRINT N'Creating [dbo].[spGetInternshipScholarshipDetailsByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetInternshipScholarshipDetailsByEmployeeCodeID]-- 22915
(
	@EmployeeCodeID int
)
AS
BEGIN

	SELECT InternshipScholarships.*,
			vwEmployeesCodes.EmployeeCodeNo, 
			vwEmployeesCodes.EmployeeCodeID,
			vwEmployeesCodes.EmployeeIDNo, 
			vwEmployeesCodes.EmployeeNameAr, 
			InternshipScholarshipsTypes.InternshipScholarshipTypeName,
			dbo.fnGetPeriodBetweenTwoDates(InternshipScholarships.InternshipScholarshipStartDate , InternshipScholarships.InternshipScholarshipEndDate) AS InternshipScholarshipPeriod
	FROM InternshipScholarships
	INNER JOIN InternshipScholarshipsDetails ON InternshipScholarships.InternshipScholarshipID = InternshipScholarshipsDetails.InternshipScholarshipID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = InternshipScholarshipsDetails.EmployeeCareerHistoryID
	INNER JOIN InternshipScholarshipsTypes ON InternshipScholarships.InternshipScholarshipTypeID = InternshipScholarshipsTypes.InternshipScholarshipTypeID
	INNER JOIN vwEmployeesCodes ON EmployeesCareersHistory.EmployeeCodeID = vwEmployeesCodes.EmployeeCodeID
	WHERE vwEmployeesCodes.EmployeeCodeID = @EmployeeCodeID
	ORDER BY InternshipScholarshipStartDate
	
END
GO
PRINT N'Creating [dbo].[spGetInternshipScholarshipByInternshipScholarshipID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetInternshipScholarshipByInternshipScholarshipID]
(
	@InternshipScholarshipID int
)
AS
BEGIN

	SELECT InternshipScholarships.InternshipScholarshipID, 
		 InternshipScholarships.InternshipScholarshipTypeID, 
		 InternshipScholarships.InternshipScholarshipStartDate, 
		 mic_db.dbo.fn_GregToUmAlqura(InternshipScholarships.InternshipScholarshipStartDate) AS InternshipScholarshipStartDateUmAlQura,
		 InternshipScholarships.InternshipScholarshipEndDate, 
		 mic_db.dbo.fn_GregToUmAlqura(InternshipScholarships.InternshipScholarshipEndDate) AS InternshipScholarshipEndDateUmAlQura,
		 InternshipScholarships.InternshipScholarshipLocation,
		 InternshipScholarships.InternshipScholarshipReason,
		 InternshipScholarships.CountryID, 
		 InternshipScholarships.KSACityID, 
		 InternshipScholarships.IsActive, 
		 InternshipScholarships.CreatedDate, 
		 InternshipScholarships.LastUpdatedDate, 
		 InternshipScholarshipsTypes.InternshipScholarshipTypeName,  
		 Countries.CountryName, 
		 KSARegions.KSARegionName, 
		 KSACities.KSACityName, 
		 dbo.fnGetPeriodBetweenTwoDates(InternshipScholarships.InternshipScholarshipStartDate,InternshipScholarships.InternshipScholarshipEndDate) AS InternshipScholarshipPeriod
	FROM KSARegions 
		INNER JOIN KSACities ON KSARegions.KSARegionID = KSACities.KSARegionID 
		RIGHT OUTER JOIN InternshipScholarships 
		INNER JOIN InternshipScholarshipsTypes ON InternshipScholarships.InternshipScholarshipTypeID = InternshipScholarshipsTypes.InternshipScholarshipTypeID ON KSACities.KSACityID = InternshipScholarships.KSACityID 
		LEFT OUTER JOIN Countries ON InternshipScholarships.CountryID = Countries.CountryID
	WHERE InternshipScholarshipID = @InternshipScholarshipID
	
END
GO
PRINT N'Creating [dbo].[spUndoPromotionRecordClosing]...';


GO

CREATE PROC [dbo].[spUndoPromotionRecordClosing] --303
(
		 @PromotionRecordID INT=287
)
AS
	DECLARE @PromotionRecordEmployeeID INT 
	DECLARE @Counter INT =0
	DECLARE TestCursor CURSOR LOCAL FAST_FORWARD FOR
 
	SELECT  PRE.PromotionRecordEmployeeID FROM PromotionsRecordsEmployees PRE WHERE PRE.PromotionRecordID=@PromotionRecordID AND PRE.PromotionRecordJobVacancyID IS NOT NULL
	OPEN TestCursor
	FETCH NEXT FROM TestCursor INTO @PromotionRecordEmployeeID 
	WHILE @@FETCH_STATUS = 0
		BEGIN
			--==================
			DECLARE @PromotionRecordJobVacancyID INT 
			DECLARE @NewEmployeeCareerHistoryID INT
			DECLARE @CurrentEmployeeCareerHistoryID INT
			DECLARE @CurrentOrganizationJobID INT
			DECLARE @JobVacancyOrganizationJobID INT
			SELECT @PromotionRecordJobVacancyID=PRE.PromotionRecordJobVacancyID,@NewEmployeeCareerHistoryID=PRE.NewEmployeeCareerHistoryID,@CurrentEmployeeCareerHistoryID=PRE.CurrentEmployeeCareerHistoryID FROM PromotionsRecordsEmployees PRE WHERE PRE.PromotionRecordEmployeeID=@PromotionRecordEmployeeID
			SELECT @CurrentOrganizationJobID=CURRENTEMPCARRER.OrganizationJobID FROM EmployeesCareersHistory CURRENTEMPCARRER WHERE CURRENTEMPCARRER.EmployeeCareerHistoryID=@CurrentEmployeeCareerHistoryID
			SELECT @JobVacancyOrganizationJobID=OJ.OrganizationJobID FROM PromotionsRecordsJobsVacancies OJ WHERE OJ.PromotionRecordJobVacancyID= @PromotionRecordJobVacancyID


			--SELECT  PRE.NewEmployeeCareerHistoryID FROM PromotionsRecordsEmployees PRE WHERE PRE.PromotionRecordEmployeeID=@PromotionRecordEmployeeID
			--SELECT  OJ.IsVacant ,OJ.IsReserved  FROM OrganizationsJobs OJ WHERE OJ.OrganizationJobID=@JobVacancyOrganizationJobID
			--SELECT  CURRENTEMPCARRER.IsActive  FROM EmployeesCareersHistory CURRENTEMPCARRER WHERE CURRENTEMPCARRER.EmployeeCareerHistoryID=@CurrentEmployeeCareerHistoryID
			--SELECT  OJ.IsVacant  FROM OrganizationsJobs OJ WHERE OJ.OrganizationJobID=@CurrentOrganizationJobID
			--SELECT * FROM EmployeesCareersHistory WHERE EmployeeCareerHistoryID=@NewEmployeeCareerHistoryID


			UPDATE PRE SET PRE.NewEmployeeCareerHistoryID=NULL FROM PromotionsRecordsEmployees PRE WHERE PRE.PromotionRecordEmployeeID=@PromotionRecordEmployeeID
			UPDATE OJ SET OJ.IsVacant=1,OJ.IsReserved=1 FROM OrganizationsJobs OJ WHERE OJ.OrganizationJobID=@JobVacancyOrganizationJobID
			UPDATE CURRENTEMPCARRER SET CURRENTEMPCARRER.IsActive=1 FROM EmployeesCareersHistory CURRENTEMPCARRER WHERE CURRENTEMPCARRER.EmployeeCareerHistoryID=@CurrentEmployeeCareerHistoryID
			UPDATE OJ SET OJ.IsVacant=0 FROM OrganizationsJobs OJ WHERE OJ.OrganizationJobID=@CurrentOrganizationJobID
			DELETE FROM EmployeesCareersHistory WHERE EmployeeCareerHistoryID=@NewEmployeeCareerHistoryID
			
			--==================
			FETCH NEXT FROM TestCursor INTO @PromotionRecordEmployeeID 
		END
	CLOSE TestCursor
	DEALLOCATE TestCursor
	UPDATE PR SET PR.PromotionRecordStatusID=3,PR.ClosingBy=NULL,PR.ClosingTime=NULL  FROM PromotionsRecords PR WHERE PR.PromotionRecordID=@PromotionRecordID
GO
PRINT N'Creating [dbo].[spGetVacationsByVacationID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetVacationsByVacationID]-- 22915
(
	@VacationID int
)
AS
BEGIN

	
	SELECT  vwEmployeesCodes.EmployeeCodeID,
			Vacations.VacationID,
			VacationsDetails.IsApproved,
			VacationsTypes.VacationTypeName,
			VacationsActions.VacationActionName,
			mic_db.dbo.fn_GregToUmAlqura(Vacations.VacationStartDate) AS VacationStartDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(Vacations.VacationEndDate) AS VacationEndDateUmAlQura,
			dbo.fnGetPeriodBetweenTwoDates(Vacations.VacationStartDate ,Vacations.VacationEndDate) AS VacationPeriod,
			
			mic_db.dbo.fn_GregToUmAlqura(VacationsDetails.FromDate) AS FromDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(VacationsDetails.ToDate) AS ToDateUmAlQura,
			--mic_db.dbo.fn_GregToUmAlqura(DATEADD(DAY,1,Vacations.VacationEndDate)) AS WorkDateUmAlQura,
			dbo.fnGetPeriodBetweenTwoDates(VacationsDetails.FromDate ,VacationsDetails.ToDate) AS VacationActionPeriod
			
	FROM Vacations
	INNER JOIN VacationsTypes ON VacationsTypes.VacationTypeID = Vacations.VacationTypeID
	INNER JOIN VacationsDetails ON Vacations.VacationID = VacationsDetails.VacationID
	INNER JOIN VacationsActions ON VacationsDetails.VacationActionID = VacationsActions.VacationActionID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = Vacations.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID = EmployeesCareersHistory.EmployeeCodeID
	WHERE Vacations.VacationID = @VacationID
	--ORDER BY Vacations.VacationID
	
END
GO
PRINT N'Creating [dbo].[spGetVacationsByEndOfServiceID]...';


GO

CREATE PROCEDURE [dbo].[spGetVacationsByEndOfServiceID] 
(
	@EndOfServiceID int
)
AS
BEGIN

	DECLARE @EmployeeCareerHistoryID int, @EmployeeCodeID int
	SELECT @EmployeeCareerHistoryID = EmployeeCareerHistoryID FROM EndOfServices EOS WHERE EndOfServiceID = @EndOfServiceID
	SELECT @EmployeeCodeID = EmployeeCodeID FROM EmployeesCareersHistory WHERE EmployeeCareerHistoryID = @EmployeeCareerHistoryID
	
	SELECT DATEDIFF(DAY, v.VacationStartDate, v.VacationEndDate) + 1 as Period, v.VacationID, v.VacationStartDate, v.VacationEndDate, vt.VacationTypeName 
	FROM Vacations v 
	INNER JOIN VacationsTypes vt ON vt.VacationTypeID = v.VacationTypeID
	WHERE v.VacationTypeID = 1 
	AND v.EmployeeCareerHistoryID IN (SELECT ECH.EmployeeCareerHistoryID FROM EmployeesCareersHistory ECH WHERE ECH.EmployeeCodeID = @EmployeeCodeID)
	UNION ALL
	SELECT DATEDIFF(DAY, EOSV.VacationStartDate, EOSV.VacationEndDate) + 1 AS Period, EOSV.EndOfServiceVacationID AS VacationID, EOSV.VacationStartDate AS VacationStartDate, EOSV.VacationEndDate AS VacationEndDate, vt.VacationTypeName  AS VacationTypeName
		FROM EndOfServicesVacations EOSV 
			INNER JOIN VacationsTypes vt ON vt.VacationTypeID = EOSV.VacationTypeID
		WHERE EOSV.EndOfServiceID=@EndOfServiceID
			AND EOSV.VacationTypeID = 1 
	ORDER BY v.VacationStartDate
END
GO
PRINT N'Creating [dbo].[spGetVacationsByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetVacationsByEmployeeCodeID]-- 22915
(
	@EmployeeCodeID int
)
AS
BEGIN

	--SELECT Vacations.*,
	--		VacationsTypes.VacationTypeName,
	--		mic_db.dbo.fn_GregToUmAlqura(Vacations.VacationStartDate) AS VacationStartDateUmAlQura,
	--		mic_db.dbo.fn_GregToUmAlqura(Vacations.VacationEndDate) AS VacationEndDateUmAlQura,
	--		mic_db.dbo.fn_GregToUmAlqura(DATEADD(DAY,1,Vacations.VacationEndDate)) AS WorkDateUmAlQura,
	--		dbo.fnGetPeriodBetweenTwoDates(Vacations.VacationStartDate , Vacations.VacationEndDate) AS VacationPeriod
	--FROM Vacations
	--INNER JOIN VacationsTypes ON VacationsTypes.VacationTypeID = Vacations.VacationTypeID
	--INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = Vacations.EmployeeCareerHistoryID
	--INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID = EmployeesCareersHistory.EmployeeCodeID
	--WHERE vwEmployeesCodes.EmployeeCodeID = @EmployeeCodeID
	--ORDER BY Vacations.VacationStartDate
	
	SELECT Vacations.VacationID,
			VacationsDetails.IsApproved,
			VacationsTypes.VacationTypeName,
			VacationsActions.VacationActionName,
			mic_db.dbo.fn_GregToUmAlqura(VacationsDetails.FromDate) AS VacationStartDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(VacationsDetails.ToDate) AS VacationEndDateUmAlQura,
			--mic_db.dbo.fn_GregToUmAlqura(DATEADD(DAY,1,Vacations.VacationEndDate)) AS WorkDateUmAlQura,
			dbo.fnGetPeriodBetweenTwoDates(VacationsDetails.FromDate ,VacationsDetails.ToDate) AS VacationPeriod
	FROM Vacations
	INNER JOIN VacationsTypes ON VacationsTypes.VacationTypeID = Vacations.VacationTypeID
	INNER JOIN VacationsDetails ON Vacations.VacationID = VacationsDetails.VacationID
	INNER JOIN VacationsActions ON VacationsDetails.VacationActionID = VacationsActions.VacationActionID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = Vacations.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID = EmployeesCareersHistory.EmployeeCodeID
	WHERE vwEmployeesCodes.EmployeeCodeID = @EmployeeCodeID
	ORDER BY Vacations.VacationID
	
END
GO
PRINT N'Creating [dbo].[spGetVacationCreationRecordByVacationID]...';


GO

CREATE   PROCEDURE [dbo].[spGetVacationCreationRecordByVacationID]
(
	@VacationID INT
)
AS
BEGIN
	SELECT  Vacations.VacationID AS VacationIDCreationRecord ,
			mic_db.dbo.fn_GregToUmAlqura(VacationsDetails.FromDate) AS FromDateUmAlQuraCreationRecord,
			mic_db.dbo.fn_GregToUmAlqura(VacationsDetails.ToDate) AS ToDateUmAlQuraCreationRecord,
			VacationsDetails.FromDate AS FromDateCreationRecord,
			VacationsDetails.ToDate AS ToDateCreationRecord,
			mic_db.dbo.fn_GregToUmAlqura(DATEADD(DAY,1,VacationsDetails.ToDate)) AS WorkDateUmAlQuraCreationRecord,
			DATEADD(DAY,1,VacationsDetails.ToDate) AS WorkDateCreationRecord,
			VacationsDetails.MainframeNo AS MainframeNoCreationRecord,
			VacationsDetails.Notes AS NotesCreationRecord,
			dbo.fnGetPeriodBetweenTwoDates(VacationsDetails.FromDate,VacationsDetails.ToDate) AS VacationPeriodCreationRecord,
			VacationsActions.VacationActionID AS VacationActionIDCreationRecord,
			VacationsActions.VacationActionName AS VacationActionNameCreationRecord,
			VacationsTypes.VacationTypeName AS VacationTypeNameCreationRecord ,
			vwEmployeesCodes.EmployeeCodeNo EmployeeCodeNoCreationRecord, 
			vwEmployeesCodes.EmployeeCodeID AS EmployeeCodeIDCreationRecord ,
			vwEmployeesCodes.EmployeeIDNo AS EmployeeIDNoCreationRecord, 
			vwEmployeesCodes.EmployeeNameAr AS EmployeeNameArCreationRecord ,
			jobs.JobName AS JobNameCreationRecord,
			OrganizationsStructures.OrganizationName AS OrganizationNameCreationRecord ,
			Ranks.RankName AS RankNameCreationRecord ,
			--VacationsTypes.VacationBalance AS VacationBalanceCreationRecord,			
			(SELECT rcvb.VacationBalance FROM RanksCategoriesVacationsBalances rcvb WHERE rcvb.VacationTypeID=Vacations.VacationTypeID AND rcvb.RankCategoryID=Ranks.RankCategoryID) AS VacationBalanceCreationRecord,
			dbo.[fnGetPreviousConsumedVacationByEmployeeCodeID](Vacations.VacationID,vwEmployeesCodes.EmployeeCodeID,Vacations.VacationTypeID) AS PreviousConsumedVacationCreationRecord
			--DATEPART(YEAR,Delegations.DelegationStartDate)) AS PreviousConsumedDelegation,
	FROM Vacations
	INNER JOIN VacationsTypes ON Vacations.VacationTypeID = VacationsTypes.VacationTypeID
	INNER JOIN VacationsDetails ON Vacations.VacationID = VacationsDetails.VacationID 
	INNER JOIN VacationsActions ON VacationsDetails.VacationActionID = VacationsActions.VacationActionID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = Vacations.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON EmployeesCareersHistory.EmployeeCodeID = vwEmployeesCodes.EmployeeCodeID
	INNER JOIN OrganizationsJobs ON OrganizationsJobs.OrganizationJobID = EmployeesCareersHistory.OrganizationJobID
	INNER JOIN Jobs ON Jobs.JobID = OrganizationsJobs.JobID
	INNER JOIN OrganizationsStructures ON OrganizationsJobs.OrganizationID = OrganizationsStructures.OrganizationID
	INNER JOIN Ranks ON Ranks.RankID = OrganizationsJobs.RankID
	WHERE VacationsDetails.VacationID = @VacationID and VacationsActions.VacationActionID = 1
END
GO
PRINT N'Creating [dbo].[spGetVacationByVacationDetailID]...';


GO
CREATE   PROCEDURE [dbo].[spGetVacationByVacationDetailID] --256648
(
	@VacationDetailID INT = 2084
)
AS
BEGIN
DECLARE @VacationID INT
SELECT @VacationID=VD.VacationID FROM VacationsDetails VD WHERE VD.VacationDetailID=@VacationDetailID

SELECT
			VacationsDetails.VacationDetailID as VacationDetailID,
			mic_db.dbo.fn_GregToUmAlqura(VacationsDetails.FromDate) AS FromDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(VacationsDetails.ToDate) AS ToDateUmAlQura,
			VacationsDetails.FromDate,
			VacationsDetails.ToDate,
			mic_db.dbo.fn_GregToUmAlqura(DATEADD(DAY,1,VacationsDetails.ToDate)) AS WorkDateUmAlQura,
			DATEADD(DAY,1,VacationsDetails.ToDate) AS WorkDate,
			VacationsDetails.MainframeNo,
			VacationsDetails.Notes,
			dbo.fnGetPeriodBetweenTwoDates(VacationsDetails.FromDate,VacationsDetails.ToDate) AS VacationPeriod,
			VacationsActions.VacationActionID,
			VacationsActions.VacationActionName,
			VacationsTypes.VacationTypeID,
			VacationsTypes.VacationTypeName,
			vwEmployeesCodes.EmployeeCodeNo, 
			vwEmployeesCodes.EmployeeCodeID,
			vwEmployeesCodes.EmployeeIDNo, 
			vwEmployeesCodes.EmployeeNameAr,
			jobs.JobName,
			OrganizationsStructures.OrganizationName,
			Ranks.RankName,
			--VacationsTypes.VacationBalance,
			(SELECT rcvb.VacationBalance FROM RanksCategoriesVacationsBalances rcvb WHERE rcvb.VacationTypeID=Vacations.VacationTypeID AND rcvb.RankCategoryID=Ranks.RankCategoryID) AS VacationBalance,
			dbo.[fnGetPreviousConsumedVacationByEmployeeCodeID](Vacations.VacationID,vwEmployeesCodes.EmployeeCodeID,Vacations.VacationTypeID) AS PreviousConsumedVacation,
			 vwEmployeesCodes.NationalityID as NationalityID,
			NormalVacationsTypes.NormalVacationTypeID,
			NormalVacationsTypes.NormalVacationTypeName,
		PR.*,
		OrganizationsJobs.JobNo,
		Cast(vacations.CreatedDate as date) as CreatedDate,
		mic_db.dbo.fn_GregToUmAlqura(Cast(vacations.CreatedDate as date)) as CreatedDateUmAlqura
			--DATEPART(YEAR,Delegations.DelegationStartDate)) AS PreviousConsumedDelegation,
	FROM Vacations
	INNER JOIN VacationsTypes ON Vacations.VacationTypeID = VacationsTypes.VacationTypeID
	INNER JOIN VacationsDetails ON Vacations.VacationID = VacationsDetails.VacationID 
	INNER JOIN VacationsActions ON VacationsDetails.VacationActionID = VacationsActions.VacationActionID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = Vacations.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON EmployeesCareersHistory.EmployeeCodeID = vwEmployeesCodes.EmployeeCodeID
	INNER JOIN OrganizationsJobs ON OrganizationsJobs.OrganizationJobID = EmployeesCareersHistory.OrganizationJobID
	INNER JOIN Jobs ON Jobs.JobID = OrganizationsJobs.JobID
	INNER JOIN OrganizationsStructures ON OrganizationsJobs.OrganizationID = OrganizationsStructures.OrganizationID
	INNER JOIN Ranks ON Ranks.RankID = OrganizationsJobs.RankID
	LEFT OUTER JOIN NormalVacationsTypes ON NormalVacationsTypes.NormalVacationTypeID= Vacations.NormalVacationTypeID
	LEFT OUTER JOIN Countries ON Countries.CountryID=vwEmployeesCodes.NationalityID
	INNER JOIN  (SELECT TOP 1 
	VD.VacationID,
	VD.VacationDetailID AS VacationIDCreationRecord ,
	mic_db.dbo.fn_GregToUmAlqura(VD.FromDate) AS FromDateUmAlQuraCreationRecord,
	mic_db.dbo.fn_GregToUmAlqura(VD.ToDate) AS ToDateUmAlQuraCreationRecord,
	VD.FromDate AS FromDateCreationRecord,
	VD.ToDate AS ToDateCreationRecord,
	mic_db.dbo.fn_GregToUmAlqura(DATEADD(DAY,1,VD.ToDate)) AS WorkDateUmAlQuraCreationRecord,
	DATEADD(DAY,1,VD.ToDate) AS WorkDateCreationRecord,
	VD.MainframeNo AS MainframeNoCreationRecord,
	VD.Notes AS NotesCreationRecord,
	dbo.fnGetPeriodBetweenTwoDates(VD.FromDate,VD.ToDate) AS VacationPeriodCreationRecord,
	VA.VacationActionID AS VacationActionIDCreationRecord,
	VA.VacationActionName AS VacationActionNameCreationRecord
	FROM VacationsDetails VD 
		INNER JOIN VacationsActions VA ON VD.VacationActionID = VA.VacationActionID
	WHERE VD.VacationID=@VacationID
		AND (VD.VacationDetailID < @VacationDetailID OR vd.VacationActionID=1)
	ORDER BY VD.VacationDetailID DESC) PR ON PR.VacationID=VacationsDetails.VacationID
	WHERE VacationsDetails.VacationDetailID = @VacationDetailID
END
GO
PRINT N'Creating [dbo].[spGetTransfersByTransferID]...';


GO


CREATE PROC [dbo].[spGetTransfersByTransferID]--12
(
	 @TransferID INT
)
AS
SELECT     Transfers.TransferID, Transfers.EmployeeCareerHistoryID, Transfers.TransferTypeID, 
					Transfers.TransferDate, 
					mic_db.dbo.fn_GregToUmAlqura(convert(date,Transfers.TransferDate)) AS TransferDateUmAlQura,
					Transfers.Destination, Transfers.KSACityID, 
                      Transfers.JobName, 
                      EmployeesCareersHistory.EmployeeCodeID,
                      Transfers.RankName, 
                      Transfers.JobCode, 
                      Transfers.OrganizationName, 
                      Transfers.CareerDegreeName, 
                      TransfersTypes.TransferTypeName, 
                      KSACities.KSACityName
FROM         Transfers INNER JOIN
                      TransfersTypes ON Transfers.TransferTypeID = TransfersTypes.TransferTypeID INNER JOIN
                      EmployeesCareersHistory ON Transfers.EmployeeCareerHistoryID = EmployeesCareersHistory.EmployeeCareerHistoryID  INNER JOIN 
                      vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID=EmployeesCareersHistory.EmployeeCodeID INNER JOIN
                      Employees ON vwEmployeesCodes.EmployeeID = Employees.EmployeeID INNER JOIN
                      KSACities ON Transfers.KSACityID = KSACities.KSACityID
WHERE     (Transfers.TransferID = @TransferID)
GO
PRINT N'Creating [dbo].[spGetStopWorkByID]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetStopWorkByID]
(
	@StopWorkID int
)
AS
BEGIN 

	SELECT StopWorks.StopWorkID, 
		StopWorks.EmployeeCareerHistoryID, 
		vwEmployeesCareersHistory.EmployeeCodeID,
		StopWorks.StopWorkTypeID, 
		StopWorks.StopPoint, 
		StopWorks.StopWorkStartDate,
		StopWorks.StopWorkEndDate,
		mic_db.dbo.fn_GregToUmAlqura(cast(StopWorks.StopWorkStartDate as date)) AS StopWorkStartDateUmAlQura,
		mic_db.dbo.fn_GregToUmAlqura(cast(StopWorks.StopWorkEndDate as date)) AS StopWorkEndDateUmAlQura,
		StopWorks.IsConvicted, 
		StopWorks.CreatedDate, 
		StopWorks.LastUpdatedDate, 
		StopWorksTypes.StopWorkTypeName,  
		StopWorksCategories.StopWorkCategoryName,
		StopWorks.Note,
		dbo.fnGetPeriodBetweenTwoDates(StopWorks.StopWorkStartDate,StopWorks.StopWorkEndDate) AS Period
	FROM StopWorks 
		INNER JOIN StopWorksTypes ON StopWorks.StopWorkTypeID = StopWorksTypes.StopWorkTypeID 
		INNER JOIN vwEmployeesCareersHistory ON StopWorks.EmployeeCareerHistoryID = vwEmployeesCareersHistory.EmployeeCareerHistoryID
		INNER JOIN StopWorksCategories ON StopWorksTypes.StopWorkCategoryID = StopWorksCategories.StopWorkCategoryID	
	WHERE StopWorkID = @StopWorkID
 
END
GO
PRINT N'Creating [dbo].[spGetSickVacationsPaidAmount]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetSickVacationsPaidAmount] 

 
AS
BEGIN
 
	SELECT	Vacations.VacationID,
			VacationsDetails.IsApproved,
			VacationsTypes.VacationTypeName,
			VacationsActions.VacationActionName,
			mic_db.dbo.fn_GregToUmAlqura(VacationsDetails.FromDate) AS VacationStartDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(VacationsDetails.ToDate) AS VacationEndDateUmAlQura,
			dbo.fnGetPeriodBetweenTwoDates(VacationsDetails.FromDate ,VacationsDetails.ToDate) AS VacationPeriod,
			vwEmployeesCodes.EmployeeCodeNo, vwEmployeesCodes.EmployeeNameAr,
			Vacations.IsSickLeaveAmountPaid
	FROM Vacations
	INNER JOIN VacationsTypes ON VacationsTypes.VacationTypeID = Vacations.VacationTypeID
	INNER JOIN VacationsDetails ON Vacations.VacationID = VacationsDetails.VacationID
	INNER JOIN VacationsActions ON VacationsDetails.VacationActionID = VacationsActions.VacationActionID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCareerHistoryID = Vacations.EmployeeCareerHistoryID
	INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID = EmployeesCareersHistory.EmployeeCodeID
	WHERE Vacations.IsSickLeaveAmountPaid = 1
	AND Vacations.VacationTypeID = 4		-- sick leave
	ORDER BY Vacations.VacationID
	
END
GO
PRINT N'Creating [dbo].[spGetScholarshipsByEmployeeCodeID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetScholarshipsByEmployeeCodeID]-- 22915
(
	@EmployeeCodeID int
)
AS
BEGIN

	
	
	--SELECT Scholarships.ScholarshipID,			
	--		ScholarshipsTypes.ScholarshipType,
	--		ScholarshipsActions.ScholarshipActionName,
	--		mic_db.dbo.fn_GregToUmAlqura(ScholarshipsDetails.FromDate) AS ScholarshipStartDateUmAlQura,
	--		mic_db.dbo.fn_GregToUmAlqura(ScholarshipsDetails.ToDate) AS ScholarshipEndDateUmAlQura,
	--		--mic_db.dbo.fn_GregToUmAlqura(DATEADD(DAY,1,Vacations.VacationEndDate)) AS WorkDateUmAlQura,
	--		dbo.fnGetPeriodBetweenTwoDates(ScholarshipsDetails.FromDate ,ScholarshipsDetails.ToDate) AS ScholarshipPeriod
	--FROM Scholarships
	--INNER JOIN ScholarshipsTypes ON ScholarshipsTypes.ScholarshipTypeID = Scholarships.ScholarshipTypeID
	--INNER JOIN ScholarshipsDetails ON Scholarships.ScholarshipID = ScholarshipsDetails.ScholarshipID
	--INNER JOIN ScholarshipsActions ON ScholarshipsDetails.ScholarshipActionID = ScholarshipsActions.ScholarshipActionID
	----INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCodeID = Scholarships.EmployeeCodeID
	--INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID = Scholarships.EmployeeCodeID
	--WHERE vwEmployeesCodes.EmployeeCodeID = @EmployeeCodeID
	--ORDER BY Scholarships.ScholarshipID

	SELECT Scholarships.ScholarshipID,			
			ScholarshipsTypes.ScholarshipType,
			--ScholarshipsActions.ScholarshipActionName,
			mic_db.dbo.fn_GregToUmAlqura(Scholarships.ScholarshipStartDate) AS ScholarshipStartDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(Scholarships.ScholarshipEndDate) AS ScholarshipEndDateUmAlQura,
			--mic_db.dbo.fn_GregToUmAlqura(DATEADD(DAY,1,Vacations.VacationEndDate)) AS WorkDateUmAlQura,
			dbo.fnGetPeriodBetweenTwoDates(Scholarships.ScholarshipStartDate ,Scholarships.ScholarshipEndDate) AS ScholarshipPeriod
	FROM Scholarships
	INNER JOIN ScholarshipsTypes ON ScholarshipsTypes.ScholarshipTypeID = Scholarships.ScholarshipTypeID
	--INNER JOIN ScholarshipsDetails ON Scholarships.ScholarshipID = ScholarshipsDetails.ScholarshipID
	--INNER JOIN ScholarshipsActions ON ScholarshipsDetails.ScholarshipActionID = ScholarshipsActions.ScholarshipActionID
	--INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCodeID = Scholarships.EmployeeCodeID
	INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID = Scholarships.EmployeeCodeID
	WHERE vwEmployeesCodes.EmployeeCodeID = @EmployeeCodeID
	ORDER BY Scholarships.ScholarshipID

	
	
END
GO
PRINT N'Creating [dbo].[spGetScholarshipByScholarshipDetailID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetScholarshipByScholarshipDetailID] --93
(
	@ScholarshipDetailID INT = 23
)
AS
BEGIN

	SELECT  Scholarships.ScholarshipID,
			mic_db.dbo.fn_GregToUmAlqura(ScholarshipsDetails.FromDate) AS FromDateUmAlQura,
			mic_db.dbo.fn_GregToUmAlqura(ScholarshipsDetails.ToDate) AS ToDateUmAlQura,
			ScholarshipsDetails.FromDate,
			ScholarshipsDetails.ToDate,
			--mic_db.dbo.fn_GregToUmAlqura(DATEADD(DAY,1,ScholarshipsDetails.ToDate)) AS WorkDateUmAlQura,
			--DATEADD(DAY,1,ScholarshipsDetails.ToDate) AS WorkDate,
		
			ScholarshipsDetails.Notes,
			dbo.fnGetPeriodBetweenTwoDates(ScholarshipsDetails.FromDate,ScholarshipsDetails.ToDate) AS ScholarshipPeriod,
			ScholarshipsActions.ScholarshipActionName,
			ScholarshipsTypes.ScholarshipType,
			vwEmployeesCodes.EmployeeCodeNo, 
			vwEmployeesCodes.EmployeeCodeID,
			vwEmployeesCodes.EmployeeIDNo, 
			vwEmployeesCodes.EmployeeNameAr,
			OrganizationsStructures.OrganizationName,
			Ranks.RankName		
			
	FROM Scholarships
	INNER JOIN ScholarshipsTypes ON Scholarships.ScholarshipTypeID = ScholarshipsTypes.ScholarshipTypeID
	INNER JOIN ScholarshipsDetails ON Scholarships.ScholarshipID = ScholarshipsDetails.ScholarshipID 
	INNER JOIN ScholarshipsActions ON ScholarshipsDetails.ScholarshipActionID = ScholarshipsActions.ScholarshipActionID
	INNER JOIN EmployeesCareersHistory ON EmployeesCareersHistory.EmployeeCodeID = Scholarships.EmployeeCodeID
	INNER JOIN vwEmployeesCodes ON vwEmployeesCodes.EmployeeCodeID = Scholarships.EmployeeCodeID
	INNER JOIN OrganizationsJobs ON OrganizationsJobs.OrganizationJobID = EmployeesCareersHistory.OrganizationJobID
	INNER JOIN OrganizationsStructures ON OrganizationsJobs.OrganizationID = OrganizationsStructures.OrganizationID
	INNER JOIN Ranks ON Ranks.RankID = OrganizationsJobs.RankID
	WHERE ScholarshipsDetails.ScholarshipDetailID = @ScholarshipDetailID
END
GO
PRINT N'Creating [dbo].[vwOrganizationsJobs].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "JobsGeneralGroups"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 114
               Right = 228
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "JobsGroups"
            Begin Extent = 
               Top = 6
               Left = 266
               Bottom = 114
               Right = 440
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "JobsCategories"
            Begin Extent = 
               Top = 6
               Left = 478
               Bottom = 114
               Right = 647
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Jobs"
            Begin Extent = 
               Top = 6
               Left = 685
               Bottom = 114
               Right = 849
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "OrganizationsJobs"
            Begin Extent = 
               Top = 6
               Left = 887
               Bottom = 114
               Right = 1056
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "OrganizationsStructures"
            Begin Extent = 
               Top = 6
               Left = 1094
               Bottom = 114
               Right = 1278
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Ranks"
            Begin Extent = 
               Top = 114
               Left = 38
               Bottom = 222
               Right = 202
           ', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwOrganizationsJobs';


GO
PRINT N'Creating [dbo].[vwOrganizationsJobs].[MS_DiagramPane2]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane2', @value = N' End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "RanksCategories"
            Begin Extent = 
               Top = 114
               Left = 240
               Bottom = 222
               Right = 416
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwOrganizationsJobs';


GO
PRINT N'Creating [dbo].[vwOrganizationsJobs].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 2, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwOrganizationsJobs';


GO
PRINT N'Creating [dbo].[vwEmployeesCareers].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "OrganizationsJobs"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 125
               Right = 216
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "EmployeesCareersHistory"
            Begin Extent = 
               Top = 6
               Left = 254
               Bottom = 125
               Right = 467
            End
            DisplayFlags = 280
            TopColumn = 9
         End
         Begin Table = "OrganizationsStructures"
            Begin Extent = 
               Top = 6
               Left = 505
               Bottom = 125
               Right = 698
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Ranks"
            Begin Extent = 
               Top = 126
               Left = 38
               Bottom = 245
               Right = 211
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "vwEmployeesCodes"
            Begin Extent = 
               Top = 126
               Left = 249
               Bottom = 245
               Right = 475
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Jobs"
            Begin Extent = 
               Top = 126
               Left = 513
               Bottom = 245
               Right = 686
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "CareersHistoryTypes"
            Begin Extent = 
               Top = 6
               Left = 736
               Bottom = 95
               Right =', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwEmployeesCareers';


GO
PRINT N'Creating [dbo].[vwEmployeesCareers].[MS_DiagramPane2]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane2', @value = N' 943
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "CareersDegrees"
            Begin Extent = 
               Top = 96
               Left = 736
               Bottom = 185
               Right = 920
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwEmployeesCareers';


GO
PRINT N'Creating [dbo].[vwEmployeesCareers].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 2, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwEmployeesCareers';


GO
PRINT N'Creating [dbo].[vwCurrentEmployeesCareer].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = -288
         Left = 0
      End
      Begin Tables = 
         Begin Table = "OrganizationsJobs"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 125
               Right = 247
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "EmployeesCareersHistory"
            Begin Extent = 
               Top = 126
               Left = 38
               Bottom = 245
               Right = 251
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "OrganizationsStructures"
            Begin Extent = 
               Top = 246
               Left = 38
               Bottom = 365
               Right = 231
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Ranks"
            Begin Extent = 
               Top = 6
               Left = 285
               Bottom = 125
               Right = 477
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "vwEmployeesCodes"
            Begin Extent = 
               Top = 366
               Left = 38
               Bottom = 485
               Right = 264
            End
            DisplayFlags = 280
            TopColumn = 15
         End
         Begin Table = "Jobs"
            Begin Extent = 
               Top = 126
               Left = 289
               Bottom = 245
               Right = 462
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
   ', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwCurrentEmployeesCareer';


GO
PRINT N'Creating [dbo].[vwCurrentEmployeesCareer].[MS_DiagramPane2]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane2', @value = N'      Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwCurrentEmployeesCareer';


GO
PRINT N'Creating [dbo].[vwCurrentEmployeesCareer].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 2, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwCurrentEmployeesCareer';


GO
PRINT N'Creating [dbo].[vwEmployeesCodes].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "EmployeesCodes"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 125
               Right = 211
            End
            DisplayFlags = 280
            TopColumn = 1
         End
         Begin Table = "Employees"
            Begin Extent = 
               Top = 6
               Left = 249
               Bottom = 125
               Right = 475
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwEmployeesCodes';


GO
PRINT N'Creating [dbo].[vwEmployeesCodes].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwEmployeesCodes';


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
