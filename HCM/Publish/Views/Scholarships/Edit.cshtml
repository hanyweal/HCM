@model HCM.Models.ScholarshipsViewModel
@using HCM.Classes.Enums
@using HCMBLL.Enums
@using HCM.Models
@using HCM.Classes.Extensions

@{
    ViewBag.Title = Resources.Globalization.EditEmployeeScholarshipText;
}

<script type="text/javascript">

    function OkFunction() {
        var iframe = $("#divReportModal .modal-body #iframeReportContent");
        iframe.attr('src', '@Url.Content("~/Scholarships/PrintScholarship/")' + '@Model.ScholarshipID');
        ShowModal("#divReportModal");
    }

    function BindingScholarshipType(ScholarshipType) {
        if (ScholarshipType == '@Convert.ToInt32(ScholarshipsTypesEnum.Individual)') {
            $('.internalTraining').hide();
            $('.externalTraining').hide();
            $('.individual').show();
        }
        else if (ScholarshipType == '@Convert.ToInt32(ScholarshipsTypesEnum.Training)') {
            $('.individual').hide();
            $('.externalTraining').hide();
            $('.internalTraining').show();
        }
        else if (ScholarshipType == '@Convert.ToInt32(ScholarshipsTypesEnum.ExternalTraining)') {
            $('.individual').hide();
            $('.internalTraining').hide();
            $('.externalTraining').show();
        }
    }

    $(document).ready(function () {

        var ScholarshipType = '@Model.ScholarshipType.ScholarshipTypeID';
        BindingScholarshipType(ScholarshipType);

        $('#ddlScholarshipTypes').on('change', function (event) {
            var ScholarshipType = $('#ddlScholarshipTypes').val();
            BindingScholarshipType(ScholarshipType);
        });

    });

    function OnSuccess() {
        $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Success, Globals.Utilities.RemoveSpace(@Resources.Globalization.SavedDoneAlertText), "OkFunction")');
    }

    function OnFailure() {
        $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Failure, "Error")');
    }

    function closeEmployeesPopup(EmployeeCodeID) {
        GetEmployeeData(EmployeeCodeID);
        GetEmployeeCurrentQualification(EmployeeCodeID);
    }

    function GetEmployeeCurrentQualification(EmployeeCodeID) {
        $("#txtEmployeeCurrentQualification").val("");
        $.ajax({
            type: "GET"
            , dataType: "json"
            , contentType: "application/json; charset=utf-8"
            , url: "/Employees/GetEmployeeCurrentQualification/" + EmployeeCodeID
            //, data: "{ 'id' : '" + EmployeeCodeID + "'}"
            , success: function (d) {
                //debugger;
                $("#txtEmployeeCurrentQualification").val(d.data.EmployeeCurrentQualification);
            }
            , error: function (xhr, status, error) {
                alert(error.message);
            }
        });
    }
</script> 
<div class="panel panel-default" style="padding:0px">
    <div class="panel-heading">
        <div class="row">
            <div class="col-md-9">
                @Resources.Globalization.EditEmployeeScholarshipDescText
            </div>
            <div class="col-md-3" style="text-align:left">
                <a id="OpenBusinessConditions">

                </a>
            </div>
        </div>
    </div>
    <div class="panel-body">
        @using (Ajax.BeginForm("Edit", "Scholarships", new AjaxOptions()
        {
            OnSuccess = "OnSuccess",
            OnFailure = "OnFailure",
            HttpMethod = "POST",
        }))
        {
            @Html.AntiForgeryToken()

            @Html.ValidationSummary(true)
            
            <span class="control-label">@Resources.Globalization.EmployeesText</span>
            @Html.Partial("~/Views/Shared/_EmployeesPopup.cshtml",  Model.Employee.GetEmployee())
            <table class="table table-responsive table-condensed">
                <tr>
                    <td>
                        <label class="control-label">@Resources.Globalization.EmployeeCurrentQualificationText</label>                        
                    </td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td>
                        <input type="text" id="txtEmployeeCurrentQualification" class="form-control" readonly="readonly" /> 
                    </td>
                    <td></td>
                    <td></td>
                </tr>
            </table>
            <table class="table table-responsive table-condensed">
                <tbody>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.ScholarshipType, new { @class = "control-label" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DropDownListFor(model => model.ScholarshipType.ScholarshipTypeID, new SelectList(new HCMBLL.ScholarshipsTypesBLL().GetScholarshipsTypes(), "ScholarshipTypeID", "ScholarshipType"), new { @id = "ddlScholarshipTypes", @style = "width:100%" })
                            @Html.HiddenFor(model => model.ScholarshipID)
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.ScholarshipStartDate, new { @class = "control-label"})
                        </td>
                        <td>
                            @Html.LabelFor(model => model.ScholarshipPeriod, new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.LabelFor(model => model.ScholarshipEndDate, new { @class = "control-label" })
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.TextBoxFor(model => model.ScholarshipStartDate, new   
                                                                                    { 
                                                                                        @class = "form-control", 
                                                                                        @id = "txtScholarshipStartDate", 
                                                                                        @readonly = "readonly",
                                                                                        @Value = Model.ScholarshipStartDate.ToString(@System.Configuration.ConfigurationManager.AppSettings["DateFormat"])
                                                                                    })
                            @Html.ValidationMessageFor(model => model.ScholarshipStartDate, "", new { @class = "text-danger" })
                        </td>
                        <td>             
                            @Html.TextBoxFor(model => model.ScholarshipPeriod, new { @class = "form-control", @id = "txtScholarshipPeriod", @type = "number", @readonly = "readonly" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.ScholarshipEndDate, new 
                                                                                    {
                                                                                        @class = "form-control",
                                                                                        @id = "txtScholarshipEndDate", 
                                                                                        @readonly = "readonly",
                                                                                        @Value = Model.ScholarshipEndDate.ToString(@System.Configuration.ConfigurationManager.AppSettings["DateFormat"]) 
                                                                                    })
                        </td>
                    </tr>

                    <tr class="individual internalTraining">
                        <td>
                            @Html.LabelFor(model => model.Location, new { @class = "control-label" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr class="individual internalTraining">
                        <td>
                            @Html.TextBoxFor(model => model.Location, new { @class = "form-control", @id = "txtIndividualLocation" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr class="externalTraining">
                        <td>
                            @Html.LabelFor(model => model.Country, new { @class = "control-label" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr class="externalTraining">
                        <td>
                            @Html.TextBoxFor(model => model.Country, new { @class = "form-control", @id = "txtIndividualLocation" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr class="individual internalTraining">
                        <td colspan="3">
                            @Html.LabelFor(model => model.ScholarshipReason, new { @class = "control-label" })
                        </td>
                    </tr>
                    <tr class="individual internalTraining">
                        <td colspan="3">
                            @Html.TextAreaFor(model => model.ScholarshipReason, new { @class = "form-control", @id = "txtScholarshipReason" })
                        </td>
                    </tr>
                    <tr class="individual externalTraining">
                        <td>
                            @Html.LabelFor(model => model.QualificationsDegrees, new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.LabelFor(model => model.Qualifications, new { @class = "control-label" })
                        </td>
                        <td></td>
                    </tr>
                    <tr class="individual externalTraining">
                        <td>
                            @Html.DropDownListFor(model => model.QualificationDegree.QualificationDegreeID, new SelectList(new HCMBLL.QualificationsDegreesBLL().GetQualificationsDegrees(), "QualificationDegreeID", "QualificationDegreeName"), new { @id = "ddlQualificationDegree", @style = "width:100%", @onchange = "GetQualificationsByDegree()" })
                        </td>
                        <td>
                            @Html.DropDownListFor(model => model.Qualification.QualificationID, new SelectList(new HCMBLL.QualificationsBLL().GetQualifications(), "QualificationID", "QualificationName"), new { @id = "ddlQualification", @style = "width:100%" })
                        </td>
                        <td></td>
                    </tr>
                </tbody>
            </table> 
            <table class="table table-responsive table-condensed">
                <tr>
                    <td>
                        <div class="form-group">
                            <center>
                                <input type="submit" class="btn btn-default" name="BtnSave" value="@Resources.Globalization.SaveText" />
                            </center>
                        </div>
                    </td>
                </tr>
            </table>
        }
    </div>
    <div class="panel-footer">
        @using (Html.BeginForm("Index", "Scholarships"))
        {
            <input type="submit" class="btn btn-default" name="BtnBack" value="@Resources.Globalization.BacktoListText" />
        }
    </div>
</div>


@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@




