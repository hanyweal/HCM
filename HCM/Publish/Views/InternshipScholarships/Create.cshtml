@model HCM.Models.InternshipScholarshipsViewModel
@using HCM.Classes.Enums
@using HCMBLL.Enums
@using HCM.Models

@{
    ViewBag.Title = Resources.Globalization.AddNewInternshipScholarshipText;
}

<script type="text/javascript">

    var InternshipScholarshipID = 0;
    $(document).ready(function () {

        $('.internal').show();
        $('.external').hide();
        BindInternshipScholarshipEmployees();

        var PreviousInternshipScholarshipKind;
        $('#ddlInternshipScholarshipKinds').on('focus', function () {
            PreviousInternshipScholarshipKind = this.value;
        }).change(function () {
            var rowsCount = GetRowsCount("#tblInternshipScholarshipEmployees");
            if (rowsCount > 0) {
                $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Warning, Globals.Utilities.RemoveSpace(@Resources.Globalization.WarningCannotChangeBecauseEmployeeAdded))');
                this.value = PreviousInternshipScholarshipKind;
            }
            else {
                PreviousInternshipScholarshipKind = this.value;
            }
        });

        var PreviousInternshipScholarshipStartDate;
        $('#txtInternshipScholarshipStartDate').on('focus', function () {
            PreviousInternshipScholarshipStartDate = this.value;
        }).calendarsPicker({
            calendar: jQuery.calendars.instance('ummalqura', 'ar'),
            onSelect: customRange,
            commandsAsDateFormat: true,
            dateFormat: '@System.Configuration.ConfigurationManager.AppSettings["DateFormatRTL"]',
            onSelect: function (dates) {
                var rowsCount = GetRowsCount("#tblInternshipScholarshipEmployees");
                if (rowsCount > 0) {
                    $('#txtInternshipScholarshipStartDate').val(PreviousInternshipScholarshipStartDate);
                    $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Warning, Globals.Utilities.RemoveSpace(@Resources.Globalization.WarningCannotChangeBecauseEmployeeAdded))');
                }
                else {
                    GetInternshipScholarshipEndDate();
                }
            }
        });


        $("#btnAdd").click(function () {
            var Employee = {};
            if ($("#txtEmployeeCodeNo").val() != '') {
                Employee = {
                    EmployeeCareerHistory: {
                        EmployeeCareerHistoryID: $("#hdnFldEmployeeCareerHistoryID").val(),
                        EmployeeCode: {
                            EmployeeCodeID: $("#hdnFldEmployeeCodeID").val(),
                            EmployeeCodeNo: $("#txtEmployeeCodeNo").val(),
                            Employee: {
                                FirstNameAr: $("#txtEmployeeNameAr").val()
                            }
                        }
                    },
                    IsPassengerOrderCompensation: $('#chkIsPassengerOrderCompensation').prop("checked")
                }
            }
            
            var InternshipScholarshipDetailRequest =
            {
                InternshipScholarshipStartDate: $('#txtInternshipScholarshipStartDate').val(),
                InternshipScholarshipEndDate: $('#txtInternshipScholarshipEndDate').val(),
                InternshipScholarshipPeriod: $('#txtInternshipScholarshipPeriod').val(),
                InternshipScholarshipDistancePeriod: 0, //$('#txtInternshipScholarshipDistancePeriod').val(),                
                InternshipScholarshipDetailRequest: Employee,
             
            };

            $.ajax({

                type: "POST"
                //, dataType: "json"     :  if you pass 'dataType: "json"' then there is always parseerror from .ajax call and return type is 'HttpResponseMessage'
                , contentType: "application/json; charset=utf-8"
                , url: "@Url.Content("~/InternshipScholarships/CreateInternshipScholarshipDetail")"
                , data: JSON.stringify(InternshipScholarshipDetailRequest)
                , success: function () {
                    AddingSuccess();
                }
                , error: function (xhr, status, error) {
                    AddingFailure();
                }
            });
        });

        $('#ddlInternshipScholarshipTypes').on('change', function (event) {
            var InternshipScholarshipType = $('#ddlInternshipScholarshipTypes').val();
            if (InternshipScholarshipType == '@Convert.ToInt32(InternshipScholarshipsTypesEnum.Internal)') {
                $('.internal').show();
                $('.external').hide();
            }
            else {
                $('.internal').hide();
                $('.external').show();
            }
        });

        $('#txtInternshipScholarshipPeriod').on('change', function (event) {
            GetInternshipScholarshipEndDate();
        });

        GetCities();
    });

    function GetInternshipScholarshipEndDate() {
        var InternshipScholarshipStartDate = $("#txtInternshipScholarshipStartDate").val();
        var InternshipScholarshipPeriod = $("#txtInternshipScholarshipPeriod").val();
        if (InternshipScholarshipStartDate != '' && InternshipScholarshipPeriod != '') {
            $.ajax({
                type: "POST"
                //, contentType: "application/json; charset=utf-8"
               , url: "@Url.Content("~/InternshipScholarships/GetInternshipScholarshipEndDate/")" + InternshipScholarshipPeriod + "/" + InternshipScholarshipStartDate
               , success: function (d) {
                   $('#txtInternshipScholarshipEndDate').val(d.data);
                   ResetEmployee();
               }
                , error: function (xhr, status, error) {
                    AddingFailure();
                }
            });
        }
        else
            $('#txtInternshipScholarshipEndDate').val('');
    }

    function AddingSuccess() {
        $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Success, Globals.Utilities.RemoveSpace(@Resources.Globalization.AddingDoneText))');
        BindInternshipScholarshipEmployees();
        ResetEmployee();
    }

    function ResetEmployee() {
        ResetEmployeeData();
    }

    function AddingFailure() {
        OnFailure();
    }

    function BindInternshipScholarshipEmployees() {
        var InternshipScholarshipEmployees;
        $.ajax({
            type: 'POST',
            dataType: 'json',
            contentType: "application/json; charset=utf-8",
            url: "@Url.Content("~/InternshipScholarships/GetInternshipScholarshipEmployees/")",
            success: function (result) {
                $("#tblInternshipScholarshipEmployees").DataTable({
                    destroy: true,
                    "searching": false,
                    "ordering": false,
                    "paging": false,
                    "data": result.data,
                    "columns": [
                        {
                            "data": "EmployeeCareerHistory.EmployeeCode.EmployeeCodeNo",
                            "autowidth": true
                        },
                        {
                            "data": "EmployeeCareerHistory.EmployeeCode.Employee.FirstNameAr",
                            "autowidth": true
                        },
                        {
                            "data": "IsPassengerOrderCompensation",
                            "autowidth": false,
                            "render": RenderCheckBox
                        },
                        {
                            "data": "EmployeeCareerHistory.EmployeeCode.EmployeeCodeNo",
                            "width": "5%",
                            "sorting": false,
                            "render": function (data, type, row) {
                                Url = 'RemoveEmployeeFromInternshipScholarship(' + data + ');';
                                return '<a onclick="' + Url + '"><span Class="glyphicon glyphicon-remove" /></a>'
                            }
                        }
                    ]
                });

                var rowsCount = GetRowsCount("#tblInternshipScholarshipEmployees");
                if (rowsCount > 0) {
                    $('#txtInternshipScholarshipPeriod').prop('readonly', true);
                }
                else {
                    $('#txtInternshipScholarshipPeriod').prop('readonly', false);
                    //$('#ddlInternshipScholarshipKinds').removeAttr('disabled');
                }
            }
        });

    }

    function RemoveEmployeeFromInternshipScholarship(EmployeeCodeNo) {
        $.confirm({
            confirmButton: '@Resources.Globalization.ConfirmButtonText',
            cancelButton: '@Resources.Globalization.CancelButtonText',
            animation: 'zoom',
            content: '@Resources.Globalization.DeleteCofirmationMessageText',
            title: '@Resources.Globalization.CofirmationMessageTitle',
            buttons: {
                confirm: {
                    action: function () {

                        var InternshipScholarshipDetailRequest =
                            {
                                InternshipScholarshipDistancePeriod: $('#txtInternshipScholarshipDistancePeriod').val(),
                                InternshipScholarshipDetailRequest: {
                                    EmployeeCareerHistory: {
                                        EmployeeCode: {
                                            EmployeeCodeNo: EmployeeCodeNo
                                        }
                                    }
                                }
                            };

                        $.ajax({
                            type: "POST"
                            //, dataType: "json"
                            , contentType: "application/json; charset=utf-8"
                            , url: "@Url.Action("RemoveEmployeeFromInternshipScholarship", "InternshipScholarships")"
                            , data: JSON.stringify(InternshipScholarshipDetailRequest)
                            , success: function () {
                                $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Success, Globals.Utilities.RemoveSpace(@Resources.Globalization.DeletedDoneAlertText))');
                                BindInternshipScholarshipEmployees();
                            }
                        , error: function (xhr, status, error) {
                            $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Failure, "/Error")');
                        }
                        });
                    },
                    btnClass: 'btn-blue',
                    text: '@Resources.Globalization.ConfirmButtonText',
                },
                cancel: {
                    action: function () { },
                    text: '@Resources.Globalization.CancelButtonText',
                },
            },
        });
    }

    function closeEmployeesPopup(EmployeeCodeID) {
        GetEmployeeData(EmployeeCodeID);
    }

    function OnSuccess(data) {
        Reset();
        $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Success, Globals.Utilities.RemoveSpace(@Resources.Globalization.SavedDoneAlertText),"OkFunction")');
        InternshipScholarshipID = data.InternshipScholarshipID;
    }

    function OnFailure() {
        $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Failure, "Error")');
    }

    function Reset() {
        $('#ddlInternshipScholarshipTypes').val('@Convert.ToInt32(InternshipScholarshipsTypesEnum.Internal)'); 
        $('#txtInternshipScholarshipStartDate').val('');
        $('#txtInternshipScholarshipEndDate').val('');
        $('#txtInternshipScholarshipReason').val('');
        $('#txtInternshipScholarshipPeriod').val('1');
        $('.internal').show();
        $('.external').hide();
        ResetEmployee();
        ResetEmployeeFromSession();
        BindInternshipScholarshipEmployees();
    }

    function ResetEmployeeFromSession() {
        $.ajax({
            type: "POST"
            //, contentType: "application/json; charset=utf-8"
                , url: "@Url.Action("ResetEmployeeFromSession", "InternshipScholarships")"
                , success: function () {
                }
            , error: function (xhr, status, error) {
                OnFailure();
            }
        });
    }

    function GetCities() {
        var KSARegionID = $("#ddlKSARegions").val();
        $.ajax({
            type: "get"
            , dataType: "json"
            , url: "/KSACities/GetKSACities/" + KSARegionID
            , success: function (d) {
                $("#ddlKSACities").html("");
                var cities = d.data;
                $.each(cities, function (i, city) {
                    $("#ddlKSACities").append($('<option></option>').val(city.KSACityID).html(city.KSACityName));
                });
            }
            , error: function (xhr, status, error) {
                alert(error.message);
            }
        });
    }

    function OkFunction() {
        var iframe = $("#divReportModal .modal-body #iframeReportContent");
        iframe.attr('src', '@Url.Content("~/InternshipScholarships/PrintInternshipScholarship/")' + InternshipScholarshipID);
        ShowModal("#divReportModal");
    }
</script>

<p style="font-size:larger">@Resources.Globalization.AddNewInternshipScholarshipText</p>
<div class="panel panel-default" style="padding:0px">
    <div class="panel-heading">
        <div class="row">
            <div class="col-md-9">
                @Resources.Globalization.AddNewInternshipScholarshipDescText
            </div>
            <div class="col-md-3" style="text-align:left">
                @*@Html.Partial("~/Views/Shared/_BusinessRulesList.cshtml", new List<BusinessRulesViewModel>())*@
                @Html.Action("Index", "BusinessRules", new { id = (Int32)BusinessSubCategoriesEnum.InternshipScholarships })
            </div>
        </div>
    </div>
    <div class="panel-body">
        @using (Ajax.BeginForm("Create", "InternshipScholarships", new AjaxOptions()
        {
            OnSuccess = "OnSuccess",
            OnFailure = "OnFailure",
            HttpMethod = "POST",
        }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            <span class="control-label">@Resources.Globalization.InternshipScholarshipBasicInfoText</span><br />
            <table class="table table-responsive table-condensed table-striped">
                <tbody>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipsTypes, new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipLocation, new { @class = "control-label" })
                        </td>
                        <td>
                            @*@Html.LabelFor(model => model.InternshipScholarshipDistancePeriod, new { @class = "control-label" })*@
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DropDownListFor(model => model.InternshipScholarshipType.InternshipScholarshipTypeID, new SelectList(new HCMBLL.InternshipScholarshipsTypesBLL().GetInternshipScholarshipsTypes(), "InternshipScholarshipTypeID", "InternshipScholarshipTypeName"), new { @id = "ddlInternshipScholarshipTypes", @style = "width:100%" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.InternshipScholarshipLocation, new { @class = "form-control" })
                        </td>
                        <td>
                            @*@Html.TextBoxFor(model => model.InternshipScholarshipDistancePeriod, new { @class = "form-control", @id = "txtInternshipScholarshipDistancePeriod", @type = "number", @value = "1" })
                                @Html.ValidationMessageFor(model => model.InternshipScholarshipDistancePeriod, "", new { @class = "text-danger" })*@
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipStartDate, new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipPeriod, new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipEndDate, new { @class = "control-label" })
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.TextBoxFor(model => model.InternshipScholarshipStartDate, new { @class = "form-control", @id = "txtInternshipScholarshipStartDate", @readonly = "readonly" })       @*TxtHijriPicker*@
                            @Html.ValidationMessageFor(model => model.InternshipScholarshipStartDate, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            <input type="number" id="txtInternshipScholarshipPeriod" min="1" class="form-control" value="1" />
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.InternshipScholarshipEndDate, new { @class = "form-control", @id = "txtInternshipScholarshipEndDate", @readonly = "readonly" })
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipReason, new { @class = "control-label" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            @Html.TextAreaFor(model => model.InternshipScholarshipReason, new { @class = "form-control", @id = "txtInternshipScholarshipReason" })
                        </td>
                    </tr>
                    <tr class="internal">
                        <td>
                            @Html.LabelFor(model => model.KSARegions, new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.LabelFor(model => model.KSACities, new { @class = "control-label" })
                        </td>
                        <td></td>
                    </tr>
                    <tr class="internal">
                        <td>
                            @Html.DropDownListFor(model => model.KSARegion.KSARegionID, new SelectList(new HCMBLL.KSARegionsBLL().GetKSARegions(), "KSARegionID", "KSARegionName"), new { @id = "ddlKSARegions", @style = "width:100%", @onchange = "GetCities()" })
                        </td>
                        <td>
                            @Html.DropDownListFor(model => model.KSACity.KSACityID, new SelectList(new HCMBLL.KSACitiesBLL().GetKSACities(), "KSACityID", "KSACityName"), new { @id = "ddlKSACities", @style = "width:100%" })
                        </td>
                        <td></td>
                    </tr>
                    <tr class="external">
                        <td>
                            @Html.LabelFor(model => model.Countries, new { @class = "control-label" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr class="external">
                        <td>
                            @Html.DropDownListFor(model => model.Country.CountryID, new SelectList(new HCMBLL.CountriesBLL().GetCountries(), "CountryID", "CountryName"), new { @id = "ddlCountries", @style = "width:100%" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>


            <span class="control-label">@Resources.Globalization.EmployeesText</span>
            @Html.Partial("~/Views/Shared/_EmployeesPopup.cshtml", new EmployeesViewModel() { })


            <div class="row">
                <div class="col-md-10">
                    @Html.CheckBoxFor(c => c.InternshipScholarshipDetailRequest.IsPassengerOrderCompensation, new { @id = "chkIsPassengerOrderCompensation" })
                    @Html.LabelFor(c => c.InternshipScholarshipDetailRequest.IsPassengerOrderCompensation, Resources.Globalization.IsPassengerOrderCompensation)
                </div>
                <div class="col-md-2 text-right">
                    <input id="btnAdd" type="button" class="btn btn-default" value="@Resources.Globalization.AddText" />
                </div>

            </div>

            <table id="tblInternshipScholarshipEmployees" class="table table-responsive table-hover">
                <thead>
                    <tr>
                        <td>
                            @Resources.Globalization.EmployeeCodeNoText
                        </td>
                        <td>@Resources.Globalization.EmployeeNameArText</td>
                        <td>
                            @Resources.Globalization.IsPassengerOrderCompensation؟
                        </td>
                        <td>
                        </td>
                    </tr>
                </thead>
            </table>

            <table class="table table-responsive table-condensed">
                <tr>
                    <td>
                        <div class="form-group">
                            <center>
                                <input type="submit" class="btn btn-default" name="BtnSave" value="@Resources.Globalization.SaveText" />
                                <input type="reset" class="btn btn-default" value="@Resources.Globalization.ResetText" onclick="Reset();" />
                            </center>
                        </div>
                    </td>
                </tr>
            </table>
        }
    </div>
    <div class="panel-footer">
        @using (Html.BeginForm("Index", "InternshipScholarships"))
        {
            <input type="submit" class="btn btn-default" name="BtnBack" value="@Resources.Globalization.BacktoListText" />
        }
    </div>
</div>

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@