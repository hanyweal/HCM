@model HCM.Models.GovernmentFundsViewModel
@using HCM.Models;
@using HCM.Classes.Enums;
@using HCMBLL.Enums
@using HCM.Classes.Extensions

@{
    ViewBag.Title = Resources.Globalization.DeactivateGovernmentFundsText;
}
    <script type="text/javascript">
    $(document).ready(function () {
        showSponserDependOnGovernmentDeductionType();
        @*$('#txtDeactiveDate').on('focus', function () {
        }).calendarsPicker({
            calendar: jQuery.calendars.instance('ummalqura', 'ar'),
            //onSelect: customRange,
            commandsAsDateFormat: true,
            dateFormat: '@System.Configuration.ConfigurationManager.AppSettings["DateFormatRTL"]',
            onSelect: function (dates) {
                GetGregDate();
            }
        });*@
        $('#txtDeactiveGorgDate').on('focus', function () {
            }).calendarsPicker({
                calendar: jQuery.calendars.instance('gregorian', 'en'),
                onSelect: customRange,
                commandsAsDateFormat: true,
                dateFormat: '@System.Configuration.ConfigurationManager.AppSettings["DateFormatRTL"]',
                onSelect: function (dates) {
                    GetHijriDate();
                }
       });
    });

    function showSponserDependOnGovernmentDeductionType() {
        var GovernmentDeductionType = '@Model.GovernmentDeductionType.GovernmentDeductionTypeID';//$('#ddlGovernmentDeductionsTypes').val();
        if (GovernmentDeductionType == '@Convert.ToInt32(GovernmentDeductionsTypesEnum.Sponser)') {
            $('.sponser').show();
        }
        else {
            $('.sponser').hide();
        }
    }

    var GovernmentFundID = 0;
    function OnSuccess(data) {
        $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Success, Globals.Utilities.RemoveSpace(@Resources.Globalization.SavedDoneAlertText),"OkFunction")');
        GovernmentFundID = data.GovernmentFundID;
    }

    function OnFailure() {
        $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Failure, "Error")');
    }

    function closeEmployeesPopup(EmployeeCodeID) {
        GetEmployeeData(EmployeeCodeID);
    }

    function OkFunction() {
        if ('@Model.IsActive' == "False" || GovernmentFundID != 0) {
            GovernmentFundID = '@Model.GovernmentFundID';
            var iframe = $("#divReportModal .modal-body #iframeReportContent");
            iframe.attr('src', '@Url.Content("~/GovernmentFunds/PrintGovernmentFundsDeactivation/")' + GovernmentFundID);
            ShowModal("#divReportModal");
        }
        else
        {
            $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Failure, Globals.Utilities.RemoveSpace(@Resources.Globalization.ValidationGovernmentFundsNotDeactivatedText))');
        }
        }
        function GetHijriDate() {
            var FromDt = $("#txtDeactiveGorgDate").val();
            if (FromDt != '') {
                var fromDate = RenderDate($("#txtDeactiveGorgDate").val());
                $('#txtDeactiveDate').val(fromDate);
            }
            else
                $('#txtDeactiveDate').val('');
        }
        @*function GetGregDate() {
            var FromDt = $("#txtDeactiveDate").val();
        if (FromDt != '' ) {
            $.ajax({
                type: "Get",
                url: "@Url.Content("~/EmployeeExperiencesWithDetails/GetGregDate/")" + FromDt,
                success: function (d) {
                    $('#txtDeactiveGorgDate').val(d.Data.data);
                },
                error: function (xhr, status, error) {
                    AddingFailure();
                }
            });
        }
        else
            $('#txtDeductionStartDate').val('');
        }*@
    </script>
<p style="font-size:larger">@Resources.Globalization.DeactivateGovernmentFundsText</p>
<div class="panel panel-default" style="padding:0px">
    <div class="panel-heading">
        <div class="row">
            <div class="col-md-9">
                @Resources.Globalization.DeactivateGovernmentFundsDescText
            </div>
            <div class="col-md-3" style="text-align:left">
                @Html.Action("Index", "BusinessRules", new { id = (Int32)BusinessSubCategoriesEnum.GovernmentFunds })
            </div>
        </div>
    </div>
    <div class="panel-body">
        @using (Ajax.BeginForm("Deactivation", "GovernmentFunds", new AjaxOptions()
        {
            OnSuccess = "OnSuccess",
            OnFailure = "OnFailure",
            HttpMethod = "POST",
        }))
        {
            @Html.AntiForgeryToken()

            @Html.ValidationSummary(true)
            <span class="control-label">@Resources.Globalization.GovernmentFundsInfoText</span><br />
            <table class="table table-responsive table-condensed table-striped">
                <tbody>
                    <tr>
                        <td>@Html.LabelFor(model => model.LoanNo, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.LoanDate, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.DeductionStartDate, new { @class = "control-label" })</td>
                    </tr>
                    <tr>
                        <td>
                            @Html.TextBoxFor(model => model.LoanNo, new { @class = "form-control", @id = "txtLoanNo", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.LoanNo, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.LoanDate,
                            new
                            {
                                @class = "form-control",
                                @readonly = "readonly",
                                @id = "txtLoanDate",
                                @Value = Model.LoanDate.ToString(@System.Configuration.ConfigurationManager.AppSettings["DateFormat"])
                            })
                            @Html.ValidationMessageFor(model => model.LoanDate, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.DeductionStartDate,
                            new
                            {
                                @class = "form-control",
                                @readonly = "readonly",
                                @id = "txtTasks",
                                @Value = Model.DeductionStartDate.ToString(@System.Configuration.ConfigurationManager.AppSettings["DateFormat"])
                            })
                            @Html.ValidationMessageFor(model => model.DeductionStartDate, "", new { @class = "text-danger" })
                        </td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(model => model.MonthlyDeductionAmount, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.TotalDeductionAmount, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.ContractNo, new { @class = "control-label" })</td>
                    </tr>
                    <tr>
                        <td>
                            @Html.TextBoxFor(model => model.MonthlyDeductionAmount, new { @class = "form-control", @id = "txtMonthlyDeductionAmount", @readonly = "readonly", @min = "0", @value = "0" })
                            @Html.ValidationMessageFor(model => model.MonthlyDeductionAmount, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.TotalDeductionAmount, new { @class = "form-control", @id = "txtTotalDeductionAmount", @readonly = "readonly", @min = "0", @value = "0" })
                            @Html.ValidationMessageFor(model => model.TotalDeductionAmount, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.ContractNo, new { @class = "form-control", @id = "txtContactNo", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.ContractNo, "", new { @class = "text-danger" })
                        </td>
                    </tr>
                    <tr>
                        <td>  @Html.LabelFor(model => model.KSACities, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.GovernmentFundType, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.GovernmentDeductionType, new { @class = "control-label" })</td>
                    </tr>
                    <tr>
                        <td>
                            @Html.TextBoxFor(model => model.KSACity.KSACityName, new { @class = "form-control", @id = "txtKSACityName", @readonly = "readonly" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.GovernmentFundType.GovernmentFundTypeName, new { @class = "form-control", @id = "txtGovernmentFundTypeName", @readonly = "readonly" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.GovernmentDeductionType.GovernmentDeductionTypeName, new { @class = "form-control", @id = "txtGovernmentDeductionTypeName", @readonly = "readonly" })
                        </td>
                        <td></td>
                    </tr>
                    <tr class="sponser">
                        <td>@Html.LabelFor(model => model.SponserToName, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.SponserToIDNo, new { @class = "control-label" })</td>
                        <td></td>
                    </tr>
                    <tr class="sponser">
                        <td>@Html.TextBoxFor(model => model.SponserToName, new { @class = "form-control", @id = "txtSponserToName", @readonly = "readonly" })</td>
                        <td>@Html.TextBoxFor(model => model.SponserToIDNo, new { @class = "form-control", @id = "txtSponserToIDNo", @maxlength = "10", @readonly = "readonly" })</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(model => model.EmployeeVM.EmployeeCodeNo, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.EmployeeVM.EmployeeNameAr, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.EmployeeVM.EmployeeIDNo, new { @class = "control-label" })</td>
                    </tr>
                    <tr>
                        <td>
                            @Html.TextBoxFor(model => model.EmployeeVM.EmployeeCodeNo, new { @class = "form-control", @readonly = "readonly" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.EmployeeVM.EmployeeNameAr, new { @class = "form-control", @readonly = "readonly" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.EmployeeVM.EmployeeIDNo, new { @class = "form-control", @readonly = "readonly" })
                        </td>
                        <td></td>
                    </tr>

                </tbody>
            </table>
            //Employees Partial View
            <span class="control-label">@Resources.Globalization.DeactivationText</span>
            <table class="table table-responsive table-condensed table-striped">
                <tbody>
                    <tr>
                        <td>@Html.LabelFor(model => model.DeactiveDate, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.LetterDate, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.LetterNo, new { @class = "control-label" })</td>
                    </tr>
                    <tr>
                        <td width="33%">
                            <div class="col-md-6">
                                <input type="text" class="form-control" id="txtDeactiveGorgDate" readonly />
                                @*@Html.TextBoxFor(model => model.DeactiveDate, new { @class = "form-control", @id = "txtDeactiveGorgDate", @readonly = "readonly" })*@
                                @Html.ValidationMessageFor(model => model.DeactiveDate, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.DeactiveDate, new { @class = "form-control", @id = "txtDeactiveDate", @readonly = "readonly", @Value = Model.DeactiveDate.HasValue ? Model.DeactiveDate.Value.ToString(@System.Configuration.ConfigurationManager.AppSettings["DateFormat"]) : null })
                            </div>
                        </td>
                        @*<td>
        @Html.TextBoxFor(model => model.DeactiveDate, new { @class = "form-control TxtHijriPicker", @id = "txtDeactiveDate", @Value = Model.DeactiveDate.HasValue ? Model.DeactiveDate.Value.ToString(@System.Configuration.ConfigurationManager.AppSettings["DateFormat"]) : null })
                        @Html.ValidationMessageFor(model => model.DeactiveDate, "", new { @class = "text-danger" })
                        </td>*@
                        <td>
                            @Html.TextBoxFor(model => model.LetterDate, new { @class = "form-control TxtHijriPicker", @id = "txtLetterDate", @Value = Model.LetterDate.HasValue ? Model.LetterDate.Value.ToString(@System.Configuration.ConfigurationManager.AppSettings["DateFormat"]) : null })
                            @Html.ValidationMessageFor(model => model.LetterDate, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.LetterNo, new { @class = "form-control", @id = "txtLetterNo" })
                            @Html.ValidationMessageFor(model => model.LetterNo, "", new { @class = "text-danger" })
                        </td>
                    </tr>
                    <tr>

                        <td>@Html.LabelFor(model => model.GovernmentFundDeactiveReason, new { @class = "control-label" })</td>
                        <td>@Html.LabelFor(model => model.Notes, new { @class = "control-label" })</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DropDownListFor(model => model.GovernmentFundDeactiveReason.GovernmentFundDeactiveReasonID, new SelectList(new HCMBLL.GovernmentFundsDeactiveReasonsBLL().GetGovernmentFundsDeactiveReasons(), "GovernmentFundDeactiveReasonID", "GovernmentFundDeactiveReasonName"), new { @id = "ddlGovernmentFundDeactiveReasons", @style = "width:100%" })
                        </td>
                        <td>   @Html.TextAreaFor(model => model.Notes, new { @class = "form-control", @id = "txtNotes" })</td>
                        <td></td>
                    </tr>
                </tbody>
            </table>

            <table class="table table-responsive table-condensed">
                <tr>
                    <td>
                        <div class="form-group">
                            <center>
                                <input type="submit" class="btn btn-default" name="BtnSave" value="@Resources.Globalization.SaveText" />
                                <input type="button" class="btn btn-default" name="BtnPrint" value="@Resources.Globalization.PrintText" onclick="OkFunction()" />
                            </center>
                        </div>
                    </td>
                </tr>
            </table>
            @Html.HiddenFor(model => model.GovernmentFundID)
            @Html.HiddenFor(model => model.IsActive)
        }
    </div>
    <div class="panel-footer">
        @using (Html.BeginForm("Index", "GovernmentFunds"))
        {
            <input type="submit" class="btn btn-default" name="BtnBack" value="@Resources.Globalization.BacktoListText" />
        }
    </div>
</div>

@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@