@model HCM.Models.InternshipScholarshipsViewModel
@using HCM.Classes.Enums
@using HCMBLL.Enums
@using HCM.Models

@{
    ViewBag.Title = Resources.Globalization.EditInternshipScholarshipText;
}

<script type="text/javascript">

    function OkFunction() {
        var iframe = $("#divReportModal .modal-body #iframeReportContent");
        iframe.attr('src', '@Url.Content("~/InternshipScholarships/PrintInternshipScholarship/")' + '@Model.InternshipScholarshipID');
        ShowModal("#divReportModal");
    }

    function BindingInternshipScholarshipType(InternshipScholarshipType) {
        if (InternshipScholarshipType == '@Convert.ToInt32(InternshipScholarshipsTypesEnum.Internal)') {
            $('.internal').show();
            $('.external').hide();
        }
        else {
            $('.internal').hide();
            $('.external').show();
        }
    }

    $(document).ready(function () {

        var InternshipScholarshipType = '@Model.InternshipScholarshipType.InternshipScholarshipTypeID';
        BindingInternshipScholarshipType(InternshipScholarshipType);
        BindInternshipScholarshipEmployees();
        $("#btnAdd").click(function () {
            var Employee = {};
            if ($("#txtEmployeeCodeNo").val() != '') {
                Employee = {
                    EmployeeCareerHistory: {
                        EmployeeCareerHistoryID: $("#hdnFldEmployeeCareerHistoryID").val(),
                        EmployeeCode: {
                            EmployeeCodeID: $("#hdnFldEmployeeCodeID").val(),
                            EmployeeCodeNo: $("#txtEmployeeCodeNo").val(),
                            Employee: {
                                FirstNameAr: $("#txtEmployeeNameAr").val()
                            }
                        }
                    },
                    IsPassengerOrderCompensation: $('#chkIsPassengerOrderCompensation').prop("checked")
                }
            }

            var ObjToPassForAdd =
            {
                InternshipScholarshipID: '@Model.InternshipScholarshipID',
                InternshipScholarshipStartDate: $('#txtInternshipScholarshipStartDate').val(),
                InternshipScholarshipEndDate: $('#txtInternshipScholarshipEndDate').val(),
                InternshipScholarshipPeriod: $('#txtInternshipScholarshipPeriod').val(),
                InternshipScholarshipDetailRequest: Employee
            };

            $.ajax({
                type: "POST"
                //, dataType: "json"     :  if you pass 'dataType: "json"' then there is always parseerror from .ajax call and return type is 'HttpResponseMessage'
                , contentType: "application/json; charset=utf-8"
                , url: "@Url.Content("~/InternshipScholarships/CreateInternshipScholarshipDetailDB")"
                , data: JSON.stringify(ObjToPassForAdd)
                , success: function () {
                    AddingSuccess();
                }
                , error: function (xhr, status, error) {
                    AddingFailure();
                }
            });
        });

        $('#ddlInternshipScholarshipTypes').on('change', function (event) {
            var InternshipScholarshipType = $('#ddlInternshipScholarshipTypes').val();
            BindingInternshipScholarshipType(InternshipScholarshipType);
        });

        GetCities();
    });

    function OnSuccess() {
        $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Success, Globals.Utilities.RemoveSpace(@Resources.Globalization.SavedDoneAlertText), "OkFunction")');
    }

    function OnFailure() {
        $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Failure, "Error")');
    }

    function AddingSuccess() {
        $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Success, Globals.Utilities.RemoveSpace(@Resources.Globalization.AddingDoneText))');

        // rebind tha data
        BindInternshipScholarshipEmployees();

        ResetEmployeeData();
    }

    function AddingFailure() {
        OnFailure();
    }

    function GetInternshipScholarshipEndDate() {

        @*var InternshipScholarshipStartDate = new Date($('#txtInternshipScholarshipStartDate').val()),
            InternshipScholarshipPeriod = parseInt("0" + $('#txtInternshipScholarshipPeriod').val(), 10) - 1;;

        if (!isNaN(InternshipScholarshipStartDate.getTime())) {
            InternshipScholarshipStartDate.setDate(InternshipScholarshipStartDate.getDate() + InternshipScholarshipPeriod);
            $('#txtInternshipScholarshipEndDate').val($.datepicker.formatDate('yy/mm/dd', InternshipScholarshipStartDate));
        }
        else {
            $("#divAlert").load('@RazorHelper.ShowAlert(this, ModalTypes.Failure, Globals.Utilities.RemoveSpace(@Resources.Globalization.ValidationInvalidDateText))');
        }*@
    }

    function closeEmployeesPopup(EmployeeCodeID) {
        GetEmployeeData(EmployeeCodeID);
    }

    function BindInternshipScholarshipEmployees() {
        $("#tblInternshipScholarshipEmployees").DataTable({
            destroy: true,
            "searching": false,
            "ordering": false,
            "paging": false,
            "ajax": {
                "url": "/InternshipScholarships/GetInternshipScholarshipEmployeesByInternshipScholarshipID/" + '@Model.InternshipScholarshipID',
                "type": "get",
                "datatype": "json"
            },
            "columns": [
                {
                    "data": "EmployeeCareerHistory.EmployeeCode.EmployeeCodeNo",
                    "autowidth": true
                },
                {
                    "data": "EmployeeCareerHistory.EmployeeCode.Employee.EmployeeNameAr",
                    "autowidth": true
                },
                {
                    "data": "IsPassengerOrderCompensation",
                    "autowidth": false,
                    "render": RenderCheckBox
                }
            ]
        });
    }

    function GetCities() {
        var KSARegionID = $("#ddlKSARegions").val();
        $.ajax({
            type: "get"
            , dataType: "json"
            , url: "/KSACities/GetKSACities/" + KSARegionID
            , success: function (d) {
                $("#ddlKSACities").html("");
                var cities = d.data;
                $.each(cities, function (i, city) {
                    $("#ddlKSACities").append($('<option></option>').val(city.KSACityID).html(city.KSACityName));
                });
            }
            , error: function (xhr, status, error) {
                alert(error.message);
            }
        });
    }
</script>
<p style="font-size:larger">@Resources.Globalization.EditInternshipScholarshipText</p>
<div class="panel panel-default" style="padding:0px">
    <div class="panel-heading">
        <div class="row">
            <div class="col-md-9">
                @Resources.Globalization.EditInternshipScholarshipDescText
            </div>
            <div class="col-md-3" style="text-align:left">
                @*<a id="OpenBusinessConditions">
                        <span class="glyphicon glyphicon-print" title="اضغط لمعرفة الشروط الخاصة لتعديل تكليف"></span>
                    </a>*@
            </div>
        </div>
    </div>
    <div class="panel-body">
        @using (Ajax.BeginForm("Edit", "InternshipScholarships", new AjaxOptions()
        {
            OnSuccess = "OnSuccess",
            OnFailure = "OnFailure",
            HttpMethod = "POST",
        }))
        {
            @Html.AntiForgeryToken()

            @Html.ValidationSummary(true)
            <span class="control-label">@Resources.Globalization.InternshipScholarshipBasicInfoText</span><br />
            <table class="table table-responsive table-condensed table-striped">
                <tbody>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipsTypes, new { @class = "control-label" })
                            @Html.HiddenFor(model => model.InternshipScholarshipID)
                        </td>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipLocation, new { @class = "control-label" })
                        </td>
                        <td>
                            @*@Html.LabelFor(model => model.InternshipScholarshipDistancePeriod, new { @class = "control-label" })*@
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DropDownListFor(model => model.InternshipScholarshipType.InternshipScholarshipTypeID, new SelectList(new HCMBLL.InternshipScholarshipsTypesBLL().GetInternshipScholarshipsTypes(), "InternshipScholarshipTypeID", "InternshipScholarshipTypeName"), new { @id = "ddlInternshipScholarshipTypes", @style = "width:100%" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.InternshipScholarshipLocation, new { @class = "form-control" })
                        </td>
                        <td>
                            @*@Html.TextBoxFor(model => model.InternshipScholarshipDistancePeriod, new { @class = "form-control", @id = "txtInternshipScholarshipDistancePeriod", @type = "number", @value = "1" })
                                @Html.ValidationMessageFor(model => model.InternshipScholarshipDistancePeriod, "", new { @class = "text-danger" })*@
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipStartDate, new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipPeriod, new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipEndDate, new { @class = "control-label" })
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.TextBoxFor(model => model.InternshipScholarshipStartDate, new
                                                                                {
                                                                                    @class = "form-control",
                                                                                    @id = "txtInternshipScholarshipStartDate",
                                                                                    @readonly = "readonly",
                                                                                    @Value = Model.InternshipScholarshipStartDate.ToString(@System.Configuration.ConfigurationManager.AppSettings["DateFormat"])
                                                                                })
                            @Html.ValidationMessageFor(model => model.InternshipScholarshipStartDate, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @*<input type="number" id="txtInternshipScholarshipPeriod" min="1" class="form-control" />*@
                            @Html.TextBoxFor(model => model.InternshipScholarshipPeriod, new { @class = "form-control", @id = "txtInternshipScholarshipPeriod", @type = "number", @readonly = "readonly" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.InternshipScholarshipEndDate, new
                                                                                {
                                                                                    @class = "form-control",
                                                                                    @id = "txtInternshipScholarshipEndDate",
                                                                                    @readonly = "readonly",
                                                                                    @Value = Model.InternshipScholarshipEndDate.ToString(@System.Configuration.ConfigurationManager.AppSettings["DateFormat"])
                                                                                })
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.InternshipScholarshipReason, new { @class = "control-label" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            @Html.TextAreaFor(model => model.InternshipScholarshipReason, new { @class = "form-control", @id = "txtInternshipScholarshipReason" })
                        </td>
                    </tr>
                    <tr class="internal">
                        <td>
                            @Html.LabelFor(model => model.KSARegions, new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.LabelFor(model => model.KSACities, new { @class = "control-label" })
                        </td>
                        <td></td>
                    </tr>
                    <tr class="internal">
                        <td>
                            @Html.DropDownListFor(model => model.KSARegion.KSARegionID, new SelectList(new HCMBLL.KSARegionsBLL().GetKSARegions(), "KSARegionID", "KSARegionName"), new { @id = "ddlKSARegions", @style = "width:100%", @onchange = "GetCities()" })
                        </td>
                        <td>
                            @Html.DropDownListFor(model => model.KSACity.KSACityID, new SelectList(new HCMBLL.KSACitiesBLL().GetKSACities(), "KSACityID", "KSACityName"), new { @id = "ddlKSACities", @style = "width:100%" })
                        </td>
                        <td></td>
                    </tr>
                    <tr class="external">
                        <td>
                            @Html.LabelFor(model => model.Countries, new { @class = "control-label" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr class="external">
                        <td>
                            @Html.DropDownListFor(model => model.Country.CountryID, new SelectList(new HCMBLL.CountriesBLL().GetCountries(), "CountryID", "CountryName"), new { @id = "ddlCountries", @style = "width:100%" })
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
            <span class="control-label">@Resources.Globalization.EmployeesText</span>
            @Html.Partial("~/Views/Shared/_EmployeesPopup.cshtml", new EmployeesViewModel() { })

            <div class="row">
                <div class="col-md-10">
                    @Html.CheckBoxFor(c => c.InternshipScholarshipDetailRequest.IsPassengerOrderCompensation, new { @id = "chkIsPassengerOrderCompensation" })
                    @Html.LabelFor(c => c.InternshipScholarshipDetailRequest.IsPassengerOrderCompensation, Resources.Globalization.IsPassengerOrderCompensation)
                </div>
                <div class="col-md-2 text-right">
                    <input id="btnAdd" type="button" class="btn btn-default" value="@Resources.Globalization.AddText" />
                </div>

            </div>


            <table id="tblInternshipScholarshipEmployees" class="table table-responsive table-hover">
                <thead>
                    <tr>
                        <td>@Resources.Globalization.EmployeeCodeNoText</td>
                        <td>@Resources.Globalization.EmployeeNameArText</td>
                        <td>@Resources.Globalization.IsPassengerOrderCompensation؟</td>
                    </tr>
                </thead>
            </table>

            <table class="table table-responsive table-condensed">
                <tr>
                    <td>
                        <div class="form-group">
                            <center>
                                <input type="submit" class="btn btn-default" name="BtnSave" value="@Resources.Globalization.SaveText" />
                                @*<input type="reset" class="btn btn-default" value="@Resources.Globalization.ResetText" />*@
                            </center>
                        </div>
                    </td>
                </tr>
            </table>
        }
    </div>
    <div class="panel-footer">
        @using (Html.BeginForm("Index", "InternshipScholarships"))
        {
            <input type="submit" class="btn btn-default" name="BtnBack" value="@Resources.Globalization.BacktoListText" />
        }
    </div>
</div>

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@




