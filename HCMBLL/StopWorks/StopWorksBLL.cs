using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace HCMBLL
{
    public class StopWorksBLL : CommonEntity, IEntity
    {
        public virtual int StopWorkID
        {
            get;
            set;
        }

        public virtual StopWorksTypesBLL StopWorkType { get; set; }

        public virtual EmployeesCareersHistoryBLL EmployeeCareerHistory
        {
            get;
            set;
        }

        public virtual DateTime StopWorkStartDate
        {
            get;
            set;
        }

        public virtual DateTime? StopWorkEndDate
        {
            get;
            set;
        }

        public string StartStopWorkDecisionNumber
        {
            get;
            set;
        }

        public virtual DateTime? StartStopWorkDecisionDate
        {
            get;
            set;
        }

        public string EndStopWorkDecisionNumber
        {
            get;
            set;
        }

        public virtual DateTime? EndStopWorkDecisionDate
        {
            get;
            set;
        }

        public virtual string StopPoint { get; set; }

        public virtual bool? IsConvicted { get; set; }

        public virtual string Note { get; set; }

        public virtual int StopWorkPeriod
        {
            get
            {
                return this.StopWorkEndDate == null ? (DateTime.Now.Subtract(this.StopWorkStartDate).Days + 1) : (this.StopWorkEndDate.Value.Subtract(this.StopWorkStartDate).Days + 1);
            }
        }

        public StopWorksBLL GetByStopWorkID(int StopWorkID)
        {
            StopWorksBLL StopWorkBLL = null;
            StopWorks StopWork = new StopWorksDAL().GetByStopWorkID(StopWorkID);
            if (StopWork != null)
            {
                StopWorkBLL = new StopWorksBLL().MapStopWork(StopWork);
            }
            return StopWorkBLL;
        }

        public List<StopWorksBLL> GetStopWorks()
        {
            List<StopWorksBLL> StopWorkBLLList = new List<StopWorksBLL>();
            List<StopWorks> StopWorks = new StopWorksDAL().GetStopWorks();
            foreach (var item in StopWorks)
            {
                StopWorkBLLList.Add(new StopWorksBLL().MapStopWork(item));
            }
            return StopWorkBLLList;
        }

        public virtual Result Add()
        {
            Result result;
            result = CommonHelper.IsNoConflictWithOtherProcess(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, this.StopWorkStartDate, this.StopWorkEndDate ?? DateTime.Now);

            if (result != null)
            {
                return result;
            }

            #region
            if (this.StopWorkEndDate == null)
            {
                this.StopWorkEndDate = this.StopWorkStartDate.AddYears(10);
            }
            #endregion

            #region Check EndDate Should be more than startDate
            if (this.StopWorkEndDate < this.StopWorkStartDate)
            {
                result = new Result();
                result.Entity = this;
                result.EnumMember = StopWorkValidationEnum.RejectedBecauseOfEndDateShouldBeMoreThanStartDate.ToString();
                result.EnumType = typeof(StopWorkValidationEnum);
                return result;
            }
            #endregion

            #region Check is there another stopwork not ended
            result = IsThereStopWorkNotEnding(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);
            if (result != null)
                return result;
            #endregion

            StopWorks stopWork = new StopWorks()
            {
                CreatedBy = this.LoginIdentity.EmployeeCodeID,
                StopWorkEndDate = this.StopWorkEndDate,
                StopWorkStartDate = this.StopWorkStartDate,
                StartStopWorkDecisionNumber = this.StartStopWorkDecisionNumber,
                StartStopWorkDecisionDate = this.StartStopWorkDecisionDate,
                EndStopWorkDecisionNumber = this.EndStopWorkDecisionNumber,
                EndStopWorkDecisionDate = this.EndStopWorkDecisionDate,
                EmployeeCareerHistoryID = this.EmployeeCareerHistory.EmployeeCareerHistoryID,
                StopPoint = this.StopPoint,
                IsConvicted = this.IsConvicted,
                Note = this.Note,
                StopWorkTypeID = this.StopWorkType.StopWorkTypeID,
                CreatedDate = DateTime.Now
            };

            this.StopWorkID = new StopWorksDAL().Insert(stopWork);

            result = new Result();
            result.Entity = this;
            result.EnumMember = StopWorkValidationEnum.Done.ToString();
            result.EnumType = typeof(StopWorkValidationEnum);
            return result;
        }

        public Result Update()
        {
            Result result = null;

            #region Check EndDate Should be more than startDate
            if (this.StopWorkEndDate < this.StopWorkStartDate)
            {
                result = new Result();
                result.Entity = this;
                result.EnumMember = StopWorkValidationEnum.RejectedBecauseOfEndDateShouldBeMoreThanStartDate.ToString();
                result.EnumType = typeof(StopWorkValidationEnum);
                return result;
            }
            #endregion

            #region Check is there another stopwork not ended
            StopWorks StopWork = new StopWorksDAL().GetByStopWorkID(this.StopWorkID);
            if (StopWork.EmployeesCareersHistory.EmployeeCareerHistoryID == this.EmployeeCareerHistory.EmployeeCareerHistoryID)
            {
                result = IsThereStopWorkNotEnding(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, this.StopWorkID);
                if (result != null)
                {
                    if (this.IsConvicted == null)// && ((StopWorksBLL)result.Entity).IsConvicted != this.IsConvicted)
                        return result;
                }
            }
            else
            {
                result = IsThereStopWorkNotEnding(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);
                if (result != null)
                {
                    return result;
                }


            }
            #endregion


            StopWorks stopWork = new StopWorks()
            {
                StopWorkID = this.StopWorkID,
                EmployeeCareerHistoryID = this.EmployeeCareerHistory.EmployeeCareerHistoryID,
                StopWorkEndDate = this.StopWorkEndDate,
                StopWorkStartDate = this.StopWorkStartDate,
                StartStopWorkDecisionNumber = this.StartStopWorkDecisionNumber,
                StartStopWorkDecisionDate = this.StartStopWorkDecisionDate,
                EndStopWorkDecisionDate = this.EndStopWorkDecisionDate,
                EndStopWorkDecisionNumber = this.EndStopWorkDecisionNumber,
                StopPoint = this.StopPoint,
                IsConvicted = this.IsConvicted,
                StopWorkTypeID = this.StopWorkType.StopWorkTypeID,
                Note = this.Note,
                LastUpdatedDate = DateTime.Now,
                LastUpdatedBy = this.LoginIdentity.EmployeeCodeID
            };
            new StopWorksDAL().Update(stopWork);
            result = new Result()
            {
                Entity = this,
                EnumType = typeof(StopWorkValidationEnum),
                EnumMember = StopWorkValidationEnum.Done.ToString()
            };


            return result;
        }

        public Result Remove()
        {
            try
            {
                Result result = null;
                new StopWorksDAL().Delete(this.StopWorkID);
                return result = new Result()
                {
                    EnumType = typeof(StopWorkValidationEnum),
                    EnumMember = StopWorkValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }

        }

        public Result EndStopWork()
        {
            Result result = null;

            #region Check EndDate Should be more than startDate
            if (this.StopWorkEndDate < this.StopWorkStartDate)
            {
                result = new Result();
                result.Entity = this;
                result.EnumMember = StopWorkValidationEnum.RejectedBecauseOfEndDateShouldBeMoreThanStartDate.ToString();
                result.EnumType = typeof(StopWorkValidationEnum);
                return result;
            }
            #endregion

            #region Check is there another stopwork not ended
            StopWorks StopWork = new StopWorksDAL().GetByStopWorkID(this.StopWorkID);
            if (StopWork.EmployeesCareersHistory.EmployeeCareerHistoryID == this.EmployeeCareerHistory.EmployeeCareerHistoryID)
            {
                result = IsThereStopWorkNotEnding(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, this.StopWorkID);
                if (result != null)
                {
                    if (this.IsConvicted == null)// && ((StopWorksBLL)result.Entity).IsConvicted != this.IsConvicted)
                        return result;
                }
            }
            else
            {
                result = IsThereStopWorkNotEnding(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);
                if (result != null)
                {
                    return result;
                }


            }
            #endregion

            StopWorks stopWork = new StopWorks()
            {
                StopWorkID = this.StopWorkID,
                EmployeeCareerHistoryID = this.EmployeeCareerHistory.EmployeeCareerHistoryID,
                StopWorkEndDate = this.StopWorkEndDate,
                StopWorkStartDate = this.StopWorkStartDate,
                StartStopWorkDecisionNumber = this.StartStopWorkDecisionNumber,
                StartStopWorkDecisionDate = this.StartStopWorkDecisionDate,
                EndStopWorkDecisionDate = this.EndStopWorkDecisionDate,
                EndStopWorkDecisionNumber = this.EndStopWorkDecisionNumber,
                StopPoint = this.StopPoint,
                IsConvicted = this.IsConvicted,
                StopWorkTypeID = this.StopWorkType.StopWorkTypeID,
                Note = this.Note,
                LastUpdatedDate = DateTime.Now,
                LastUpdatedBy = this.LoginIdentity.EmployeeCodeID
            };
            new StopWorksDAL().EndStopWork(stopWork);

            this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetByEmployeeCareerHistoryID(this.EmployeeCareerHistory.EmployeeCareerHistoryID);
            new BaseAssigningsBLL() { LoginIdentity = this.LoginIdentity }.BreakLastAssigning(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID,
                                                this.StopWorkEndDate.HasValue ? this.StopWorkEndDate.Value : DateTime.Now,
                                                AssigningsReasonsEnum.StopWorkFinished);

            result = new Result()
            {
                Entity = this,
                EnumType = typeof(StopWorkValidationEnum),
                EnumMember = StopWorkValidationEnum.Done.ToString()
            };

            return result;
        }


        public List<StopWorksBLL> GetByEmployeeCodeID(int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            return new EmployeesCodesBLL().GetStopWorksByEmployeeCodeID(EmployeeCodeID)
              .Where(
                   x => (StartDate >= x.StopWorkStartDate && StartDate <= x.StopWorkEndDate) ||
                        (EndDate >= x.StopWorkStartDate && EndDate <= x.StopWorkEndDate) ||
                        (StartDate >= x.StopWorkStartDate && EndDate <= x.StopWorkEndDate) ||
                        (StartDate <= x.StopWorkStartDate && EndDate >= x.StopWorkEndDate)
                      )
              .ToList();
        }

        public List<StopWorksBLL> GetByEmployeeCodeIDConvicted(int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            return this.GetByEmployeeCodeID(EmployeeCodeID, StartDate, EndDate).Where(x => (x.IsConvicted == true || x.IsConvicted == null)).ToList();
        }

        public bool IsStopWorkExistsByEmployeeCodeID(int EmployeeCareerHistoryID, DateTime Date)
        {
            List<StopWorks> StopWorkList = new StopWorksDAL().GetStopWorksByEmployeeCareerHistoryID(EmployeeCareerHistoryID, Date);
            return StopWorkList.Count > 0 ? true : false;
        }

        public virtual int GetCountStopWorkPeriodByEmployeeCodeID(List<StopWorks> StopWorkList, int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            List<StopWorks> StopWorks = StopWorkList.Where(
                                            x => (StartDate >= x.StopWorkStartDate && StartDate <= x.StopWorkEndDate) ||
                                                (EndDate >= x.StopWorkStartDate && EndDate <= x.StopWorkEndDate) ||
                                                (StartDate >= x.StopWorkStartDate && EndDate <= x.StopWorkEndDate) ||
                                                (StartDate <= x.StopWorkStartDate && EndDate >= x.StopWorkEndDate)
                                            ).ToList();

            int TotalDays = 0;
            DateTime Date;

            for (DateTime i = StartDate; i <= EndDate;)
            {
                Date = i;

                foreach (var item in StopWorks.Where(x => x.IsConvicted != false))
                {
                    if (Date >= item.StopWorkStartDate.Date && Date <= (item.StopWorkEndDate.HasValue ? item.StopWorkEndDate.Value.Date : DateTime.Now.Date))
                        TotalDays++;
                }

                i = i.AddDays(1);
            }

            return TotalDays;
        }

        private Result IsThereStopWorkNotEnding(int EmployeeCodeID, int StopWorkID = 0)
        {
            Result result = null;
            List<StopWorks> StopWorks = new StopWorksDAL().GetStopWorksByEmployeeCodeID(EmployeeCodeID).Where(c => c.IsConvicted == null && c.StopWorkID != StopWorkID).ToList();
            if (StopWorks.Count != 0)
            {
                return result = new Result()
                {
                    Entity = MapStopWork(StopWorks.FirstOrDefault()),
                    EnumType = typeof(StopWorkValidationEnum),
                    EnumMember = StopWorkValidationEnum.RejectedBecauseOfThereIsAnotherStopWorkNotEnding.ToString()
                };
            }
            return result;
        }

        internal StopWorksBLL MapStopWork(StopWorks StopWork)
        {
            try
            {
                StopWorksBLL StopWorkBLL = null;
                if (StopWork != null)
                {
                    StopWorkBLL = new StopWorksBLL()
                    {
                        StopWorkID = StopWork.StopWorkID,
                        StopWorkStartDate = StopWork.StopWorkStartDate.Date,
                        StopWorkEndDate = StopWork.StopWorkEndDate.Value.Date,
                        StartStopWorkDecisionNumber = StopWork.StartStopWorkDecisionNumber,
                        StartStopWorkDecisionDate = StopWork.StartStopWorkDecisionDate,// != null?StopWork.StartStopWorkDecisionDate.Value.Date : Convert.ToDateTime(null),
                        EndStopWorkDecisionNumber = StopWork.EndStopWorkDecisionNumber,
                        EndStopWorkDecisionDate = StopWork.EndStopWorkDecisionDate,//!= null ? StopWork.EndStopWorkDecisionDate.Value.Date : Convert.ToDateTime(null),
                        Note = StopWork.Note,
                        StopPoint = StopWork.StopPoint,
                        EmployeeCareerHistory = new EmployeesCareersHistoryBLL().MapEmployeeCareerHistory(StopWork.EmployeesCareersHistory),
                        IsConvicted = StopWork.IsConvicted,
                        StopWorkType = new StopWorksTypesBLL().MapStopWorkType(StopWork.StopWorksTypes),
                        CreatedBy = new EmployeesCodesBLL().MapEmployeeCode(StopWork.CreatedByNav),
                        CreatedDate = StopWork.CreatedDate,
                        LastUpdatedDate = StopWork.LastUpdatedDate,
                    };
                }
                return StopWorkBLL;
            }
            catch
            {
                throw;
            }
        }
    }
}