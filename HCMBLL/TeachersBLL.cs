using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;


namespace HCMBLL
{
    public class TeachersBLL : CommonEntity, IEntity
    {
        public virtual int TeacherID
        {
            get;
            set;
        }

        public virtual DateTime EndDate
        {
            get;
            set;
        }

        public virtual DateTime StartDate
        {
            get;
            set;
        }

        public virtual EmployeesCareersHistoryBLL EmployeeCareerHistory
        {
            get;
            set;
        }

        //public virtual EmployeesCodesBLL EmployeeCode
        //{
        //    get;
        //    set;
        //}

        public virtual Result Add()
        {
            try
            {
                Result result = this.IsValid();
                if (result == null)
                {
                    Teachers Teacher = new Teachers();
                    Teacher.EmployeeCareerHistoryID = new EmployeesCareersHistoryBLL().GetEmployeeCurrentJob(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID).EmployeeCareerHistoryID;
                    Teacher.StartDate = StartDate;
                    Teacher.EndDate = EndDate;
                    Teacher.CreatedDate = DateTime.Now;
                    Teacher.CreatedBy = this.LoginIdentity.EmployeeCodeID;
                    this.TeacherID = new TeachersDAL().Insert(Teacher);

                    result = new Result();
                    result.Entity = this;
                    result.EnumType = typeof(TeachersValidationEnum);
                    result.EnumMember = TeachersValidationEnum.Done.ToString();

                    return result;
                }
                else
                {
                    return result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Result Remove()
        {
            try
            {
                Result result = null;
                new TeachersDAL().Delete(new Teachers() { TeacherID = this.TeacherID }, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(TeachersValidationEnum),
                    EnumMember = TeachersValidationEnum.Done.ToString()
                };
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public virtual Result Update()
        {
            try
            {
                Result result = this.IsValid();
                if (result == null)
                {
                    Teachers Teacher = new Teachers();
                    Teacher.TeacherID = this.TeacherID;
                    Teacher.EmployeeCareerHistoryID = new EmployeesCareersHistoryBLL().GetEmployeeCurrentJob(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID).EmployeeCareerHistoryID;
                    Teacher.StartDate = StartDate;
                    Teacher.EndDate = EndDate;
                    Teacher.LastUpdatedDate = DateTime.Now;
                    Teacher.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;

                    int UpdateResult = new TeachersDAL().Update(Teacher);
                    if (UpdateResult != 0)
                    {
                        result = new Result();
                        result.Entity = this;
                        result.EnumType = typeof(TeachersValidationEnum);
                        result.EnumMember = TeachersValidationEnum.Done.ToString();
                    }

                    return result;
                }
                else
                {
                    return result;
                }
            }
            catch
            {
                throw;
            }
        }

        public virtual List<TeachersBLL> GetTeachers()
        {
            try
            {
                List<Teachers> TeachersList = new TeachersDAL().GetTeachers();
                List<TeachersBLL> TeachersBLLList = new List<TeachersBLL>();
                if (TeachersList.Count > 0)
                {
                    foreach (var item in TeachersList)
                        TeachersBLLList.Add(new TeachersBLL().MapTeacher(item));
                }
                return TeachersBLLList;
            }
            catch
            {
                throw;
            }
        }

        public virtual TeachersBLL GetByTeacherID(int TeacherID)
        {
            try
            {
                TeachersBLL TeacherBLL = null;
                Teachers Teacher = new TeachersDAL().GetByTeacherID(TeacherID);

                if (Teacher != null)
                    TeacherBLL = new TeachersBLL().MapTeacher(Teacher);

                return TeacherBLL;
            }
            catch
            {
                throw;
            }
        }

        internal TeachersBLL MapTeacher(Teachers Teacher)
        {
            try
            {
                TeachersBLL TeacherBLL = null;
                if (Teacher != null)
                {
                    TeacherBLL = new TeachersBLL()
                    {
                        TeacherID = Teacher.TeacherID,
                        EmployeeCareerHistory = Teacher.EmployeesCareersHistory != null ? new EmployeesCareersHistoryBLL().MapEmployeeCareerHistory(Teacher.EmployeesCareersHistory) : null,
                        StartDate = Teacher.StartDate,
                        EndDate = Teacher.EndDate,
                        CreatedDate = Teacher.CreatedDate,
                        CreatedBy = new EmployeesCodesBLL().MapEmployeeCode(Teacher.EmployeesCodes)
                    };
                }
                return TeacherBLL;
            }
            catch
            {
                throw;
            }
        }

        private Result IsValid()
        {
            Result result = null;

            #region Validation of Date

            if (this.StartDate > this.EndDate)
            {
                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(TeachersValidationEnum);
                result.EnumMember = TeachersValidationEnum.RejectedBecauseOfEndDateShouldNotBeLessThanStartDate.ToString();
                return result;
            }
            #endregion

            #region Validation for vacation before hiring or not
            EmployeesCareersHistoryBLL HiringRecord = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);
            if (HiringRecord != null)
            {
                if (HiringRecord.JoinDate > this.StartDate)
                {
                    result = new Result();
                    result.Entity = HiringRecord;
                    result.EnumType = typeof(TeachersValidationEnum);
                    result.EnumMember = TeachersValidationEnum.RejectedBecauseOfBeforeHiringDate.ToString();
                    return result;
                }
            }
            #endregion

            #region Validaion for conflict with Other Process
            //return CommonHelper.IsNoConflictWithOtherProcess(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, this.StartDate, this.EndDate);
            #endregion

            return result;
        }

        //public List<TeachersBLL> GetByEmployeeCodeID(int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        //{
        //    return new EmployeesCodesBLL().GetTeachersByEmployeeCodeID(EmployeeCodeID)
        //     .Where(
        //          x => (StartDate <= x.StartDate && EndDate >= x.StartDate) ||
        //               (StartDate <= x.EndDate && EndDate >= x.EndDate) ||
        //               (StartDate <= x.StartDate && EndDate >= x.EndDate) ||
        //               (StartDate >= x.StartDate && EndDate <= x.EndDate) 
        //             )
        //     .ToList();

        //    //return new EmployeesCodesBLL().GetTeachersByEmployeeCodeID(EmployeeCodeID)
        //    //  .Where(
        //    //       x => (StartDate >= x.StartDate && StartDate <= x.EndDate) ||
        //    //            (StartDate >= x.StartDate && EndDate <= x.EndDate) ||
        //    //            (StartDate <= x.StartDate && EndDate >= x.EndDate) ||
        //    //            (EndDate >= x.StartDate && EndDate <= x.EndDate) ||


        //    //          )
        //    //  .ToList();
        //}

        internal bool IsEmployeeWorksAsTeacher(int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            try
            {
                return new EmployeesCodesBLL().GetTeachersByEmployeeCodeID(EmployeeCodeID)
                    .Where(
                         x => (StartDate >= x.StartDate && EndDate <= x.EndDate)
                            )
                    .Any();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        internal virtual int GetCountEmployeeWorkAsTeacherPeriodByEmployeeCodeID(List<Teachers> TeachersList, DateTime StartDate, DateTime EndDate)
        {
            List<Teachers> Teachers = TeachersList.Where(
                                            x => (StartDate >= x.StartDate && StartDate <= x.EndDate) ||
                                                (EndDate >= x.StartDate && EndDate <= x.EndDate) ||
                                                (StartDate >= x.StartDate && EndDate <= x.EndDate) ||
                                                (StartDate <= x.StartDate && EndDate >= x.EndDate)
                                            ).ToList();

            int TotalDays = 0;
            DateTime Date;

            for (DateTime i = StartDate; i <= EndDate;)
            {
                Date = i;

                foreach (var item in Teachers)
                {
                    if (Date >= item.StartDate.Date && Date <= item.EndDate.Date)
                        TotalDays++;
                }

                i = i.AddDays(1);
            }

            return TotalDays;
        }
    }
}

