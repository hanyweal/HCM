using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace HCMBLL
{
    public class CountriesBLL : CommonEntity, IEntity
    {
        public int CountryID
        {
            get;
            set;
        }

        public string CountryName
        {
            get;
            set;
        }

        public virtual Result Add()
        {
            try
            {
                Result result = null;
                result = new Result();
                Countries country = new Countries()
                {
                    CountryName = this.CountryName,
                    CreatedDate = DateTime.Now
                };
                this.CountryID = new CountriesDAL().Insert(country);
                if (this.CountryID != 0)
                {
                    result.Entity = this;
                    result.EnumType = typeof(LookupsValidationEnum);
                    result.EnumMember = LookupsValidationEnum.Done.ToString();
                }
                return result;
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Update()
        {
            try
            {
                Result result = null;
                result = new Result();
                Countries country = new Countries()
                {
                    CountryID = this.CountryID,
                    CountryName = this.CountryName,
                    LastUpdatedDate = DateTime.Now,
                };

                this.CountryID = new CountriesDAL().Update(country);
                if (this.CountryID != 0)
                {
                    result.Entity = this;
                    result.EnumType = typeof(LookupsValidationEnum);
                    result.EnumMember = LookupsValidationEnum.Done.ToString();
                }
                return result;
            }
            catch
            {
                throw;
            }
        }

        public static Result Remove(int CountryID)
        {
            try
            {
                Result result = null;
                new CountriesDAL().Delete(CountryID);
                return result = new Result()
                {
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public List<CountriesBLL> GetCountries()
        {
            List<Countries> CountriesList = new CountriesDAL().GetCountries();
            List<CountriesBLL> CountriesBLLList = new List<CountriesBLL>();
            if (CountriesList.Count > 0)
            {
                foreach (var item in CountriesList)
                {
                    CountriesBLLList.Add(new CountriesBLL()
                    {
                        CountryID = item.CountryID,
                        CountryName = item.CountryName
                    });
                }
            }

            return CountriesBLLList;
        }

        public CountriesBLL GetByCountryID(int CountryID)
        {
            return GetCountries().SingleOrDefault(x => x.CountryID.Equals(CountryID));
        }

        internal CountriesBLL MapCountry(Countries Country)
        {
            try
            {
                CountriesBLL CountryBLL = null;
                if (Country != null)
                {
                    CountryBLL = new CountriesBLL()
                    {
                        CountryID = Country.CountryID,
                        CountryName = Country.CountryName
                    };
                }
                return CountryBLL;
            }
            catch
            {
                throw;
            }
        }
    }
}