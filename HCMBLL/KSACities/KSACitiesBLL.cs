using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class KSACitiesBLL : CommonEntity, IEntity
    {
        public int KSACityID
        {
            get;
            set;
        }

        public string KSACityName
        {
            get;
            set;
        }

        public KSARegionsBLL KSARegion
        {
            get;
            set;
        }

        public virtual Result Add()
        {
            Result result = null;
            result = new Result();
            KSACities KSACity = new KSACities();
            KSACity.KSACityName = this.KSACityName;
            KSACity.KSARegionID = this.KSARegion.KSARegionID;
            KSACity.CreatedDate = DateTime.Now;
            this.KSACityID = new KSACitiesDAL().Insert(KSACity);
            if (this.KSACityID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }

            return result;
        }

        public virtual Result Update()
        {
            Result result = new Result();
            KSACities KSACity = new KSACities();
            KSACity.KSACityID = this.KSACityID;
            KSACity.KSACityName = this.KSACityName;
            KSACity.KSARegionID = this.KSARegion.KSARegionID;
            KSACity.LastUpdatedDate = DateTime.Now;
            this.KSACityID = new KSACitiesDAL().Update(KSACity);
            if (this.KSACityID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }
            return result;
        }

        public static Result Remove(int KSACityID)
        {
            try
            {
                Result result = null;
                new KSACitiesDAL().Delete(KSACityID);
                return result = new Result()
                {
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public List<KSACitiesBLL> GetKSACities()
        {
            List<KSACities> KSACitiesList = new KSACitiesDAL().GetKSACities();
            List<KSACitiesBLL> KSACitiesBLLList = new List<KSACitiesBLL>();
            if (KSACitiesList.Count > 0)
            {
                foreach (var item in KSACitiesList)
                {
                    KSACitiesBLLList.Add(new KSACitiesBLL()
                    {
                        KSACityID = item.KSACityID,
                        KSACityName = item.KSACityName,
                        KSARegion = new KSARegionsBLL().GetByKSARegionID(item.KSARegionID)
                    });
                }
            }

            return KSACitiesBLLList;
        }

        public KSACitiesBLL GetByKSACityID(int KSACityID)
        {
            return GetKSACities().SingleOrDefault(x => x.KSACityID.Equals(KSACityID));
        }

        public List<KSACitiesBLL> GetByKSARegionID(int KSARegionID)
        {
            return GetKSACities().Where(x => x.KSARegion.KSARegionID.Equals(KSARegionID)).ToList();
        }

        public KSACitiesBLL MapKSACity(KSACities KSACity)
        {
            try
            {
                KSACitiesBLL KSACityBLL = null;
                if (KSACity != null)
                {
                    KSACityBLL = new KSACitiesBLL()
                    {
                        KSACityID = KSACity.KSACityID,
                        KSACityName = KSACity.KSACityName,
                        KSARegion = new KSARegionsBLL().MapKSARegion(KSACity.KSARegions),
                    };
                }
                return KSACityBLL;
            }
            catch
            {
                throw;
            }
        }
    }
}