using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class RanksBLL : CommonEntity, IEntity
    {
        public virtual int RankID
        {
            get;
            set;
        }

        public virtual string RankName
        {
            get;
            set;
        }

        public RanksBLL NextRank { get; set; }

        public virtual RanksCategoriesBLL RankCategory
        {
            get;
            set;
        }

        public virtual double TransfareAllowance { get; set; }

        public virtual double InternalDelegation { get; set; }

        public virtual double ExternalDelegation { get; set; }

        public bool IsActiveForPromotion { get; set; }

        public virtual IEnumerable<OrganizationsJobsBLL> OrganizationsJobsBLL
        {
            get;
            set;
        }

        public Result UpdateIsPromotion(string RankIDs)
        {
            Result result = new Result();
            result.EnumType = typeof(RanksValidationEnum);

            //if (string.IsNullOrEmpty (RankIDs))
            //{
            //    result.EnumMember = RanksValidationEnum.RejectedBecauseOfNoCheckBoxSelected.ToString();
            //}
            //else
            if (RankIDs.Split(',').GetUpperBound(0) >= 1)
            {
                result.EnumMember = RanksValidationEnum.RejectedBecauseOfCheckBoxMultipleSelected.ToString();
            }
            else
            {
                result.Entity = this;
                result.EnumMember = RanksValidationEnum.Done.ToString();
            }

            if (result.EnumMember == RanksValidationEnum.Done.ToString())
            {
                if (string.IsNullOrEmpty(RankIDs))
                    this.RankID = 0;
                else
                    this.RankID = Convert.ToInt32(RankIDs);

                new RanksDAL().UpdateIsPromotion(new Ranks() { RankID = this.RankID, LastUpdatedDate = DateTime.Now ,LastUpdatedBy=LoginIdentity.EmployeeCodeID});

                result.Entity = this;
                result.EnumMember = AllowanceValidationEnum.Done.ToString();
            }

            return result;
        }

        public List<RanksBLL> GetRanks()
        {
            List<Ranks> RanksList = new RanksDAL().GetRanks();
            List<RanksBLL> RanksBLLList = new List<RanksBLL>();
            if (RanksList.Count > 0)
            {
                foreach (var item in RanksList)
                    RanksBLLList.Add(new RanksBLL().MapRank(item));
            }

            return RanksBLLList;
        }

        public RanksBLL GetByRankID(int RankID)
        {
            return GetRanks().FirstOrDefault(x => x.RankID.Equals(RankID));
        }

        public RanksBLL GetPreviousRankByRankID(int RankID)
        {
            return GetRanks().FirstOrDefault(x => x.NextRank.RankID.Equals(RankID));
        }

        public List<RanksBLL> GetByRankCategoryID(int RankCategoryID)
        {
            return GetRanks().Where(x => x.RankCategory.RankCategoryID.Equals(RankCategoryID)).ToList();
        }

        public RanksBLL GetActiveRankForPromotion()
        {
            return this.GetRanks().FirstOrDefault(x => x.IsActiveForPromotion == true);
        }

        internal RanksBLL MapRank(Ranks Rank)
        {
            try
            {
                RanksBLL RankBLL = null;
                if (Rank != null)
                {
                    RankBLL = new RanksBLL()
                    {
                        RankID = Rank.RankID,
                        RankName = Rank.RankName,
                        TransfareAllowance = Rank.TransfareAllowance.HasValue ? Rank.TransfareAllowance.Value : 0,
                        InternalDelegation = Rank.InternalDelegation.HasValue ? Rank.InternalDelegation.Value : 0,
                        ExternalDelegation = Rank.ExternalDelegation.HasValue ? Rank.ExternalDelegation.Value : 0,
                        RankCategory = Rank.RanksCategories != null ? new RanksCategoriesBLL().MapRanksCategories(Rank.RanksCategories) : new RanksCategoriesBLL().GetByRankCategoryID(Rank.RankCategoryID),
                        NextRank = Rank.NextRankID.HasValue ? new RanksBLL() { RankID = Rank.NextRankID.Value } : null,
                        IsActiveForPromotion = Rank.IsActiveForPromotion.HasValue ? Rank.IsActiveForPromotion.Value : false
                    };
                }
                return RankBLL;
            }
            catch
            {
                throw;
            }
        }
    }
}