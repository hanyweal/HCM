using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class RanksTicketsClassesBLL : CommonEntity, IEntity
    {
        public virtual int RankTicketClassID
        {
            get;
            set;
        }

        public virtual RanksBLL Rank
        {
            get;
            set;
        }

        public virtual TicketsClassesBLL TicketClass
        {
            get;
            set;
        }

        public virtual IEnumerable<OrganizationsJobsBLL> OrganizationsJobsBLL
        {
            get;
            set;
        }

        public List<RanksTicketsClassesBLL> GetRanksTicketsClasses()
        {
            List<RanksTicketsClasses> RanksTicketsClassesList = new RanksTicketsClassesDAL().GetRanksTicketsClasses();
            List<RanksTicketsClassesBLL> RanksTicketsClassesBLLList = new List<RanksTicketsClassesBLL>();
            if (RanksTicketsClassesList.Count > 0)
            {
                foreach (var item in RanksTicketsClassesList)
                {
                    RanksTicketsClassesBLLList.Add(new RanksTicketsClassesBLL()
                    {
                        RankTicketClassID = item.RankTicketClassID,
                        Rank = item.RankID.HasValue ? new RanksBLL().MapRank(item.Ranks) : null,
                        TicketClass = item.TicketClassID.HasValue ? new TicketsClassesBLL().MapTicketClass(item.TicketsClasses) : null
                    });
                }
            }

            return RanksTicketsClassesBLLList;
        }

        public virtual RanksTicketsClassesBLL GetByRankTicketClassID(int RankTicketClassID)
        {
            return GetRanksTicketsClasses().SingleOrDefault(x => x.RankTicketClassID.Equals(RankTicketClassID));
        }

        public List<RanksTicketsClassesBLL> GetByTicketClassID(int TicketClassID)
        {
            return GetRanksTicketsClasses().Where(x => x.TicketClass.TicketClassID.Equals(TicketClassID)).ToList();
        }

        public RanksTicketsClassesBLL GetRanksTicketsClassesByRankID(int RankID)
        {
            return GetRanksTicketsClasses().Where(x => x.Rank.RankID.Equals(RankID)).FirstOrDefault();
        }

        public virtual Result Add()
        {
            Result result = null;
            result = new Result();
            RanksTicketsClasses RankTicketClass = new RanksTicketsClasses();
            RankTicketClass.RankID = this.Rank.RankID;
            RankTicketClass.TicketClassID = this.TicketClass.TicketClassID;
            RankTicketClass.CreatedDate = DateTime.Now;
            this.RankTicketClassID = new RanksTicketsClassesDAL().Insert(RankTicketClass);
            if (this.RankTicketClassID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }

            return result;
        }

        public virtual Result Update()
        {
            Result result = new Result();
            RanksTicketsClasses RankTicketClass = new RanksTicketsClasses();
            RankTicketClass.RankTicketClassID = this.RankTicketClassID;
            RankTicketClass.RankID = this.Rank.RankID;
            RankTicketClass.TicketClassID = this.TicketClass.TicketClassID;
            RankTicketClass.LastUpdatedDate = DateTime.Now;
            this.RankTicketClassID = new RanksTicketsClassesDAL().Update(RankTicketClass);
            if (this.RankTicketClassID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }
            return result;
        }

        public static Result Remove(int RankTicketClassID)
        {
            try
            {
                Result result = null;
                new RanksTicketsClassesDAL().Delete(RankTicketClassID);
                return result = new Result()
                {
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

    }
}