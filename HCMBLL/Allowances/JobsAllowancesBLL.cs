using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class JobsAllowancesBLL : CommonEntity, IEntity
    {
        public int JobAllowanceID { get; set; }

        public AllowancesBLL Allowance { get; set; }

        public JobsBLL Job { get; set; }

        public bool IsActive { get; set; }

        public virtual Result Add()
        {
            Result result = new Result();
            JobsAllowances JobAllowance = new JobsAllowances();
            JobAllowance.AllowanceID = this.Allowance.AllowanceID;
            JobAllowance.JobID = this.Job.JobID; 
            JobAllowance.IsActive = true;
            JobAllowance.CreatedDate = DateTime.Now;
            JobAllowance.CreatedBy = this.LoginIdentity.EmployeeCodeID;
            this.JobAllowanceID = new JobsAllowancesDAL().Insert(JobAllowance);
            if (this.JobAllowanceID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(AllowanceAllowEnum);
                result.EnumMember = AllowanceAllowEnum.Done.ToString();
            }

            return result;
        }

        public virtual Result Update()
        {
            Result result = new Result();
            JobsAllowances JobAllowance = new JobsAllowances();
            JobAllowance.JobAllowanceID = this.JobAllowanceID;
            JobAllowance.AllowanceID = this.Allowance.AllowanceID;
            JobAllowance.JobID = this.Job.JobID; 
            JobAllowance.IsActive = this.IsActive;
            JobAllowance.LastUpdatedDate = DateTime.Now;
            JobAllowance.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;
            this.JobAllowanceID = new JobsAllowancesDAL().Update(JobAllowance);
            if (this.JobAllowanceID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(AllowanceAllowEnum);
                result.EnumMember = AllowanceAllowEnum.Done.ToString();
            }
            return result;
        }

        public Result Remove(int JobAllowanceID)
        {
            try
            {
                Result result = null;
                new JobsAllowancesDAL().Delete(JobAllowanceID, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(AllowanceAllowEnum),
                    EnumMember = AllowanceAllowEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public List<JobsAllowancesBLL> GetJobsAllowances()
        {
            List<JobsAllowances> JobAllowanceList = new JobsAllowancesDAL().GetJobsAllowances();
            List<JobsAllowancesBLL> AllowancesBLLList = new List<JobsAllowancesBLL>();
            if (JobAllowanceList.Count > 0)
            {
                foreach (var item in JobAllowanceList)
                {
                    AllowancesBLLList.Add(new JobsAllowancesBLL()
                    {
                        JobAllowanceID = item.JobAllowanceID,
                        Allowance = new AllowancesBLL().MapAllowance(item.Allowances),
                        Job = new JobsBLL().MapJob(item.Jobs),                        
                        IsActive = item.IsActive
                    });
                }
            }

            return AllowancesBLLList;
        }

        public JobsAllowancesBLL GetByJobAllowanceID(int JobAllowanceID)
        {
            return GetJobsAllowances().SingleOrDefault(x => x.JobAllowanceID.Equals(JobAllowanceID));
        }

        public List<JobsAllowancesBLL> GetByJobID(int JobID)
        {
            return GetJobsAllowances().Where(x => x.Job.JobID.Equals(JobID)).ToList();
        }

        public List<JobsAllowancesBLL> GetByAllowanceID(int AllowanceID)
        {
            return GetJobsAllowances().Where(x => x.Allowance.AllowanceID.Equals(AllowanceID)).ToList();
        }

        public AllowanceAllowEnum IsAllowedAllowanceForJob(int JobID,int AllowanceID)
        {
            AllowanceAllowEnum result = AllowanceAllowEnum.NotAllowedBecauseOfNotAllowedForJob;
            JobsAllowancesBLL JobAllowance = GetJobsAllowances()
                                            .Where(ja => ja.Allowance.AllowanceID == AllowanceID && ja.Job.JobID == JobID)
                                            .FirstOrDefault();
            if (JobAllowance != null)
            {
                if (JobAllowance.JobAllowanceID > 0)
                {
                    result = AllowanceAllowEnum.Done;
                }
            }

            return result;
        }

        public AllowanceAllowEnum IsJobAllowanceActive(int JobID, int AllowanceID)
        {
            AllowanceAllowEnum result = AllowanceAllowEnum.NotAllowedBecauseOfStopedForJob;
            JobsAllowancesBLL JobAllowance = GetJobsAllowances()
                                                .Where(ja => ja.Allowance.AllowanceID == AllowanceID && ja.Job.JobID == JobID && ja.IsActive)
                                                .FirstOrDefault();
            if (JobAllowance != null)
            {
                if (JobAllowance.JobAllowanceID > 0)
                {
                    result = AllowanceAllowEnum.Done;
                }
            }

            return result;
        }   
    }
}