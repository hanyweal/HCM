using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class AllowancesBLL : CommonEntity, IEntity
    {
        public int AllowanceID
        {
            get;
            set;
        }

        public string AllowanceName
        {
            get;
            set;
        }

        public AllowancesAmountTypesBLL AllowanceAmountType
        {
            get;
            set;
        }

        public AllowancesCalculationTypesBLL AllowanceCalculationType
        {
            get;
            set;
        }

        public double AllowanceAmount
        {
            get;
            set;
        }
        /// <summary>
        /// this property for HiringNewEmployee View to allow user multiSelect 
        /// </summary>
        public bool IsSelected
        {
            get;
            set;
        }

        public bool IsActive { get; set; }

        public virtual Result Add()
        {
            Result result = new Result();
            Allowances Allowance = new Allowances();
            Allowance.AllowanceName = this.AllowanceName;
            Allowance.AllowanceAmountTypeID = this.AllowanceAmountType.AllowanceAmountTypeID;
            Allowance.AllowanceCalculationTypeID = this.AllowanceCalculationType.AllowanceCalculationTypeID;
            Allowance.AllowanceAmount = this.AllowanceAmount;
            Allowance.IsActive = true;
            Allowance.CreatedDate = DateTime.Now;
            Allowance.CreatedBy = this.LoginIdentity.EmployeeCodeID;
            this.AllowanceID = new AllowancesDAL().Insert(Allowance);
            if (this.AllowanceID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }

            return result;
        }

        public virtual Result Update()
        {
            Result result = new Result();
            Allowances Allowance = new Allowances();
            Allowance.AllowanceID = this.AllowanceID;
            Allowance.AllowanceName = this.AllowanceName;
            Allowance.AllowanceAmountTypeID = this.AllowanceAmountType.AllowanceAmountTypeID;
            Allowance.AllowanceCalculationTypeID = this.AllowanceCalculationType.AllowanceCalculationTypeID;
            Allowance.AllowanceAmount = this.AllowanceAmount;
            Allowance.IsActive = this.IsActive;
            Allowance.LastUpdatedDate = DateTime.Now;
            Allowance.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;
            this.AllowanceID = new AllowancesDAL().Update(Allowance);
            if (this.AllowanceID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }
            return result;
        }

        public Result Remove(int AllowanceID)
        {
            try
            {
                
                Result result = null;
                new AllowancesDAL().Delete(AllowanceID,this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public List<AllowancesBLL> GetAllowances()
        {
            List<Allowances> AllowancesList = new AllowancesDAL().GetAllowances();
            List<AllowancesBLL> AllowancesBLLList = new List<AllowancesBLL>();
            if (AllowancesList.Count > 0)
            {
                foreach (var item in AllowancesList)
                {
                    AllowancesBLLList.Add(new AllowancesBLL()
                    {
                        AllowanceID = item.AllowanceID,
                        AllowanceName = item.AllowanceName,
                        AllowanceAmountType = new AllowancesAmountTypesBLL().GetByAllowanceAmountTypeID(item.AllowanceAmountTypeID),
                        AllowanceCalculationType = new AllowancesCalculationTypesBLL().MapAllowanceCalculationType(item.AllowancesCalculationTypes),
                        AllowanceAmount = item.AllowanceAmount,
                        IsActive = item.IsActive
                    });
                }
            }

            return AllowancesBLLList;
        }

        public AllowancesBLL GetByAllowanceID(int AllowanceID)
        {
            return GetAllowances().SingleOrDefault(x => x.AllowanceID.Equals(AllowanceID));
        }

        public List<AllowancesBLL> GetByAllowanceAmountTypeID(int AllowanceAmountTypeID)
        {
            return GetAllowances().Where(x => x.AllowanceAmountType.AllowanceAmountTypeID.Equals(AllowanceAmountTypeID)).ToList();
        }

        public AllowanceAllowEnum IsAllowanceActive(int AllowanceID)
        {
            AllowanceAllowEnum result = AllowanceAllowEnum.NotAllowedBecauseOfStoped;
            AllowancesBLL allowance = GetAllowances().SingleOrDefault(x => x.AllowanceID.Equals(AllowanceID) && x.IsActive);
            if (allowance != null)
            {
                if (allowance.AllowanceID > 0)
                {
                    result = AllowanceAllowEnum.Done;
                }
            }
            return result;
        }


        internal AllowancesBLL MapAllowance(Allowances item)
        {
            return item != null ? 
                new AllowancesBLL()
                    {
                        AllowanceID = item.AllowanceID,
                        AllowanceName = item.AllowanceName,
                        AllowanceAmountType = new AllowancesAmountTypesBLL().MapAllowanceAmountType(item.AllowancesAmountTypes),
                        AllowanceCalculationType = new AllowancesCalculationTypesBLL().MapAllowanceCalculationType(item.AllowancesCalculationTypes),
                        AllowanceAmount = item.AllowanceAmount,
                        IsActive = item.IsActive
                    }
                : null;
        }
    }
}