using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class HolidaysSettingsBLL : CommonEntity, IEntity
    {
        public int HolidaySettingID
        {
            get;
            set;
        }

        public HolidaysTypesBLL HolidayType
        {
            get;
            set;
        }

        public MaturityYearsBalancesBLL MaturityYear
        {
            get;
            set;
        }

        public List<MaturityYearsBalancesBLL> MaturityYearsList
        {
            get
            {
               return new MaturityYearsBalancesBLL().GetMaturityYearsBalances();
            }
        }

        public DateTime HolidaySettingStartDate { get; set; }

        public DateTime HolidaySettingEndDate { get; set; }

        public int HolidaySettingPeriod
        {
            get
            {
                return this.HolidaySettingEndDate.Subtract(this.HolidaySettingStartDate).Days + 1;
            }
        }

        public virtual Result Add()
        {
            Result result = null;

            #region Validate both start and end date in the same year
            if (Globals.Calendar.GetUmAlQuraYear(this.HolidaySettingStartDate) != Globals.Calendar.GetUmAlQuraYear(this.HolidaySettingEndDate))
            {
                    result = new Result();
                    result.EnumType = typeof(HolidaySettingValidationEnum);
                    result.EnumMember = HolidaySettingValidationEnum.RejectedBecauseOfHolidaysDurationShouldBeInTheSameHijriYear.ToString();
                    return result;
            }
            #endregion

            //--Validate if holiday days cross to another holdays or not.
            result = IsNoConflictWithOtherHolidaySettings(this.HolidaySettingStartDate, this.HolidaySettingEndDate);
            if (result != null)
                return result;
            result = new Result();
            HolidaysSettings HolidaySetting = new HolidaysSettings();
            HolidaySetting.HolidayTypeID = this.HolidayType.HolidayTypeID;
            HolidaySetting.MaturityYearID = this.MaturityYear.MaturityYearID;
            HolidaySetting.HolidaySettingStartDate = this.HolidaySettingStartDate;
            HolidaySetting.HolidaySettingEndDate = this.HolidaySettingEndDate;
            HolidaySetting.CreatedDate = DateTime.Now;
            HolidaySetting.CreatedBy = this.LoginIdentity.EmployeeCodeID;
           
            this.HolidaySettingID = new HolidaysSettingsDAL().Insert(HolidaySetting);
            if (this.HolidaySettingID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }

            return result;
        }

        public virtual Result Update()
        {

            Result result = new Result();

            #region Validate both start and end date in the same year
            if (Globals.Calendar.GetUmAlQuraYear(this.HolidaySettingStartDate) != Globals.Calendar.GetUmAlQuraYear(this.HolidaySettingEndDate))
            {
                result = new Result();
                result.EnumType = typeof(HolidaySettingValidationEnum);
                result.EnumMember = HolidaySettingValidationEnum.RejectedBecauseOfHolidaysDurationShouldBeInTheSameHijriYear.ToString();
                return result;
            }
            #endregion

            #region Validate if there is any employee assign for this holiday's setting
            List<HolidaysAttendanceBLL> HolidaysAttendanceList = new HolidaysAttendanceBLL().GetByHolidaySettingID(this.HolidaySettingID);
            List<HolidaysAttendanceDetailsBLL> HolidaysAttendanceDetailsList = new List<HolidaysAttendanceDetailsBLL>();
            HolidaysAttendanceList.ForEach(c =>HolidaysAttendanceDetailsList.AddRange(c.HolidaysAttendanceDetails));

            if (HolidaysAttendanceDetailsList.Count>0)
            {
                result = new Result();
                result.EnumType = typeof(HolidaySettingValidationEnum);
                result.EnumMember = HolidaySettingValidationEnum.RejectedBecauseOfEmployeeAssignToThisHolidaySetting.ToString();
                return result;
            }
            #endregion

            result = IsNoConflictWithOtherHolidaySettings(this.HolidaySettingStartDate, this.HolidaySettingEndDate);
            if (result != null)
                return result;
            result = new Result();
            HolidaysSettings HolidaySetting = new HolidaysSettings();
            HolidaySetting.HolidaySettingID = this.HolidaySettingID;
            HolidaySetting.HolidayTypeID = this.HolidayType.HolidayTypeID;
            HolidaySetting.MaturityYearID = this.MaturityYear.MaturityYearID;
            HolidaySetting.HolidaySettingStartDate = this.HolidaySettingStartDate;
            HolidaySetting.HolidaySettingEndDate = this.HolidaySettingEndDate;
            HolidaySetting.LastUpdatedDate = DateTime.Now;
            HolidaySetting.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;
            this.HolidaySettingID = new HolidaysSettingsDAL().Update(HolidaySetting);
            if (this.HolidaySettingID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }
            return result;
        }

        public Result Remove(int HolidaySettingID)
        {
            try
            {

                Result result = null;
                new HolidaysSettingsDAL().Delete(HolidaySettingID, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public List<HolidaysSettingsBLL> GetHolidaysSettings()
        {
            List<HolidaysSettings> HolidaysSettingsList = new HolidaysSettingsDAL().GetHolidaysSettings();
            List<HolidaysSettingsBLL> HolidaysSettingsBLLList = new List<HolidaysSettingsBLL>();
            if (HolidaysSettingsList.Count > 0)
            {
                foreach (var item in HolidaysSettingsList)
                {
                    HolidaysSettingsBLLList.Add(new HolidaysSettingsBLL()
                    {
                        HolidaySettingID = item.HolidaySettingID,
                        HolidayType = new HolidaysTypesBLL().GetByHolidayTypeID(item.HolidayTypeID),
                        HolidaySettingEndDate = item.HolidaySettingEndDate,
                        HolidaySettingStartDate = item.HolidaySettingStartDate,
                        MaturityYear = new MaturityYearsBalancesBLL().MapMaturityYearBalance(item.MaturityYearsBalances),
                    });
                }
            }

            return HolidaysSettingsBLLList;
        }

        public HolidaysSettingsBLL GetByHolidaySettingID(int HolidaySettingID)
        {
            HolidaysSettingsBLL HolidaySettingBLL = null;
            HolidaysSettings HolidaySetting = new HolidaysSettingsDAL().GetByHolidaySettingID(HolidaySettingID);
            if (HolidaySetting != null)
            {
                HolidaySettingBLL = new HolidaysSettingsBLL().MapHolidaySetting(HolidaySetting);
            }
            return HolidaySettingBLL;
        }

        public HolidaysSettingsBLL GetByMaturityYearIDAndHolidayTypeID(int MaturityYearID,int HolidayTypeID)
        {
            HolidaysSettingsBLL HolidaySettingBLL = GetHolidaysSettings().FirstOrDefault(x => x.MaturityYear.MaturityYearID == MaturityYearID  && x.HolidayType.HolidayTypeID == HolidayTypeID);
            return HolidaySettingBLL;
        }

        public List<HolidaysSettingsBLL> GetByMaturityYearID(int MaturityYearID)
        {
            List<HolidaysSettings> HolidaysSettingsList = new HolidaysSettingsDAL().GetByMaturityYearID(MaturityYearID);
            List<HolidaysSettingsBLL> HolidaysSettingsBLLList = new List<HolidaysSettingsBLL>();
            if (HolidaysSettingsList.Count > 0)
            {
                foreach (var item in HolidaysSettingsList)
                {
                    HolidaysSettingsBLLList.Add(MapHolidaySetting(item));
                }
            }

            return HolidaysSettingsBLLList;
        }

        internal Result IsNoConflictWithOtherHolidaySettings(DateTime StartDate, DateTime EndDate)
        {
            Result result = null;

            #region Validaion for conflict with InternshipScholarship
            List<HolidaysSettings> HolidaysSettingsList = new HolidaysSettingsDAL().GetHolidaysSettings().Where(x =>(
              (StartDate >= x.HolidaySettingStartDate && StartDate <= x.HolidaySettingEndDate) ||
                        (EndDate >= x.HolidaySettingStartDate && EndDate <= x.HolidaySettingEndDate) ||
                        (StartDate >= x.HolidaySettingStartDate && EndDate <= x.HolidaySettingEndDate) ||
                        (StartDate <= x.HolidaySettingStartDate && EndDate >= x.HolidaySettingEndDate)
                      )&& x.HolidaySettingID != this.HolidaySettingID).ToList();
            if (HolidaysSettingsList.Count() != 0)
            {
                result = new Result();
                //result.Entity = MapHolidaySetting(HolidaysSettingsList.FirstOrDefault());
                result.EnumType = typeof(HolidaySettingValidationEnum);
                result.EnumMember = HolidaySettingValidationEnum.RejectedBecauseOfConflictWithHolidaySetting.ToString();
                return result;
            }
            #endregion
            return result;
        }

        internal HolidaysSettingsBLL MapHolidaySetting(HolidaysSettings item)
        {
            return item != null ?
                new HolidaysSettingsBLL()
                    {
                        HolidaySettingID = item.HolidaySettingID,
                        HolidayType = new HolidaysTypesBLL().MapHolidayType(item.HolidaysTypes),
                        HolidaySettingEndDate = item.HolidaySettingEndDate,
                        HolidaySettingStartDate = item.HolidaySettingStartDate,
                        MaturityYear = new MaturityYearsBalancesBLL().MapMaturityYearBalance(item.MaturityYearsBalances),
                        CreatedBy = new EmployeesCodesBLL().MapEmployeeCode(item.CreatedByNav),
                        CreatedDate = item.CreatedDate,

                    }
                : null;
        }
    }
}