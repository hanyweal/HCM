using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace HCMBLL
{
    public class ExternalScholarshipsBLL : BaseScholarshipsBLL
    {
        public override ScholarshipsTypesEnum ScholarshipTypeEnum
        {
            get
            {
                return ScholarshipsTypesEnum.External;
            }
        }

        public virtual CountriesBLL Country
        {
            get;
            set;
        }

        internal override Scholarships DALInstance
        {
            get
            {
                Scholarships Scholarship = base.DALInstance;
                Scholarship.ScholarshipTypeID = (int)this.ScholarshipTypeEnum;
                Scholarship.CountryID = this.Country != null ? this.Country.CountryID : 0;//,this.Country.CountryID;              
                return Scholarship;
            }
        }

        public override Result Add()
        {
            try
            {
                Result result = new Result();
                result = base.Add();
                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Edit()
        {
            try
            {
                this.Employee = this.GetByScholarshipID(this.ScholarshipID).Employee;
                Result result = new Result();
                result = base.Edit();
                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Extend()
        {
            try
            {
                this.Employee = this.GetByScholarshipID(this.ScholarshipID).Employee;
                Result result = new Result();
                result = base.Extend();
                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Break()
        {
            try
            {
                Result result = base.Break();
                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Joining()
        {
            try
            {
                Result result = new Result();
                #region Validation for dates
                if (this.ScholarshipJoinDate < this.ScholarshipStartDate)
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = ScholarshipsValidationEnum.RejectedBecauseOfScholarshipJoinDateBeforeScholarshipStartDate.ToString();
                    return result;
                }
                #endregion

                result = base.Joining();
                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Cancel()
        {
            try
            {
                Result result = base.Cancel();
                return result;
            }
            catch
            {
                throw;
            }
        }
    }
}