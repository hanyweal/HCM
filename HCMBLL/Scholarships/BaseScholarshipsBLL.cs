using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace HCMBLL
{
    public class BaseScholarshipsBLL : CommonEntity, IScholarships
    {
        public virtual int ScholarshipID
        {
            get;
            set;
        }

        public virtual DateTime ScholarshipStartDate
        {
            get;
            set;
        }

        public virtual DateTime ScholarshipEndDate
        {
            get;
            set;
        }

        public virtual DateTime? ScholarshipJoinDate
        {
            get;
            set;
        }

        public int ScholarshipPeriod
        {
            get
            {
                return this.ScholarshipEndDate.Subtract(this.ScholarshipStartDate).Days + 1;
            }
        }

        public virtual string ScholarshipReason
        {
            get;
            set;
        }

        public virtual ScholarshipsTypesBLL ScholarshipType
        {
            get;
            set;
        }

        public virtual bool IsCanceled { get; set; }

        public virtual bool? IsPassed { get; set; }

        public string Notes { get; set; }

        public virtual ScholarshipsTypesEnum ScholarshipTypeEnum
        {
            get;
            set;
        }

        public virtual EmployeesCodesBLL Employee
        {
            get;
            set;
        }

        public virtual QualificationsBLL Qualification
        {
            get;
            set;
        }

        internal virtual Scholarships DALInstance
        {
            get
            {
                Scholarships Scholarship = new Scholarships()
                {
                    ScholarshipID = this.ScholarshipID,
                    ScholarshipTypeID = (int)this.ScholarshipTypeEnum,
                    ScholarshipStartDate = this.ScholarshipStartDate,
                    ScholarshipEndDate = this.ScholarshipEndDate,
                    QualificationID = this.Qualification != null ? this.Qualification.QualificationID : 0,
                    ScholarshipReason = this.ScholarshipReason != null ? this.ScholarshipReason : null,
                    IsCanceled = false,
                    EmployeeCodeID = this.Employee != null ? this.Employee.EmployeeCodeID : 0,
                    IsPassed = false,
                    ScholarshipJoinDate = this.ScholarshipJoinDate,
                    CreatedDate = DateTime.Now,
                    CreatedBy = this.LoginIdentity != null ? this.LoginIdentity.EmployeeCodeID : 0,
                    LastUpdatedDate = DateTime.Now,
                    LastUpdatedBy = this.LoginIdentity != null ? this.LoginIdentity.EmployeeCodeID : 0,
                };
                return Scholarship;
            }
        }

        public virtual List<BaseScholarshipsBLL> GetScholarships()
        {
            List<BaseScholarshipsBLL> ScholarshipBLLList = new List<BaseScholarshipsBLL>();
            List<Scholarships> Scholarships = new ScholarshipsDAL().GetScholarships();
            foreach (var item in Scholarships)
            {
                BaseScholarshipsBLL ScholarshipBLL = null;
                switch (item.ScholarshipTypeID)
                {
                    case (Int32)ScholarshipsTypesEnum.Internal:
                        ScholarshipBLL = new InternalScholarshipsBLL()
                        {
                            Location = item.Location,
                            KSACity = new KSACitiesBLL().MapKSACity(item.KSACities),
                        };
                        break;
                    case (Int32)ScholarshipsTypesEnum.External:
                        ScholarshipBLL = new ExternalScholarshipsBLL()
                        {
                            Country = new CountriesBLL().MapCountry(item.Countries),
                        };
                        break;
                    default:
                        break;
                }

                ScholarshipBLL.ScholarshipID = item.ScholarshipID;
                ScholarshipBLL.ScholarshipStartDate = item.ScholarshipStartDate;
                ScholarshipBLL.ScholarshipEndDate = item.ScholarshipEndDate;
                ScholarshipBLL.ScholarshipTypeEnum = (ScholarshipsTypesEnum)item.ScholarshipTypeID;//new ScholarshipsTypesBLL().MapScholarshipType(item.ScholarshipsTypes);
                ScholarshipBLL.ScholarshipType = new ScholarshipsTypesBLL().MapScholarshipType(item.ScholarshipsTypes);
                ScholarshipBLL.Employee = new EmployeesCodesBLL().MapEmployeeCode(item.EmployeesCodes);
                ScholarshipBLL.Qualification = new QualificationsBLL().MapQualification(item.Qualifications);
                ScholarshipBLL.ScholarshipReason = item.ScholarshipReason;
                ScholarshipBLL.ScholarshipJoinDate = item.ScholarshipJoinDate;
                ScholarshipBLL.IsPassed = item.IsPassed;
                ScholarshipBLL.CreatedDate = item.CreatedDate;
                ScholarshipBLLList.Add(ScholarshipBLL);
            }
            return ScholarshipBLLList;
        }

        public BaseScholarshipsBLL GetByScholarshipID(int ScholarshipID)
        {
            try
            {
                Scholarships Scholarship = new ScholarshipsDAL().GetByScholarshipID(ScholarshipID);
                return new BaseScholarshipsBLL().MapScholarship(Scholarship);
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Add()
        {
            Result result = new Result();
            result = CommonHelper.IsNoConflictWithOtherProcess(this.Employee.EmployeeCodeID, this.ScholarshipStartDate, this.ScholarshipEndDate);
            if (result != null)
                return result;

            result = this.AddScholarship();
            return result;
        }

        private Result AddScholarship()
        {
            Result result = null;

            List<ScholarshipsDetails> ScholarshipDetail = new List<ScholarshipsDetails>();
            ScholarshipDetail.Add(this.GetScholarshipDetailInstance(ScholarshipsActionsEnum.Add));
            Scholarships Scholarship = this.DALInstance;
            Scholarship.ScholarshipsDetails = ScholarshipDetail;
            this.ScholarshipID = new ScholarshipsDAL().Insert(Scholarship);

            if (this.ScholarshipID != 0)
            {
                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(ScholarshipsValidationEnum);
                result.EnumMember = ScholarshipsValidationEnum.Done.ToString();
            }
            return result;
        }

        public virtual Result Edit()
        {
            Result result = IsValid();
            if (result != null)
                return result;

            #region validate for Scholarship already extended or not
            if (new ScholarshipsDetailsBLL().GetScholarshipDetailsByScholarshipID(this.ScholarshipID).Count() > 1)
            {
                result = new Result();
                result.EnumType = typeof(NoConflictWithOtherProcessValidationEnum);
                result.EnumMember = NoConflictWithOtherProcessValidationEnum.RejectedBecauseOfConflictWithScholarship.ToString();
                return result;
            }
            #endregion

            #region validate for vacation before hiring or not
            EmployeesCareersHistoryBLL HiringRecord = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.Employee.EmployeeCodeID);
            if (HiringRecord != null)
            {
                if (HiringRecord.JoinDate > this.ScholarshipStartDate)
                {
                    result = new Result();
                    result.Entity = HiringRecord;
                    result.EnumType = typeof(ScholarshipsValidationEnum);
                    result.EnumMember = ScholarshipsValidationEnum.RejectedBecauseOfBeforeHiringDate.ToString();
                    return result;
                }
            }
            #endregion

            #region validate for Conflict With Other Process
            result = CommonHelper.IsNoConflictWithOtherProcess(this.Employee.EmployeeCodeID, this.ScholarshipStartDate, this.ScholarshipEndDate);
            if (result != null)
            {
                // we should exclude this scholarship from validation

                if (result.EnumMember == NoConflictWithOtherProcessValidationEnum.RejectedBecauseOfConflictWithScholarship.ToString())
                {
                    List<BaseScholarshipsBLL> BaseScholarshipsBLLList = new EmployeesCodesBLL().GetScholarshipsByEmployeeCodeID(this.Employee.EmployeeCodeID)
                .Where(
                     x => x.IsCanceled == false && x.ScholarshipID != this.ScholarshipID && (
                        (ScholarshipStartDate >= x.ScholarshipStartDate && ScholarshipStartDate <= x.ScholarshipEndDate) ||
                        (ScholarshipEndDate >= x.ScholarshipStartDate && ScholarshipEndDate <= x.ScholarshipEndDate) ||
                        (ScholarshipStartDate >= x.ScholarshipStartDate && ScholarshipEndDate <= x.ScholarshipEndDate) ||
                        (ScholarshipEndDate <= x.ScholarshipEndDate && ScholarshipEndDate >= x.ScholarshipEndDate))
                      )
                .ToList();
                    if (BaseScholarshipsBLLList.Count() != 0)
                    {
                        result = new Result();
                        result.EnumType = typeof(NoConflictWithOtherProcessValidationEnum);
                        result.EnumMember = NoConflictWithOtherProcessValidationEnum.RejectedBecauseOfConflictWithScholarship.ToString();
                        return result;
                    }
                    else
                        result = null;
                }
                //return result;
            }
            #endregion

            if (result != null)
                return result;

            result = this.EditScholarship();
            return result;
        }

        private Result EditScholarship()
        {
            Result result = null;

            Scholarships Scholarship = DALInstance;
            new ScholarshipsDAL().Update(Scholarship);
            // update dates of creation record
            new ScholarshipsDetailsDAL().UpdateCreationDates(new ScholarshipsDetails()
            {
                FromDate = this.ScholarshipStartDate,
                ToDate = ScholarshipEndDate,
                ScholarshipID = this.ScholarshipID,
                LastUpdatedDate = DateTime.Now,
                LastUpdatedBy = this.LoginIdentity.EmployeeCodeID
            });
            result = new Result();
            result.Entity = this;
            result.EnumMember = ScholarshipsValidationEnum.Done.ToString();
            return result;
        }

        public virtual Result Cancel()
        {
            Result result = IsValid();
            //return result;
            if (result != null)
                return result;

            result = this.CancelScholarship();
            return result;
        }

        private Result CancelScholarship()
        {
            Result result = null;
            Scholarships Scholarship = this.DALInstance;
            Scholarship.IsCanceled = true;
            new ScholarshipsDAL().UpdateScholarshipStatus(Scholarship);
            int ScholarshipDetailID = new ScholarshipsDetailsDAL().Insert(this.GetScholarshipDetailInstance(ScholarshipsActionsEnum.Cancel));

            if (ScholarshipDetailID != 0)
            {
                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(DelegationsValidationEnum);
                result.EnumMember = ScholarshipsValidationEnum.Done.ToString();
            }
            return result;
        }

        public virtual Result Extend()
        {
            Result result = IsValid();
            if (result != null)
                return result;

            #region validate for Conflict With Other Process

            result = CommonHelper.IsNoConflictWithOtherProcess(this.Employee.EmployeeCodeID, this.ScholarshipStartDate, this.ScholarshipEndDate);
            #endregion

            if (result != null)
                return result;

            result = this.ExtendScholarship();
            return result;
        }

        private Result ExtendScholarship()
        {
            Result result = null;
            Scholarships Scholarships = DALInstance;
            Scholarships.ScholarshipStartDate = this.GetByScholarshipID(this.ScholarshipID).ScholarshipStartDate;
            new ScholarshipsDAL().UpdateScholarshipStatus(Scholarships);
            int ScholarshipDetailID = new ScholarshipsDetailsDAL().Insert(this.GetScholarshipDetailInstance(ScholarshipsActionsEnum.Extend));

            if (ScholarshipDetailID != 0)
            {
                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(DelegationsValidationEnum);
                result.EnumMember = ScholarshipsValidationEnum.Done.ToString();
            }
            return result;
        }

        public virtual Result Break()
        {
            Result result = IsValid();

            if (result != null)
                return result;

            result = this.BreakScholarship();
            return result;
        }

        private Result BreakScholarship()
        {
            Result result = null;
            int ScholarshipDetailID = new ScholarshipsDetailsDAL().Insert(this.GetScholarshipDetailInstance(ScholarshipsActionsEnum.Break));
            new ScholarshipsDAL().UpdateScholarshipStatus(DALInstance);

            if (ScholarshipDetailID != 0)
            {
                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(DelegationsValidationEnum);
                result.EnumMember = ScholarshipsValidationEnum.Done.ToString();
            }
            return result;
        }

        public virtual Result Joining()
        {
            Result result = IsValid();

            if (result != null)
                return result;

            result = this.JoiningScholarship();
            return result;
        }

        private Result JoiningScholarship()
        {
            Result result = null;
            Scholarships Scholarship = this.DALInstance;
            Scholarship.IsPassed = this.IsPassed;
            int ScholarshipDetailID = new ScholarshipsDetailsDAL().Insert(this.GetScholarshipDetailInstance(ScholarshipsActionsEnum.Joining));
            new ScholarshipsDAL().UpdateJoinScholarshipStatus(Scholarship);

            if (ScholarshipDetailID != 0)
            {
                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(DelegationsValidationEnum);
                result.EnumMember = ScholarshipsValidationEnum.Done.ToString();
            }
            return result;
        }

        internal Result Update()
        {
            Result result = new Result();
            Scholarships Scholarship = DALInstance;
            Scholarship.IsPassed = this.IsPassed;
            Scholarship.IsCanceled = this.IsCanceled;
            Scholarship.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;
            new ScholarshipsDAL().UpdateScholarshipStatus(Scholarship);
            result.Entity = this;
            result.EnumMember = ScholarshipsValidationEnum.Done.ToString();
            return result;
        }

        public virtual Result Remove(int ScholarshipID)
        {
            try
            {
                Result result = null;
                new ScholarshipsDAL().Delete(new Scholarships() { ScholarshipID = ScholarshipID }, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(ScholarshipsValidationEnum),
                    EnumMember = ScholarshipsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public virtual int GetCountScholarshipsPeriodByEmployeeCodeID(List<Scholarships> ScholarshipsList, int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            List<Scholarships> Scholarships = ScholarshipsList.Where(
                x =>
                    ((StartDate >= x.ScholarshipStartDate && StartDate <= x.ScholarshipEndDate) ||
                    (EndDate >= x.ScholarshipStartDate && EndDate <= x.ScholarshipEndDate) ||
                    (StartDate >= x.ScholarshipStartDate && EndDate <= x.ScholarshipEndDate) ||
                    (StartDate <= x.ScholarshipStartDate && EndDate >= x.ScholarshipEndDate))
                ).ToList();

            int TotalDays = 0;
            DateTime Date;

            for (DateTime i = StartDate; i <= EndDate;)
            {
                Date = i;

                foreach (var item in Scholarships)
                {
                    if (Date >= item.ScholarshipStartDate.Date && Date <= item.ScholarshipEndDate.Date)
                        TotalDays++;
                }

                i = i.AddDays(1);
            }

            return TotalDays;
        }

        public List<BaseScholarshipsBLL> GetByEmployeeCodeID(int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            return new EmployeesCodesBLL().GetScholarshipsByEmployeeCodeID(EmployeeCodeID)
                 .Where(
                     x => x.IsCanceled == false && x.ScholarshipJoinDate == null && (
              (StartDate >= x.ScholarshipStartDate && StartDate <= x.ScholarshipEndDate) ||
                        (EndDate >= x.ScholarshipStartDate && EndDate <= x.ScholarshipEndDate) ||
                        (StartDate >= x.ScholarshipStartDate && EndDate <= x.ScholarshipEndDate) ||
                        (StartDate <= x.ScholarshipStartDate && EndDate >= x.ScholarshipEndDate)
                      ))
              .ToList();
        }

        public List<BaseScholarshipsBLL> GetByEmployeeCodeIDNotPassed(int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            return this.GetByEmployeeCodeID(EmployeeCodeID, StartDate, EndDate).Where(x => x.IsPassed == false || x.IsPassed == null).ToList();
        }

        internal BaseScholarshipsBLL MapScholarship(Scholarships Scholarship)
        {
            try
            {
                BaseScholarshipsBLL BaseScholarshipBLL = null;
                if (Scholarship != null)
                {
                    if (Scholarship.ScholarshipTypeID == Convert.ToInt16(ScholarshipsTypesEnum.Internal))
                    {
                        BaseScholarshipBLL = GenericFactoryPattern<BaseScholarshipsBLL, InternalScholarshipsBLL>.CreateInstance();
                        ((InternalScholarshipsBLL)BaseScholarshipBLL).KSACity = new KSACitiesBLL().MapKSACity(Scholarship.KSACities);
                        ((InternalScholarshipsBLL)BaseScholarshipBLL).Location = Scholarship.Location;
                    }
                    else if (Scholarship.ScholarshipTypeID == Convert.ToInt16(ScholarshipsTypesEnum.External))
                    {
                        BaseScholarshipBLL = GenericFactoryPattern<BaseScholarshipsBLL, ExternalScholarshipsBLL>.CreateInstance();
                        ((ExternalScholarshipsBLL)BaseScholarshipBLL).Country = new CountriesBLL().MapCountry(Scholarship.Countries);
                    }
                    else
                        BaseScholarshipBLL = new BaseScholarshipsBLL();


                    BaseScholarshipBLL.ScholarshipType = new ScholarshipsTypesBLL().MapScholarshipType(Scholarship.ScholarshipsTypes);
                    BaseScholarshipBLL.ScholarshipID = Scholarship.ScholarshipID;
                    BaseScholarshipBLL.ScholarshipStartDate = Scholarship.ScholarshipStartDate.Date;
                    BaseScholarshipBLL.ScholarshipEndDate = Scholarship.ScholarshipEndDate.Date;
                    BaseScholarshipBLL.CreatedDate = Scholarship.CreatedDate;
                    BaseScholarshipBLL.IsCanceled = Scholarship.IsCanceled;
                    //BaseScholarshipBLL.Employee = new EmployeesCodesBLL().MapEmployeeCode(Scholarship.EmployeesCodes);

                    BaseScholarshipBLL.CreatedBy = Scholarship.CreatedByNav != null ? new EmployeesCodesBLL().MapEmployeeCode(Scholarship.CreatedByNav) : null;

                    BaseScholarshipBLL.Employee = Scholarship.EmployeesCodes != null ? new EmployeesCodesBLL().MapEmployeeCode(Scholarship.EmployeesCodes) : null;//new EmployeesCareersHistoryBLL().MapEmployeeCareerHistory(Vacation.EmployeesCareersHistory) : null;
                    BaseScholarshipBLL.Qualification = new QualificationsBLL().MapQualification(Scholarship.Qualifications);
                    BaseScholarshipBLL.ScholarshipTypeEnum = (ScholarshipsTypesEnum)Scholarship.ScholarshipTypeID;
                    BaseScholarshipBLL.ScholarshipReason = Scholarship.ScholarshipReason;
                    BaseScholarshipBLL.ScholarshipJoinDate = Scholarship.ScholarshipJoinDate;
                    BaseScholarshipBLL.IsPassed = Scholarship.IsPassed;

                }
                return BaseScholarshipBLL;
            }
            catch
            {
                throw;
            }
        }

        public virtual List<BaseScholarshipsBLL> GetByEmployeeCodeScholarshipType(int EmployeeCodeID, ScholarshipsTypesEnum ScholarshipTypeEnum)
        {
            try
            {
                List<BaseScholarshipsBLL> BaseScholarshipsBLLList = this.GetScholarshipByEmployeeCodeID(EmployeeCodeID).Where(x => x.ScholarshipTypeEnum == ScholarshipTypeEnum).ToList();
                return BaseScholarshipsBLLList.OrderBy(x => x.ScholarshipStartDate).ToList();
            }
            catch
            {
                throw;
            }
        }

        public virtual List<BaseScholarshipsBLL> GetScholarshipByEmployeeCodeID(int EmployeeCodeID)
        {
            try
            {
                List<BaseScholarshipsBLL> BaseScholarshipsBLLList = new List<BaseScholarshipsBLL>();
                List<Scholarships> ScholarshipsList = new ScholarshipsDAL().GetScholarshipsByEmployeeCodeID(EmployeeCodeID).ToList();
                foreach (var Scholarship in ScholarshipsList)
                {
                    BaseScholarshipsBLLList.Add(this.MapScholarship(Scholarship));
                }
                return BaseScholarshipsBLLList.OrderBy(x => x.ScholarshipStartDate).ToList();
            }
            catch
            {
                throw;
            }
        }

        internal ScholarshipsDetails GetScholarshipDetailInstance(ScholarshipsActionsEnum ScholarshipsAction)
        {

            return new ScholarshipsDetails()
            {
                ScholarshipID = this.ScholarshipID,
                FromDate = this.ScholarshipStartDate,
                ToDate = this.ScholarshipEndDate,
                ScholarshipActionID = (int)ScholarshipsAction,
                CreatedDate = DateTime.Now,
                CreatedBy = this.LoginIdentity.EmployeeCodeID,
                Notes = this.Notes
            };


        }

        public virtual List<BaseScholarshipsBLL> GetCanceledScholarships(int EmployeeCodeID, ScholarshipsTypesEnum ScholarshipType)
        {
            //return this.GetByEmployeeCodeVacationType(EmployeeCodeID, VacationType).Where(x => x.IsCanceled == true).OrderBy(x => x.VacationStartDate).ToList();
            List<BaseScholarshipsBLL> ScholarshipsBLLList = new List<BaseScholarshipsBLL>();
            List<Scholarships> ScholarshipsList = new ScholarshipsDAL().GetCanceledByEmployeeCodeIDScholarshipTypeID(EmployeeCodeID, (int)ScholarshipType).ToList();
            foreach (var Scholarship in ScholarshipsList)
            {
                ScholarshipsBLLList.Add(this.MapScholarship(Scholarship));
            }
            return ScholarshipsBLLList;
        }

        public virtual List<BaseScholarshipsBLL> GetFinishedScholarships(int EmployeeCodeID, ScholarshipsTypesEnum ScholarshipType)
        {
            //return this.GetByEmployeeCodeVacationType(EmployeeCodeID, VacationType).Where(x => x.IsCanceled == true).OrderBy(x => x.VacationStartDate).ToList();
            List<BaseScholarshipsBLL> ScholarshipsBLLList = new List<BaseScholarshipsBLL>();
            List<Scholarships> ScholarshipsList = new ScholarshipsDAL().GetFinishedByEmployeeCodeIDScholarshipTypeID(EmployeeCodeID, (int)ScholarshipType).ToList();
            foreach (var Scholarship in ScholarshipsList)
            {
                ScholarshipsBLLList.Add(this.MapScholarship(Scholarship));
            }
            return ScholarshipsBLLList;
        }

        public virtual List<BaseScholarshipsBLL> GetValidScholarships(int EmployeeCodeID, ScholarshipsTypesEnum ScholarshipType)
        {
            //return this.GetByEmployeeCodeVacationType(EmployeeCodeID, VacationType).Where(x => x.IsCanceled == true).OrderBy(x => x.VacationStartDate).ToList();
            List<BaseScholarshipsBLL> ScholarshipsBLLList = new List<BaseScholarshipsBLL>();
            List<Scholarships> ScholarshipsList = new ScholarshipsDAL().GetValidByEmployeeCodeIDScholarshipTypeID(EmployeeCodeID, (int)ScholarshipType).ToList();
            foreach (var Scholarship in ScholarshipsList)
            {
                ScholarshipsBLLList.Add(this.MapScholarship(Scholarship));
            }
            return ScholarshipsBLLList;
        }
       
        private Result IsValid()
        {
            Result result = null;

            #region  validate the scholarship is canceled before or not
            if (this.IsScholarshipCanceled(this.ScholarshipID) == true)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(ScholarshipsValidationEnum);
                result.EnumMember = ScholarshipsValidationEnum.RejectedBecauseOfAlreadyCanceled.ToString();
                return result;
            }
            #endregion

            #region validate the scholarship is passed
            if (this.IsScholarshipPassed(this.ScholarshipID) == true)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(ScholarshipsValidationEnum);
                result.EnumMember = ScholarshipsValidationEnum.RejectedBecauseOfAlreadyPassed.ToString();
                return result;
            }
            #endregion

            #region  validate the scholarship is already joined
            if (this.GetByScholarshipID(this.ScholarshipID).ScholarshipJoinDate != null)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(ScholarshipsValidationEnum);
                result.EnumMember = ScholarshipsValidationEnum.RejectedBecauseOfAlreadyJoinedBefore.ToString();
                return result;
            }
            #endregion

            return result;
        }

        public bool IsScholarshipCanceled(int ScholarshipID)
        {
            bool IsCanceled = this.GetByScholarshipID(ScholarshipID).IsCanceled;
            if (IsCanceled)
                return true;

            return false;
        }

        public bool IsScholarshipPassed(int ScholarshipID)
        {
            bool? IsPassed = this.GetByScholarshipID(ScholarshipID).IsPassed;
            if (IsPassed.HasValue)
                return IsPassed.Value;

            return false;
        }
    }
}

