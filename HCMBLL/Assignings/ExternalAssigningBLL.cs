using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;


namespace HCMBLL
{
    public class ExternalAssigningBLL : BaseAssigningsBLL
    {
        public virtual string ExternalOrganization
        {
            get;
            set;
        }

        public virtual KSACitiesBLL ExternalKSACity
        {
            get;
            set;
        }

        public virtual List<ExternalAssigningBLL> GetByEmployeeCodeID(int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            return new EmployeesCodesBLL().GetExternalAssigningByEmployeeCodeID(EmployeeCodeID)
              .Where(
                   x => (StartDate >= x.AssigningStartDate && StartDate <= x.AssigningEndDate) ||
                        (EndDate >= x.AssigningStartDate && EndDate <= x.AssigningEndDate) ||
                        (StartDate >= x.AssigningStartDate && EndDate <= x.AssigningEndDate) ||
                        (StartDate <= x.AssigningStartDate && EndDate >= x.AssigningEndDate)
                      )
              .ToList();
        }

        public override Result Add()
        {
            try
            {
                Result result = base.Add();
                if (result != null)
                    return result;

                result = CommonHelper.IsNoConflictWithOtherProcess(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, this.AssigningStartDate, this.AssigningEndDate ?? DateTime.Now);
                if (result != null)
                    return result;

                result = new Result();
                Assignings assigning = DALInstance;
                assigning.ExternalOrganization = this.ExternalOrganization;
                assigning.ExternalKSACityID = this.ExternalKSACity.KSACityID;
                assigning.CreatedBy = this.LoginIdentity.EmployeeCodeID;
                this.AssigningID = new AssigningsDAL().Insert(assigning);
                if (this.AssigningID != 0)
                {
                    result.Entity = this;
                    result.EnumType = typeof(AssigningsValidationEnum);
                    result.EnumMember = AssigningsValidationEnum.Done.ToString();
                }
                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Update()
        {
            try
            {
                Result result = base.Update();
                if (result != null)
                    return result;

                result = new Result();
                Assignings assigning = DALInstance;
                assigning.ExternalOrganization = this.ExternalOrganization;
                assigning.ExternalKSACityID = this.ExternalKSACity.KSACityID;
                assigning.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;
                this.AssigningID = new AssigningsDAL().Update(assigning);
                if (this.AssigningID != 0)
                {
                    result.Entity = this;
                    result.EnumType = typeof(AssigningsValidationEnum);
                    result.EnumMember = AssigningsValidationEnum.Done.ToString();
                }
                return result;
            }
            catch
            {
                throw;
            }
        }
    }
}