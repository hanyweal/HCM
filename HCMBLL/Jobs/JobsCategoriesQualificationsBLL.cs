using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class JobsCategoriesQualificationsBLL : CommonEntity, IEntity
    {
        public virtual int JobCategoryQualificationID
        {
            get;
            set;
        }

        public PromotionsPeriodsBLL PromotionPeriod { get; set; }

        public virtual JobsCategoriesBLL JobCategory { get; set; }

        public virtual QualificationsDegreesBLL QualificationDegree { get; set; }

        public virtual QualificationsBLL Qualification { get; set; }

        public virtual GeneralSpecializationsBLL GeneralSpecialization { get; set; }

        public virtual bool IsMinQualification { get; set; }

        public virtual Result Add()
        {
            Result result = null;
            #region Check if JobCategory It has Promotion Record
            if (new PromotionsRecordsBLL().GetByJobCategory(this.JobCategory.JobCategoryID,this.PromotionPeriod.PromotionPeriodID).Count > 0)
            {
                result = new Result();
                result.Entity = this;
                result.EnumMember = JobsCategoriesValidationEnum.RejectedBecauseOfItHasPromotionRecord.ToString();
                result.EnumType = typeof(JobsCategoriesValidationEnum);
                return result;
            }
            #endregion
            result = new Result();
            JobsCategoriesQualifications JobCategoryQualification = new JobsCategoriesQualifications();
            JobCategoryQualification.JobCategoryID = this.JobCategory.JobCategoryID;
            JobCategoryQualification.PromotionPeriodID = this.PromotionPeriod.PromotionPeriodID;
            JobCategoryQualification.QualificationDegreeID = this.QualificationDegree.QualificationDegreeID;
            if (this.Qualification != null)
                JobCategoryQualification.QualificationID = this.Qualification.QualificationID;            
            if (this.GeneralSpecialization != null)
                JobCategoryQualification.GeneralSpecializationID = this.GeneralSpecialization.GeneralSpecializationID;
            JobCategoryQualification.IsMinQualification = this.IsMinQualification;
            JobCategoryQualification.CreatedDate = DateTime.Now;
            JobCategoryQualification.CreatedBy = this.LoginIdentity.EmployeeCodeID;
            this.JobCategoryQualificationID = new JobsCategoriesQualificationsDAL().Insert(JobCategoryQualification);
            if (this.JobCategoryQualificationID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }

            return result;
        }

        public virtual Result Remove(int JobCategoryQualificationID)
        {
            try
            {
                Result result = null;
                #region Check if JobCategory It has Promotion Record
                JobsCategoriesQualificationsBLL JobCategoryQualification = new JobsCategoriesQualificationsBLL().GetByJobCategoryQualificationID(JobCategoryQualificationID);
                if (JobCategoryQualification != null)
                {
                    if (new PromotionsRecordsBLL().GetByJobCategory(JobCategoryQualification.JobCategory.JobCategoryID, JobCategoryQualification.PromotionPeriod.PromotionPeriodID).Count > 0)
                    {
                        result = new Result();
                        result.Entity = this;
                        result.EnumMember = JobsCategoriesValidationEnum.RejectedBecauseOfItHasPromotionRecord.ToString();
                        result.EnumType = typeof(JobsCategoriesValidationEnum);
                        return result;
                    }
                }
                #endregion
                new JobsCategoriesQualificationsDAL().Delete(JobCategoryQualificationID, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Update()
        {
            Result result = null;
            #region Check if JobCategory It has Promotion Record
            if (new PromotionsRecordsBLL().GetByJobCategory(this.JobCategory.JobCategoryID, this.PromotionPeriod.PromotionPeriodID).Count > 0)
            {
                result = new Result();
                result.Entity = this;
                result.EnumMember = JobsCategoriesValidationEnum.RejectedBecauseOfItHasPromotionRecord.ToString();
                result.EnumType = typeof(JobsCategoriesValidationEnum);
                return result;
            }
            #endregion
            result=new Result();
            JobsCategoriesQualifications JobCategoryQualification = new JobsCategoriesQualifications();
            JobCategoryQualification.JobCategoryQualificationID = this.JobCategoryQualificationID;
            JobCategoryQualification.PromotionPeriodID = this.PromotionPeriod.PromotionPeriodID;
            JobCategoryQualification.JobCategoryID = this.JobCategory.JobCategoryID;
            JobCategoryQualification.QualificationDegreeID = this.QualificationDegree.QualificationDegreeID;
            if (this.Qualification != null)
                JobCategoryQualification.QualificationID = this.Qualification.QualificationID;
            if (this.GeneralSpecialization != null)
                JobCategoryQualification.GeneralSpecializationID = this.GeneralSpecialization.GeneralSpecializationID;
            JobCategoryQualification.IsMinQualification = this.IsMinQualification;
            JobCategoryQualification.LastUpdatedDate = DateTime.Now;
            JobCategoryQualification.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;
            this.JobCategoryQualificationID = new JobsCategoriesQualificationsDAL().Update(JobCategoryQualification);
            if (this.JobCategoryQualificationID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }
            return result;
        }

        public virtual List<JobsCategoriesQualificationsBLL> GetJobsCategoriesQualifications()
        {
            List<JobsCategoriesQualifications> JobsCategoriesQualificationsList = new JobsCategoriesQualificationsDAL().GetJobsCategoriesQualifications();
            List<JobsCategoriesQualificationsBLL> JobsCategoriesQualificationsBLLList = new List<JobsCategoriesQualificationsBLL>();
            if (JobsCategoriesQualificationsList.Count > 0)
            {
                foreach (var item in JobsCategoriesQualificationsList)
                {
                    JobsCategoriesQualificationsBLLList.Add(new JobsCategoriesQualificationsBLL().MapJobCategoryQualification(item));
                }
            }

            return JobsCategoriesQualificationsBLLList;
        }

        public virtual JobsCategoriesQualificationsBLL GetByJobCategoryQualificationID(int JobCategoryQualificationID)
        {
            JobsCategoriesQualifications JobCategoryQualification = new JobsCategoriesQualificationsDAL().GetByJobCategoryQualificationID(JobCategoryQualificationID);
            JobsCategoriesQualificationsBLL JobsCategoriesQualificationsBLL = new JobsCategoriesQualificationsBLL();
            if (JobCategoryQualification != null)
            {
                if (JobCategoryQualification.JobCategoryQualificationID > 0)
                {
                    return new JobsCategoriesQualificationsBLL().MapJobCategoryQualification(JobCategoryQualification);
                }
            }
            return null;
        }

        public virtual List<JobsCategoriesQualificationsBLL> GetByJobCategoryID(int JobCategoryID)
        {
            List<JobsCategoriesQualifications> JobsCategoriesQualificationsList = new JobsCategoriesQualificationsDAL().GetByJobCategoryID(JobCategoryID);
            List<JobsCategoriesQualificationsBLL> JobsCategoriesQualificationsBLLList = new List<JobsCategoriesQualificationsBLL>();
            if (JobsCategoriesQualificationsList.Count > 0)
            {
                foreach (var item in JobsCategoriesQualificationsList)
                {
                    JobsCategoriesQualificationsBLLList.Add(new JobsCategoriesQualificationsBLL().MapJobCategoryQualification(item));
                }
            }

            return JobsCategoriesQualificationsBLLList;
        }

        public JobsCategoriesQualificationsBLL MapJobCategoryQualification(JobsCategoriesQualifications JobCategoryQualification)
        {
            try
            {
                JobsCategoriesQualificationsBLL JobCategoryQualificationBLL = null;
                if (JobCategoryQualification != null)
                {
                    JobCategoryQualificationBLL = new JobsCategoriesQualificationsBLL()
                    {
                        JobCategoryQualificationID = JobCategoryQualification.JobCategoryQualificationID,
                        IsMinQualification = JobCategoryQualification.IsMinQualification
                    };
                    if (JobCategoryQualification.JobsCategories != null)
                    {
                        JobCategoryQualificationBLL.JobCategory = new JobsCategoriesBLL().MapJobCategory(JobCategoryQualification.JobsCategories);
                    }
                    if (JobCategoryQualification.Qualifications != null)
                    {
                        JobCategoryQualificationBLL.Qualification = new QualificationsBLL().MapQualification(JobCategoryQualification.Qualifications);
                    }
                    else
                    {
                        JobCategoryQualificationBLL.Qualification = new QualificationsBLL();
                    }
                    if (JobCategoryQualification.GeneralSpecializations != null)
                    {
                        JobCategoryQualificationBLL.GeneralSpecialization = new GeneralSpecializationsBLL().MapGeneralSpecialization(JobCategoryQualification.GeneralSpecializations);
                    }
                    else
                    {
                        JobCategoryQualificationBLL.GeneralSpecialization = new GeneralSpecializationsBLL();
                    }
                    if (JobCategoryQualification.QualificationsDegrees != null)
                    {
                        JobCategoryQualificationBLL.QualificationDegree = new QualificationsDegreesBLL().MapQualificationDegree(JobCategoryQualification.QualificationsDegrees);
                    }
                    if (JobCategoryQualification.PromotionsPeriods != null)
                    {
                        JobCategoryQualificationBLL.PromotionPeriod = new PromotionsPeriodsBLL().MapPromotionPeriod(JobCategoryQualification.PromotionsPeriods);
                    }
                    else
                    {
                        JobCategoryQualificationBLL.PromotionPeriod = new PromotionsPeriodsBLL();
                    }
                }
                return JobCategoryQualificationBLL;
            }
            catch
            {
                throw;
            }
        }

        public JobsCategoriesQualificationsBLL GetByQualificationID(int QualificationID)
        {
            JobsCategoriesQualifications JobsCategoriesQualification = new JobsCategoriesQualificationsDAL().GetByQualificationID(QualificationID);
            return new JobsCategoriesQualificationsBLL().MapJobCategoryQualification(JobsCategoriesQualification);
        }
        public JobsCategoriesQualificationsBLL GetByGeneralSpecializationID(int GeneralSpecializationID)
        {
            JobsCategoriesQualifications JobsCategoriesQualification = new JobsCategoriesQualificationsDAL().GetByGeneralSpecializationID(GeneralSpecializationID);
            return new JobsCategoriesQualificationsBLL().MapJobCategoryQualification(JobsCategoriesQualification);
        }
    }
}

