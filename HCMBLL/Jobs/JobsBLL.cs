using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class JobsBLL : CommonEntity, IEntity
    {
        public virtual int JobID
        {
            get;
            set;
        }

        public virtual string JobCode
        {
            get;
            set;
        }

        public virtual string JobName
        {
            get;
            set;
        }

        public bool? IsHidden { get; set; }

        public virtual JobsCategoriesBLL JobCategory
        {
            get;
            set;
        }

        public virtual Result Add()
        {
            Result result = null;
            result = new Result();
            Jobs Job = new Jobs();
            Job.JobCode = this.JobCode;
            Job.JobName = this.JobName;
            Job.IsHidden = false;
            Job.JobCategoryID = this.JobCategory.JobCategoryID;
            Job.CreatedDate = DateTime.Now;
            Job.CreatedBy = this.LoginIdentity.EmployeeCodeID;
            this.JobID = new JobsDAL().Insert(Job);
            if (this.JobID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }

            return result;
        }

        public virtual Result Remove(int JobID)
        {
            try
            {
                Result result = null;
                new JobsDAL().Delete(JobID,this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Update()
        {
            Result result = new Result();
            Jobs Job = new Jobs();
            Job.JobID = this.JobID;
            Job.JobCode = this.JobCode;
            Job.JobName = this.JobName;
            Job.JobCategoryID = this.JobCategory.JobCategoryID;
            Job.LastUpdatedDate = DateTime.Now;
            Job.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;
            this.JobID = new JobsDAL().Update(Job);
            if (this.JobID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }
            return result;
        }

        public virtual List<JobsBLL> GetJobs()
        {
            List<Jobs> JobsList = new JobsDAL().GetJobs();
            List<JobsBLL> JobsBLLList = new List<JobsBLL>();
            if (JobsList.Count > 0)
            {
                foreach (var item in JobsList)
                {
                    JobsBLLList.Add(new JobsBLL().MapJob(item));
                }
            }

            return JobsBLLList;
        }

        public virtual List<JobsBLL> GetJobsToPlacement()
        {
            return this.GetJobs().Where(x => x.IsHidden == false).ToList();
        }

        public virtual JobsBLL GetByJobID(int JobID)
        {
            return MapJob(new JobsDAL().GetByJobID(JobID));
        }

        public virtual List<JobsBLL> GetByJobCategoryID(int JobCategoryID)
        {
            List<Jobs> JobsList = new JobsDAL().GetByJobCategoryID(JobCategoryID);
            List<JobsBLL> JobsBLLList = new List<JobsBLL>();
            if (JobsList.Count > 0)
            {
                foreach (var item in JobsList)
                {
                    JobsBLLList.Add(new JobsBLL().MapJob(item));
                }
            }

            return JobsBLLList;
        }

        internal JobsBLL MapJob(Jobs Job)
        {
            try
            {
                JobsBLL JobBLL = null;
                if (Job != null)
                {
                    JobBLL = new JobsBLL()
                    {
                        JobID = Job.JobID,
                        JobCode = Job.JobCode,
                        JobName = Job.JobName,
                        IsHidden = Job.IsHidden.HasValue ? Job.IsHidden : (bool?)null,
                    };
                    if (Job.JobsCategories != null)
                    {
                        JobBLL.JobCategory = new JobsCategoriesBLL().MapJobCategory(Job.JobsCategories);
                    }
                }
                return JobBLL;
            }
            catch
            {
                throw;
            }
        }
    }
}

