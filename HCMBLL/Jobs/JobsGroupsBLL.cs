using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class JobsGroupsBLL : CommonEntity,IEntity
    {
        public virtual int JobGroupID
        {
            get;
            set;
        }

        public virtual string JobGroupName
        {
            get;
            set;
        }

        public virtual JobsGeneralGroupsBLL JobGeneralGroup
        {
            get;
            set;
        }

        public virtual IEnumerable<JobsCategoriesBLL> JobsCategoriesBLL
        {
            get;
            set;
        }

        public virtual Result Add()
        {
            Result result = null;
            result = new Result();
            JobsGroups JobGroup = new JobsGroups();
            JobGroup.JobGroupName = this.JobGroupName;
            JobGroup.JobGeneralGroupID = this.JobGeneralGroup.JobGeneralGroupID;
            JobGroup.CreatedDate = DateTime.Now;
            JobGroup.CreatedBy = this.LoginIdentity.EmployeeCodeID;
            this.JobGroupID = new JobsGroupsDAL().Insert(JobGroup);
            if (this.JobGroupID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }

            return result;
        }

        public virtual Result Remove(int JobCategoryID)
        {
            try
            {
                Result result = null;
                new JobsGroupsDAL().Delete(JobCategoryID, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Update()
        {
            Result result = new Result();
            JobsGroups JobGroup = new JobsGroups();
            JobGroup.JobGroupID = this.JobGroupID;
            JobGroup.JobGroupName = this.JobGroupName;
            JobGroup.JobGeneralGroupID = this.JobGeneralGroup.JobGeneralGroupID;
            JobGroup.LastUpdatedDate = DateTime.Now;
            JobGroup.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;
            this.JobGroupID = new JobsGroupsDAL().Update(JobGroup);
            if (this.JobGroupID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }
            return result;
        }

        public virtual List<JobsGroupsBLL> GetJobsGroups()
        {
            List<JobsGroups> JobsGroupsList = new JobsGroupsDAL().GetJobsGroups();
            List<JobsGroupsBLL> JobsGroupsBLLList = new List<JobsGroupsBLL>();
            if (JobsGroupsList.Count > 0)
            {
                foreach (var item in JobsGroupsList)
                {
                    JobsGroupsBLLList.Add(new JobsGroupsBLL().MapJobGroup(item));
                }
            }

            return JobsGroupsBLLList;
        }

        public virtual JobsGroupsBLL GetByJobGroupID(int JobGroupID)
        {
            JobsGroups JobGroup = new JobsGroupsDAL().GetByJobCategoryID(JobGroupID);
            JobsGroupsBLL JobsGroupsBLL = new JobsGroupsBLL();
            if (JobGroup != null)
            {
                if (JobGroup.JobGroupID > 0)
                {
                    return new JobsGroupsBLL().MapJobGroup(JobGroup);
                }
            }
            return null;
        }

        public virtual List<JobsGroupsBLL> GetByJobGeneralGroupID(int JobGeneralGroupID)
        {
            List<JobsGroups> JobsGroupsList = new JobsGroupsDAL().GetByJobGeneralGroupID(JobGeneralGroupID);
            List<JobsGroupsBLL> JobsGroupsBLLList = new List<JobsGroupsBLL>();
            if (JobsGroupsList.Count > 0)
            {
                foreach (var item in JobsGroupsList)
                {
                    JobsGroupsBLLList.Add(new JobsGroupsBLL().MapJobGroup(item));
                }
            }

            return JobsGroupsBLLList;
        }

        public JobsGroupsBLL MapJobGroup(JobsGroups JobGroup)
        {
            try
            {
                JobsGroupsBLL JobGroupBLL = null;
                if (JobGroup != null)
                {
                    JobGroupBLL = new JobsGroupsBLL()
                    {
                        JobGroupID = JobGroup.JobGroupID,
                        JobGroupName = JobGroup.JobGroupName
                    };
                    if (JobGroup.JobsGeneralGroups != null)
                    {
                        JobGroupBLL.JobGeneralGroup = new JobsGeneralGroupsBLL().MapJobGeneralGroup(JobGroup.JobsGeneralGroups);
                    }
                }
                return JobGroupBLL;
            }
            catch
            {
                throw;
            }
        }
    }
}

