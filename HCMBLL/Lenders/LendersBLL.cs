//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using HCMDAL;
using HCMBLL.Enums;

namespace HCMBLL
{
    public class LendersBLL : CommonEntity, IEntity
    {
        public virtual int LenderID
        {
            get;
            set;
        }

        public virtual DateTime LenderStartDate
        {
            get;
            set;
        }

        public virtual DateTime LenderEndDate
        {
            get;
            set;
        }

        public virtual string LenderOrganization
        {
            get;
            set;
        }

        public virtual KSACitiesBLL KSACity 
        { 
            get; 
            set;
        }

        public virtual EmployeesCareersHistoryBLL EmployeeCareerHistory
        {
            get;
            set;
        }

        public virtual bool IsFinished
        {
            get;
            set;
        }

        private int LenderPeriod
        {
            get;
            set;
        }

        public virtual Nullable<DateTime> LastLenderDate
        {
            get;
            set;
        }

        public string LenderEndReason { get; set; }

        public virtual Result Add()
        {
            try
            {
                this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetByEmployeeCareerHistoryID(this.EmployeeCareerHistory.EmployeeCareerHistoryID);
                Result result = this.IsValid();
                if (result == null)
                {
                    Lenders Lender = new Lenders()
                    {
                        LenderStartDate = this.LenderStartDate,
                        LenderEndDate = this.LenderEndDate,
                        LenderOrganization = this.LenderOrganization,
                        EmployeeCareerHistoryID = this.EmployeeCareerHistory.EmployeeCareerHistoryID,
                        KSACityID = this.KSACity.KSACityID,
                        IsFinished = this.IsFinished,
                        CreatedDate = DateTime.Now,
                        CreatedBy = this.LoginIdentity.EmployeeCodeID
                    };
                    this.LenderID = new LendersDAL().Insert(Lender);
                    result = new Result()
                    {
                        Entity = this,
                        EnumType = typeof(LendersValidationEnum),
                        EnumMember = LendersValidationEnum.Done.ToString(),
                    };
                    return result;
                }
                else
                {
                    return result;
                }

            }
            catch
            {
                throw;
            }
        }

        public virtual Result Update()
        {
            try
            {
                this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetByEmployeeCareerHistoryID(this.EmployeeCareerHistory.EmployeeCareerHistoryID);
                Result result = this.IsValid();
                
                if (result == null)
                {

                    if (this.IsFinished)
                    {
                        result = new Result()
                        {
                            Entity = this,
                            EnumType = typeof(LendersValidationEnum),
                            EnumMember = LendersValidationEnum.RejectedBecauseAlreadyFinished.ToString(),
                        };
                        return result;
                    }

                    Lenders Lender = new Lenders()
                    {
                        LenderID = this.LenderID,
                        LenderStartDate = this.LenderStartDate,
                        LenderEndDate = this.LenderEndDate,
                        LenderOrganization = this.LenderOrganization,
                        EmployeeCareerHistoryID = this.EmployeeCareerHistory.EmployeeCareerHistoryID,
                        KSACityID = this.KSACity.KSACityID,
                        IsFinished = this.IsFinished,
                        LastUpdatedDate = DateTime.Now,
                        LastUpdatedBy = this.LoginIdentity.EmployeeCodeID
                    };
                    this.LenderID = new LendersDAL().Update(Lender);
                    result = new Result()
                    {
                        Entity = this,
                        EnumType = typeof(LendersValidationEnum),
                        EnumMember = LendersValidationEnum.Done.ToString(),
                    };
                    return result;
                }
                else
                {
                    return result;
                }
            }
            catch
            {
                throw;
            }
        }

        public virtual Result EndLender()
        {
            try
            {
                Result result;
                if (this.LenderEndReason.Trim().Length <= 0)
                {
                    result = new Result()
                    {
                        Entity = this,
                        EnumType = typeof(LendersValidationEnum),
                        EnumMember = LendersValidationEnum.RejectedBecauseEndReasonRequired.ToString(),
                    };
                    return result;
                }

                this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetByEmployeeCareerHistoryID(this.EmployeeCareerHistory.EmployeeCareerHistoryID);                

                Lenders Lender = new Lenders()
                {
                    LenderID = this.LenderID,
                    LenderStartDate = this.LenderStartDate,
                    LenderEndDate = this.LenderEndDate,
                    LenderOrganization = this.LenderOrganization,
                    EmployeeCareerHistoryID = this.EmployeeCareerHistory.EmployeeCareerHistoryID,
                    KSACityID = this.KSACity.KSACityID,
                    LenderEndReason = this.LenderEndReason,
                    IsFinished = true,
                    LastUpdatedDate = DateTime.Now,
                    LastUpdatedBy = this.LoginIdentity.EmployeeCodeID
                };
                this.LenderID = new LendersDAL().EndLender(Lender);

                new BaseAssigningsBLL() { LoginIdentity = this.LoginIdentity }.BreakLastAssigning(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID,
                                                    this.LenderEndDate,
                                                    AssigningsReasonsEnum.LenderFinished);

                result = new Result()
                {
                    Entity = this,
                    EnumType = typeof(LendersValidationEnum),
                    EnumMember = LendersValidationEnum.Done.ToString(),
                };
                return result;

            }
            catch
            {
                throw;
            }
        }

        public virtual Result Remove()
        {
            try
            {
                new LendersDAL().Delete(new Lenders() { LenderID = this.LenderID }, this.LoginIdentity.EmployeeCodeID);
                Result result = new Result()
                {
                    //Entity = this,
                    EnumType = typeof(LendersValidationEnum),
                    EnumMember = LendersValidationEnum.Done.ToString(),
                };
                return result;
            }
            catch
            {
                throw;
            }
        }

        public virtual List<LendersBLL> GetLenders()
        {
            try
            {
                List<Lenders> LendersList = new LendersDAL().GetLenders();
                List<LendersBLL> LendersBLLList = new List<LendersBLL>();
                foreach (var item in LendersList)
                {
                    LendersBLLList.Add(new LendersBLL().MapLender(item));
                }
                return LendersBLLList;
            }
            catch
            {
                throw;
            }
        }

        public virtual LendersBLL GetByLenderID(int LenderID)
        {
            try
            {
                Lenders Lender = new LendersDAL().GetByLenderID(LenderID);
                return new LendersBLL().MapLender(Lender);
            }
            catch
            {
                throw;
            }
        }

        internal LendersBLL MapLender(Lenders Lender)
        {
            try
            {
                LendersBLL LenderBLL = null;
                if (Lender != null)
                {
                    LenderBLL = new LendersBLL()
                    {
                        LenderID = Lender.LenderID,
                        LenderStartDate = Lender.LenderStartDate,
                        LenderEndDate = Lender.LenderEndDate,
                        LenderOrganization = Lender.LenderOrganization,
                        IsFinished = Lender.IsFinished,
                        KSACity = new KSACitiesBLL().MapKSACity(Lender.KSACities), 
                        EmployeeCareerHistory = new EmployeesCareersHistoryBLL().MapEmployeeCareerHistory(Lender.EmployeesCareersHistory),
                        CreatedBy = new EmployeesCodesBLL().MapEmployeeCode(Lender.CreatedByNav),
                        CreatedDate = Lender.CreatedDate
                    };
                }
                return LenderBLL;
            }
            catch
            {
                throw;
            }
        }

        private Result IsValid()
        {

            #region Validaion for conflict with Other Process
            return CommonHelper.IsNoConflictWithOtherProcess(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, this.LenderStartDate, this.LenderEndDate, BusinessSubCategoriesEnum.Lenders);

            //BaseAssigningsBLL Obj = new EmployeesCodesBLL().GetAssigningsByEmployeeCodeID(this.Employee.EmployeeCodeID)
            //    .FirstOrDefault(
            //         x =>
            //            (this.LenderStartDate >= x.AssigningStartDate && this.LenderStartDate <= x.AssigningEndDate) ||
            //            (this.LenderEndDate >= x.AssigningStartDate && this.LenderEndDate <= x.AssigningEndDate) ||
            //            (this.LenderStartDate >= x.AssigningStartDate && this.LenderEndDate <= x.AssigningEndDate) ||
            //            (this.LenderStartDate <= x.AssigningStartDate && this.LenderEndDate >= x.AssigningEndDate)
            //          );

            //if (Obj != null && Obj.AssigningID>0)
            //{
            //    result = new Result();
            //    result.EnumType = typeof(LendersValidationEnum);
            //    result.EnumMember = LendersValidationEnum.RejectedBecauseOfConflictWithAssigning.ToString();
            //    result.Entity = Obj;
            //    return result;
            //}
            #endregion

        
        }

        public List<LendersBLL> GetByEmployeeCodeID(int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            return new EmployeesCodesBLL().GetLendersByEmployeeCodeID(EmployeeCodeID)
              .Where(
                   x => (StartDate >= x.LenderStartDate && StartDate <= x.LenderEndDate) ||
                        (EndDate >= x.LenderStartDate && EndDate <= x.LenderEndDate) ||
                        (StartDate >= x.LenderStartDate && EndDate <= x.LenderEndDate) ||
                        (StartDate <= x.LenderStartDate && EndDate >= x.LenderEndDate)
                      )
              .ToList();
        }

        public int GetCountLenderPeriodByEmployeeCodeID(List<Lenders> LendersList, int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            //return int.Parse(this.GetByEmployeeCodeID(EmployeeCodeID, StartDate, EndDate).Sum(x => (x.LenderEndDate - x.LenderStartDate).TotalDays).ToString());

            List<Lenders> Lenders = LendersList.Where(
                                           x => (StartDate >= x.LenderStartDate && StartDate <= x.LenderEndDate) ||
                                                (EndDate >= x.LenderStartDate && EndDate <= x.LenderEndDate) ||
                                                (StartDate >= x.LenderStartDate && EndDate <= x.LenderEndDate) ||
                                                (StartDate <= x.LenderStartDate && EndDate >= x.LenderEndDate)
                                              )
                                      .ToList();        

            int TotalDays = 0;
            DateTime Date;

            for (DateTime i = StartDate; i <= EndDate; )
            {
                Date = i;

                foreach (var item in Lenders.Where(x => x.IsFinished != false))
                {
                    if (Date >= item.LenderStartDate.Date && Date <= item.LenderEndDate)
                        TotalDays++;
                }

                i = i.AddDays(1);
            }

            return TotalDays;
        }
    }
}

