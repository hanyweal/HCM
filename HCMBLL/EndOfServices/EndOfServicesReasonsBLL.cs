using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class EndOfServicesReasonsBLL : CommonEntity, IEntity
    {
        public virtual int EndOfServiceReasonID
        {
            get;
            set;
        }

        public virtual string EndOfServiceReason
        {
            get;
            set;
        }

        public virtual EndOfServicesCasesBLL EndOfServiceCase
        {
            get;
            set;
        }         
          
        public List<EndOfServicesReasonsBLL> GetEndOfServicesReasons()
        {
            List<EndOfServicesReasons> EndOfServicesReasonsList = new EndOfServicesReasonsDAL().GetEndOfServicesReasons();
            List<EndOfServicesReasonsBLL> EndOfServicesReasonsBLLList = new List<EndOfServicesReasonsBLL>();
            if (EndOfServicesReasonsList.Count > 0)
            {
                foreach (var item in EndOfServicesReasonsList)
                    EndOfServicesReasonsBLLList.Add(MapEndOfServiceReason(item));
            }

            return EndOfServicesReasonsBLLList;
        }

        public virtual EndOfServicesReasonsBLL GetByEndOfServiceReasonID(int EndOfServiceReasonID)
        {
            return GetEndOfServicesReasons().FirstOrDefault(x => x.EndOfServiceReasonID.Equals(EndOfServiceReasonID));
        }

        public List<EndOfServicesReasonsBLL> GetByEndOfServiceCaseID(int EndOfServiceCaseID)
        {
            return GetEndOfServicesReasons().Where(x => x.EndOfServiceCase.EndOfServiceCaseID.Equals(EndOfServiceCaseID)).ToList();
        }

        internal EndOfServicesReasonsBLL MapEndOfServiceReason(EndOfServicesReasons EndOfServiceReason)
        {
            try
            {
                EndOfServicesReasonsBLL EndOfServiceReasonBLL = null;
                if (EndOfServiceReason != null)
                {
                    EndOfServiceReasonBLL = new EndOfServicesReasonsBLL()
                    {
                        EndOfServiceReasonID = EndOfServiceReason.EndOfServiceReasonID,
                        EndOfServiceReason = EndOfServiceReason.EndOfServiceReason, 
                        EndOfServiceCase = new EndOfServicesCasesBLL().MapEndOfServiceCase(EndOfServiceReason.EndOfServicesCases) 
                    };
                }
                return EndOfServiceReasonBLL;
            }
            catch
            {
                throw;
            }
        }

    }
}