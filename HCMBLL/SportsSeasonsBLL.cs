using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace HCMBLL
{
    public class SportsSeasonsBLL : CommonEntity, IEntity
    {
        public int SportsSeasonID
        {
            get;
            set;
        }

        public MaturityYearsBalancesBLL MaturityYear
        {
            get;
            set;
        }

        public List<MaturityYearsBalancesBLL> MaturityYearsList
        {
            get
            {
                return new MaturityYearsBalancesBLL().GetMaturityYearsBalances();
            }
        }

        public DateTime SportsSeasonStartDate { get; set; }


        public DateTime SportsSeasonEndDate { get; set; }

        public int SportsSeasonPeriod
        {
            get
            {
                return this.SportsSeasonEndDate.Subtract(this.SportsSeasonStartDate).Days + 1;
            }
        }

        public string SportsSeasonDescription { get; set; }

        public virtual Result Add()
        {
            //Result result = null;
            //result = IsNoConflictWithOtherSportsSeasonsSettings(this.SportsSeasonStartDate, this.SportsSeasonEndDate);
            //if (result != null)
            //    return result;
            Result result = new Result();
            SportsSeasons SportsSeasons = new SportsSeasons();
            SportsSeasons.MaturityYearID = this.MaturityYear.MaturityYearID;
            SportsSeasons.SportsSeasonStartDate = this.SportsSeasonStartDate;
            SportsSeasons.SportsSeasonEndDate = this.SportsSeasonEndDate;
            SportsSeasons.SportsSeasonDescription = this.SportsSeasonDescription;
            SportsSeasons.CreatedDate = DateTime.Now;
            SportsSeasons.CreatedBy = this.LoginIdentity.EmployeeCodeID;
            this.SportsSeasonID = new SportsSeasonsDAL().Insert(SportsSeasons);
            if (this.SportsSeasonID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }

            return result;
        }

        public virtual Result Update()
        {
            Result result = new Result();
            //result = IsNoConflictWithOtherSportsSeasonsSettings(this.SportsSeasonStartDate, this.SportsSeasonEndDate);
            //if (result != null)
            //    return result;

            #region  Validate if the season that wanted to updated has vaacation or not
            List<BaseVacationsBLL> BaseVacationsBLLList = new BaseVacationsBLL().GetVacationsBySportsSeasonID(this.SportsSeasonID);
            if (BaseVacationsBLLList.Count > 0)
            {
                result = new Result();
                result.EnumType = typeof(SportsSeasonsValidationEnum);
                result.EnumMember = SportsSeasonsValidationEnum.RejectedBecauseOfAlreadyCreatedVacationOnTheSeason.ToString();
                return result;
            }
            #endregion


            SportsSeasons SportsSeasons = new SportsSeasons();
            SportsSeasons.MaturityYearID = this.MaturityYear.MaturityYearID;
            SportsSeasons.SportsSeasonStartDate = this.SportsSeasonStartDate;
            SportsSeasons.SportsSeasonEndDate = this.SportsSeasonEndDate;
            SportsSeasons.SportsSeasonDescription = this.SportsSeasonDescription;
            SportsSeasons.UpdatedDate = DateTime.Now;
            SportsSeasons.Updatedby = this.LoginIdentity.EmployeeCodeID;
            SportsSeasons.SportsSeasonID = this.SportsSeasonID;

            this.SportsSeasonID = new SportsSeasonsDAL().Update(SportsSeasons);
            if (this.SportsSeasonID != 0)
            {
                result.Entity = this;
                result.EnumType = typeof(LookupsValidationEnum);
                result.EnumMember = LookupsValidationEnum.Done.ToString();
            }
            return result;
        }

        public Result Remove(int SportsSeasonID)
        {
            try
            {

                Result result = null;
                new SportsSeasonsDAL().Delete(SportsSeasonID, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public List<SportsSeasonsBLL> GetSportsSeasons()
        {
            List<SportsSeasons> SportsSeasonsList = new SportsSeasonsDAL().GetSportsSeasons();
            List<SportsSeasonsBLL> SportsSeasonsBLLList = new List<SportsSeasonsBLL>();
            if (SportsSeasonsList.Count > 0)
            {
                foreach (var item in SportsSeasonsList)
                {
                    SportsSeasonsBLLList.Add(new SportsSeasonsBLL()
                    {
                        SportsSeasonID = item.SportsSeasonID,
                        SportsSeasonStartDate = item.SportsSeasonStartDate,
                        SportsSeasonEndDate = item.SportsSeasonEndDate,
                        SportsSeasonDescription = item.SportsSeasonDescription,
                        MaturityYear = new MaturityYearsBalancesBLL().MapMaturityYearBalance(item.MaturityYearsBalances),
                    });
                }
            }

            return SportsSeasonsBLLList;
        }

        public SportsSeasonsBLL GetBySportsSeasonID(int SportsSeasonID)
        {
            SportsSeasonsBLL SportsSeasonBLL = null;
            SportsSeasons SportsSeason = new SportsSeasonsDAL().GetBySportsSeasonID(SportsSeasonID);// GetByHolidaySettingID(HolidaySettingID);
            if (SportsSeason != null)
            {
                SportsSeasonBLL = new SportsSeasonsBLL().MapSportsSeason(SportsSeason);
            }
            return SportsSeasonBLL;
        }

        public List<SportsSeasonsBLL> GetByMaturityYearID(int MaturityYearID)
        {
            List<SportsSeasonsBLL> SportsSeasonBLL = new List<SportsSeasonsBLL>();
            List<SportsSeasons> SportsSeasonsList = new SportsSeasonsDAL().GetSportsSeasons().Where(x => x.MaturityYearID == MaturityYearID).ToList();// GetByHolidaySettingID(HolidaySettingID);
            foreach (var SportsSeason in SportsSeasonsList)
            {
                SportsSeasonBLL.Add(this.MapSportsSeason(SportsSeason));
            }
            return SportsSeasonBLL;
        }

        //public List<SportsSeasonsBLL> GetByHolidayTypeID(int HolidayTypeID)
        //{
        //    return GetSportsSeasons().Where(x => x.HolidayType.HolidayTypeID.Equals(HolidayTypeID)).ToList();
        //}

        public List<SportsSeasonsBLL> GetBySportsSeasonByCurrentYear(int MaturityYear)
        {
            List<SportsSeasonsBLL> SportsSeasonBLL = new List<SportsSeasonsBLL>();
            List<SportsSeasons> SportsSeasonsList = new SportsSeasonsDAL().GetSportsSeasons().Where(x => x.MaturityYearsBalances.MaturityYear == (int)MaturityYear).ToList();// GetByHolidaySettingID(HolidaySettingID);
            foreach (var SportsSeason in SportsSeasonsList)
            {
                SportsSeasonBLL.Add(this.MapSportsSeason(SportsSeason));
            }
            return SportsSeasonBLL;
        }

        internal SportsSeasonsBLL MapSportsSeason(SportsSeasons item)
        {
            return item != null ?
                new SportsSeasonsBLL()
                {
                    SportsSeasonID = item.SportsSeasonID,
                    SportsSeasonDescription = item.SportsSeasonDescription,
                    SportsSeasonStartDate = item.SportsSeasonStartDate,
                    SportsSeasonEndDate = item.SportsSeasonEndDate,
                    MaturityYear = new MaturityYearsBalancesBLL().MapMaturityYearBalance(item.MaturityYearsBalances),
                    CreatedBy = new EmployeesCodesBLL().MapEmployeeCode(item.EmployeesCodes),
                    CreatedDate = item.CreatedDate.Value,

                }
                : null;
        }

        //internal Result IsNoConflictWithOtherSportsSeasonsSettings(DateTime StartDate, DateTime EndDate)
        //{
        //    Result result = null;
        //    //List<SportsSeasons> SportsSeasonsList = new SportsSeasonsDAL().GetSportsSeasons().Where(x => (
        //    //  (StartDate >= x.SportsSeasonStartDate && StartDate <= x.SportsSeasonEndDate) ||
        //    //            (EndDate >= x.SportsSeasonStartDate && EndDate <= x.SportsSeasonEndDate) ||
        //    //            (StartDate >= x.SportsSeasonStartDate && EndDate <= x.SportsSeasonEndDate) ||
        //    //            (StartDate <= x.SportsSeasonStartDate && EndDate >= x.SportsSeasonEndDate)
        //    //          ) && x.SportsSeasonID != this.SportsSeasonID).ToList();

        //    List<SportsSeasons> SportsSeasonsList = new SportsSeasonsDAL().GetSportsSeasons().Where(x => (
        //      (StartDate == x.SportsSeasonStartDate && EndDate == x.SportsSeasonEndDate)) && x.SportsSeasonID != this.SportsSeasonID).ToList();
        //    if (SportsSeasonsList.Count() != 0)
        //    {
        //        result = new Result();
        //        result.EnumType = typeof(SportsSeasonsValidationEnum);
        // result.EnumMember = SportsSeasonsValidationEnum.RejectedBecauseOfConflictWithSportsSeasonsSetting.ToString();
        //        return result;
        //    }

        //    return result;
        //}

    }
}