using HCMBLL.DTO;
using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class BaseDelegationsBLL : ExpensesBLL
    {
        public virtual int DelegationID
        {
            get;
            set;
        }

        public virtual DateTime DelegationStartDate
        {
            get;
            set;
        }

        public virtual int DelegationPeriod
        {
            get
            {
                return this.DelegationEndDate.Subtract(this.DelegationStartDate).Days + 1;
            }
        }

        public virtual DateTime DelegationEndDate
        {
            get;
            set;
        }

        public virtual DelegationsTypesBLL DelegationType
        {
            get;
            set;
        }

        public virtual DelegationsKindsBLL DelegationKind
        {
            get;
            set;
        }

        public virtual string DelegationReason
        {
            get;
            set;
        }
        public virtual string Notes
        {
            get;
            set;
        }

        public virtual int? DelegationDistancePeriod
        {
            get;
            set;
        }

        public string DelegationDestination { get; set; }

        internal virtual Delegations DALInstance
        {
            get
            {
                Delegations Delegation = new Delegations();
                Delegation.DelegationTypeID = this.DelegationType.DelegationTypeID;
                Delegation.DelegationKindID = this.DelegationKind.DelegationKindID;
                Delegation.DelegationStartDate = this.DelegationStartDate;
                Delegation.DelegationEndDate = this.DelegationEndDate;
                Delegation.DelegationReason = this.DelegationReason;
                Delegation.Notes = this.Notes;
                Delegation.DelegationDistancePeriod = this.DelegationDistancePeriod;
                Delegation.IsActive = true;
                if (this.DelegationID <= 0)
                {
                    Delegation.CreatedDate = DateTime.Now;
                    Delegation.CreatedBy = LoginIdentity.EmployeeCodeID;
                    foreach (DelegationsDetailsBLL item in this.DelegationsDetails)
                    {
                        Delegation.DelegationsDetails.Add(new DelegationsDetails()
                        {
                            EmployeeCareerHistoryID = item.EmployeeCareerHistory.EmployeeCareerHistoryID,
                            CreatedDate = DateTime.Now,
                            CreatedBy = this.LoginIdentity.EmployeeCodeID,
                            IsPassengerOrderCompensation = item.IsPassengerOrderCompensation
                        });
                    }
                }
                else
                {
                    Delegation.DelegationID = this.DelegationID;
                    Delegation.LastUpdatedDate = DateTime.Now;
                    Delegation.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;
                }
                return Delegation;
            }
        }

        public virtual List<DelegationsDetailsBLL> DelegationsDetails
        {
            get;
            set;
        }

        public virtual List<BaseDelegationsBLL> GetDelegations(out int totalRecordsOut, out int recFilterOut)
        {
            List<BaseDelegationsBLL> DelegationBLLList = new List<BaseDelegationsBLL>();
            List<Delegations> Delegations = new DelegationsDAL()
            {
                search = Search,
                order = Order,
                orderDir = OrderDir,
                startRec = StartRec,
                pageSize = PageSize,
                orderByColumnName = OrderByColumnName
            }.GetDelegations(out totalRecordsOut, out recFilterOut);
            foreach (var item in Delegations)
            {
                DelegationBLLList.Add(MapDelegation(item));
            }
            return DelegationBLLList;
        }

        public virtual List<BaseDelegationsBLL> GetDelegations()
        {
            List<BaseDelegationsBLL> DelegationBLLList = new List<BaseDelegationsBLL>();
            List<Delegations> Delegations = new DelegationsDAL()
            .GetDelegations();
            foreach (var item in Delegations)
            {
                DelegationBLLList.Add(MapDelegation(item));
            }
            return DelegationBLLList;
        }

        public BaseDelegationsBLL GetByDelegationID(int DelegationID)
        {
            BaseDelegationsBLL DelegationBLL = null;
            Delegations Delegation = new DelegationsDAL().GetByDelegationID(DelegationID);
            if (Delegation != null)
            {
                DelegationBLL = MapDelegation(Delegation);
            }
            return DelegationBLL;
        }

        public virtual Result Add()
        {
            Result result = null;

            // validate employees
            if (DALInstance.DelegationsDetails == null || DALInstance.DelegationsDetails.Count <= 0)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(DelegationsValidationEnum);
                result.EnumMember = DelegationsValidationEnum.RejectedBecauseEmployeeRequired.ToString();

                return result;
            }

            // validate employees delegation limit
            foreach (DelegationsDetailsBLL dd in this.DelegationsDetails)
            {
                result = new EmployeeDelegationBLL(this.DelegationStartDate, this.DelegationEndDate, this.DelegationKind.DelegationKindID, new EmployeesCodesBLL()
                {
                    EmployeeCodeID = dd.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID
                }).IsValid();

                if (result.EnumMember != DelegationsValidationEnum.Done.ToString())
                    return result;
            }
            // setting result is null in case of "DONE"
            if (result.EnumMember == DelegationsValidationEnum.Done.ToString())
                result = null;

            return result;
        }

        public virtual Result Update()
        {
            Result result = null;
            Delegations Delegation = DALInstance;
            if (CheckIsApproved(Delegation.DelegationID))
            {
                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(DelegationsValidationEnum);
                result.EnumMember = DelegationsValidationEnum.RejectedBecauseOfAlreadyApprove.ToString();
                return result;
            }

            return result;
        }

        public Result Remove(int DelegationID)
        {
            try
            {
                Result result = null;
                if (this.CheckIsApproved(DelegationID))
                {
                    result = new Result();
                    result.EnumType = typeof(DelegationsValidationEnum);
                    result.EnumMember = DelegationsValidationEnum.RejectedBecauseOfAlreadyApprove.ToString();
                    return result;
                }
                new DelegationsDAL().Delete(DelegationID, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(DelegationsValidationEnum),
                    EnumMember = DelegationsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public override Result Approve(int DelegationID)
        {
            this.DelegationID = DelegationID;
            return base.Approve(DelegationID);
        }

        public override Result ApproveCancel(int DelegationID)
        {
            this.DelegationID = DelegationID;
            return base.ApproveCancel(DelegationID);
        }

        internal BaseDelegationsBLL MapDelegation(Delegations Delegation)
        {
            try
            {
                BaseDelegationsBLL DelegationBLL = null;
                if (Delegation != null)
                {
                    KSACitiesBLL KSACity1 = Delegation.KSACities != null ? new KSACitiesBLL().MapKSACity(Delegation.KSACities) : null;
                    CountriesBLL Country1 = Delegation.Countries != null ? new CountriesBLL().MapCountry(Delegation.Countries) : null;
                    if (Delegation.DelegationTypeID == (Int32)DelegationsTypesEnum.Internal)
                    {
                        DelegationBLL = new InternalDelegationBLL()
                        {
                            KSACity = KSACity1,
                            DelegationDestination = KSACity1.KSACityName + "-" + KSACity1.KSARegion.KSARegionName
                        };

                    }
                    else if (Delegation.DelegationTypeID == (Int32)DelegationsTypesEnum.External)
                    {
                        DelegationBLL = new ExternalDelegationBLL()
                        {
                            Country = Country1,
                            DelegationDestination = Country1.CountryName
                        };
                    }

                    DelegationBLL.DelegationID = Delegation.DelegationID;
                    DelegationBLL.DelegationKind = new DelegationsKindsBLL().MapDelegationKind(Delegation.DelegationsKinds);
                    DelegationBLL.DelegationType = new DelegationsTypesBLL().MapDelegationType(Delegation.DelegationsTypes);
                    DelegationBLL.DelegationStartDate = Delegation.DelegationStartDate.Date;
                    DelegationBLL.DelegationEndDate = Delegation.DelegationEndDate.Date;
                    DelegationBLL.DelegationReason = Delegation.DelegationReason;
                    DelegationBLL.Notes = Delegation.Notes;
                    DelegationBLL.DelegationDistancePeriod = Delegation.DelegationDistancePeriod;
                    DelegationBLL.CreatedBy = new EmployeesCodesBLL().MapEmployeeCode(Delegation.CreatedByNav);
                    DelegationBLL.CreatedDate = Delegation.CreatedDate;
                    DelegationBLL.IsApproved = Delegation.IsApproved;
                    DelegationBLL.ApprovedBy = Delegation.ApprovedBy;
                    DelegationBLL.ApprovedDate = Delegation.ApprovedDate;
                    //DelegationBLL.LastUpdatedBy = new EmployeesCodesBLL().MapEmployeeCode(Delegation.EmployeesCodes1);
                    //DelegationBLL.LastUpdatedDate = Delegation.LastUpdatedDate;
                }
                return DelegationBLL;
            }
            catch
            {
                throw;
            }
        }

        private bool CheckIsApproved(int DelegationID)
        {
            bool IsApproved = false;
            try
            {
                IsApproved = new DelegationsDAL().IsApproved(DelegationID);
            }
            catch
            {
                throw;
            }
            return IsApproved;
        }

        public List<BaseDelegationsBLL> GetByEmployeeCodeID(int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            return new EmployeesCodesBLL().GetDelegationsByEmployeeCodeID(EmployeeCodeID)
                .Where(
                     x =>
                        (StartDate >= x.DelegationStartDate && StartDate <= x.DelegationEndDate) ||
                        (EndDate >= x.DelegationStartDate && EndDate <= x.DelegationEndDate) ||
                        (StartDate >= x.DelegationStartDate && EndDate <= x.DelegationEndDate) ||
                        (StartDate <= x.DelegationStartDate && EndDate >= x.DelegationEndDate)
                      )
                .ToList();
        }

        public IQueryable<EmployeesDelegationsBasedOnAssigngingsDTO> GetEmployeesDelegationsBasedOnAssigningsAsRanksCategories(int DelegationTypeID, DateTime FromDate, DateTime ToDate, int OrganizationID)
        {
            try
            {
                List<int> OrganizationIDsList = new OrganizationsStructuresBLL().GetByOrganizationIDsWithhAllChilds(OrganizationID);
                DateTime FromDateGr = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", FromDate.Day, FromDate.Month, FromDate.Year)), new CultureInfo("en-US"));
                DateTime ToDateGr = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", ToDate.Day, ToDate.Month, ToDate.Year)), new CultureInfo("en-US"));
                List<vwActualEmployeesBasedOnAssignings> ActualEmployeesHaveDelegations = new List<vwActualEmployeesBasedOnAssignings>();

                // Get actual employees Based On Assignings by date
                List<vwActualEmployeesBasedOnAssignings> ActualEmployeesBasedOnAssignings = new AssigningsDAL().GetActualEmployeeBasedOnAssignings().Where(x =>
                                                                                                                                                                 // (FromDateGr.Date >= x.AssigningStartDate.Date && FromDateGr.Date <= (!x.AssigningEndDate.HasValue ? DateTime.Now.Date : x.AssigningEndDate.Value.Date))
                                                                                                                                                                 (
                                                                                                                                                                  (FromDateGr >= x.AssigningStartDate && FromDateGr <= (!x.AssigningEndDate.HasValue ? DateTime.Now.Date : x.AssigningEndDate.Value.Date)) ||
                                                                                                                                                                  (ToDate >= x.AssigningStartDate && ToDate <= (!x.AssigningEndDate.HasValue ? DateTime.Now.Date : x.AssigningEndDate.Value.Date)) ||
                                                                                                                                                                  (FromDateGr >= x.AssigningStartDate && ToDate <= (!x.AssigningEndDate.HasValue ? DateTime.Now.Date : x.AssigningEndDate.Value.Date)) ||
                                                                                                                                                                  (FromDateGr <= x.AssigningStartDate && ToDate >= (!x.AssigningEndDate.HasValue ? DateTime.Now.Date : x.AssigningEndDate.Value.Date))
                                                                                                                                                                 )
                                                                                                                                                                 && OrganizationIDsList.Contains(x.OrganizationID.Value)).ToList();
                List<int> EmployeeCareerHistoryIDs = new List<int>();
                ActualEmployeesBasedOnAssignings.ForEach(x => EmployeeCareerHistoryIDs.Add(x.EmployeeCareerHistoryID.Value));

                List<DelegationsDetails> EmployeesDelegationsOfActualEmployeesList = new DelegationsDetailsDAL().GetEmployeesDelegationsByDate(FromDateGr, DelegationTypeID, EmployeeCareerHistoryIDs);

                var query = EmployeesDelegationsOfActualEmployeesList.Select(y => new EmployeesDelegationsBasedOnAssigngingsDTO(y.EmployeesCareersHistory.EmployeesCodes.EmployeeCodeNo,
                                                                                 ActualEmployeesBasedOnAssignings.FirstOrDefault(x => x.EmployeeCodeID == y.EmployeesCareersHistory.EmployeeCodeID).EmployeeNameAr,
                                                                                 ActualEmployeesBasedOnAssignings.FirstOrDefault(x => x.EmployeeCodeID == y.EmployeesCareersHistory.EmployeeCodeID).OrganizationName,
                                                                                 ActualEmployeesBasedOnAssignings.FirstOrDefault(x => x.EmployeeCodeID == y.EmployeesCareersHistory.EmployeeCodeID).JobName,
                                                                                 ActualEmployeesBasedOnAssignings.FirstOrDefault(x => x.EmployeeCodeID == y.EmployeesCareersHistory.EmployeeCodeID).RankCategoryName,
                                                                                 ActualEmployeesBasedOnAssignings.FirstOrDefault(x => x.EmployeeCodeID == y.EmployeesCareersHistory.EmployeeCodeID).RankName,
                                                                                 y.Delegations.DelegationStartDate,
                                                                                 y.Delegations.DelegationEndDate,
                                                                                 y.Delegations.DelegationsTypes.DelegationTypeName,
                                                                                 ActualEmployeesBasedOnAssignings.FirstOrDefault(x => x.EmployeeCodeID == y.EmployeesCareersHistory.EmployeeCodeID).Sorting
                                                                            ));

                return query.AsQueryable(); 
            }
            catch
            {
                throw;
            }
        }
    }
}