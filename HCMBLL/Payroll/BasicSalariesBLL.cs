using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class BasicSalariesBLL : CommonEntity, IEntity
    {
        public int BasicSalaryID
        {
            get;
            set;
        }

        public RanksBLL Rank
        {
            get;
            set;
        }

        public CareersDegreesBLL CareerDegree
        {
            get;
            set;
        }

        public int BasicSalary
        {
            get;
            set;
        }

        public List<BasicSalariesBLL> GetBasicSalaries()
        {
            List<BasicSalaries> BasicSalariesList = new BasicSalariesDAL().GetBasicSalaries();
            List<BasicSalariesBLL> BasicSalariesBLLList = new List<BasicSalariesBLL>();
            if (BasicSalariesList.Count > 0)
            {
                foreach (var item in BasicSalariesList)
                {
                    BasicSalariesBLLList.Add(new BasicSalariesBLL()
                    {
                        BasicSalaryID = item.BasicSalaryID,
                        Rank = new RanksBLL().MapRank(item.Ranks),
                        CareerDegree = new CareersDegreesBLL().MapCareerDegree(item.CareersDegrees),
                        BasicSalary = item.BasicSalary.Value
                    });
                }
            }

            return BasicSalariesBLLList;
        }

        public BasicSalariesBLL GetBasicSalary(int RankID, int CareerDegreeID)
        {
            //BasicSalaries BasicSalary = new BasicSalariesDAL().GetBasicSalaries().FirstOrDefault(x => x.CareerDegreeID == CareerDegreeID & x.RankID == RankID);
            BasicSalaries BasicSalary = new BasicSalariesDAL().GetBasicSalary(RankID, CareerDegreeID);
            return new BasicSalariesBLL() { BasicSalary = BasicSalary != null ? BasicSalary.BasicSalary.Value : 0 };
        }

        /// <summary>
        /// This function return BasicSalary of the next rank with higher BasicSalary
        /// </summary>
        /// <param name="RankID"></param>
        /// <param name="CareerDegreeID"></param>
        /// <returns></returns>
        public BasicSalariesBLL GetGreaterBasicSalaryOfNextRank(int RankID, int CareerDegreeID)
        {
            int NextRankID = RankID + 1;
            BasicSalariesBLL BasicSalariesBLL = GetBasicSalary(RankID, CareerDegreeID);
            BasicSalariesBLL NextBasicSalariesBLL = GetBasicSalaries().Where(c => c.Rank.RankID == NextRankID && c.BasicSalary > BasicSalariesBLL.BasicSalary).OrderBy(c => c.BasicSalary).FirstOrDefault();
            return NextBasicSalariesBLL;
        }

        //public bool GenerateSalaryForAllUsers()
        //{
        //    //Generall BasicSalary for All Emps
        //    List<TempEmployeesBasicSalaries> OutputList = new List<TempEmployeesBasicSalaries>();
        //    TempEmployeesBasicSalaries TempEmployeeBasicSalary = new TempEmployeesBasicSalaries();
        //    List<EmployeesCareersHistory> EmployeesCareersList;
        //    NormalVacationsBLL NormalVacationBLL = new NormalVacationsBLL();
        //    List<TempEmployeesBasicSalaries> TempEmployeesBasicSalariesList = new TempEmployeesBasicSalariesDAL().GetEmployeesBasicSalaries();
        //    List<EmployeesCodes> EmployeesCodesList = new EmployeesCodesDAL().GetEmployees().Where(x => x.IsActive).ToList();       //.Take(20)

        //    List<int> AlreadyProcessedEmployeeCodeIDs = TempEmployeesBasicSalariesList.Select(x => x.EmployeeCodeID).ToList();
             
        //    EmployeesCodesList = EmployeesCodesList.Where(x => !AlreadyProcessedEmployeeCodeIDs.Contains(x.EmployeeCodeID)).ToList();

        //    try
        //    {
        //        foreach (EmployeesCodes EmployeeCode in EmployeesCodesList)
        //        {
        //            // To exclude already balance calculated employees
        //            if (TempEmployeesBasicSalariesList.Where(x => x.EmployeeCodeID == EmployeeCode.EmployeeCodeID).ToList().Count > 0)
        //            {
        //                // do nothing
        //            }
        //            else
        //            {
        //                EmployeesCareersList = new EmployeesCareersHistoryDAL().GetEmployeesCareersHistoryByEmployeeCodeID(EmployeeCode.EmployeeCodeID);

        //                // we need active employee Career History
        //                if (EmployeesCareersList != null && EmployeesCareersList.Where(x => x.IsActive).ToList().Count > 0)
        //                {
        //                    SalaryDetailsBLL SalaryDetails = new SalaryDetailsBLL().GetSalaryDetails(EmployeeCode.EmployeeCodeNo).FirstOrDefault();

        //                    TempEmployeeBasicSalary = new TempEmployeesBasicSalaries();
        //                    TempEmployeeBasicSalary.EmployeeCareerHistoryID = EmployeesCareersList.FirstOrDefault(x => x.IsActive).EmployeeCareerHistoryID;
        //                    TempEmployeeBasicSalary.EmployeeCodeID = EmployeeCode.EmployeeCodeID;
        //                    TempEmployeeBasicSalary.BasicSalary = Convert.ToDecimal( SalaryDetails.Benefits.BasicSalary);
        //                    TempEmployeeBasicSalary.NetSalary = Convert.ToDecimal(SalaryDetails.NetSalary);
        //                    TempEmployeeBasicSalary.CreateOn = DateTime.Now;

        //                    OutputList.Add(TempEmployeeBasicSalary);
        //                    new TempEmployeesBasicSalariesDAL().Insert(TempEmployeeBasicSalary);
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }
        //    return true; 
        //}
    }
}
