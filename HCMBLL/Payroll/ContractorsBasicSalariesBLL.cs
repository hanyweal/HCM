using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class ContractorsBasicSalariesBLL : CommonEntity, IEntity
    {
        public int ContractorBasicSalaryID { get; set; }

        public EmployeesCodesBLL EmployeeCode { get; set; }

        public double BasicSalary { get; set; }

        public double TransfareAllowance { get; set; }

        public virtual Result Add()
        {
            try
            {
                Result result = null;

                #region Validation Employee must be Contractor (Saudi / Non-Saudi)
                EmployeesCodesBLL EmployeeCode = new EmployeesCodesBLL().GetByEmployeeCodeID(this.EmployeeCode.EmployeeCodeID);
                if (EmployeeCode.EmployeeCurrentJob.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.Employee ||
                    EmployeeCode.EmployeeCurrentJob.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.SaudiLabor ||
                    EmployeeCode.EmployeeCurrentJob.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.User ||
                    EmployeeCode.EmployeeCurrentJob.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.Army)
                {
                    result = new Result();
                    result.Entity = this;
                    result.EnumType = typeof(ContractorsBasicSalariesValidationEnum);
                    result.EnumMember = ContractorsBasicSalariesValidationEnum.RejectedBecauseOfEmployeeMustBeContractualEmployee.ToString();
                    return result;
                }
                #endregion

                ContractorsBasicSalaries ContractorBasicSalary = new ContractorsBasicSalaries();
                ContractorBasicSalary.EmployeeCodeID = this.EmployeeCode.EmployeeCodeID; 
                ContractorBasicSalary.BasicSalary = this.BasicSalary;
                ContractorBasicSalary.TransfareAllowance = this.TransfareAllowance;
                ContractorBasicSalary.CreatedDate = DateTime.Now;
                ContractorBasicSalary.CreatedBy = this.LoginIdentity.EmployeeCodeID;

                this.ContractorBasicSalaryID = new ContractorsBasicSalariesDAL().Insert(ContractorBasicSalary);
                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(ContractorsBasicSalariesValidationEnum);
                result.EnumMember = ContractorsBasicSalariesValidationEnum.Done.ToString();

                return result;
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Update()
        {
            try
            {
                Result result = null;

                #region Validation Employee must be Contractor (Saudi / Non-Saudi)
                EmployeesCodesBLL EmployeeCode = new EmployeesCodesBLL().GetByEmployeeCodeID(this.EmployeeCode.EmployeeCodeID);
                if (EmployeeCode.EmployeeCurrentJob.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.Employee ||
                    EmployeeCode.EmployeeCurrentJob.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.SaudiLabor ||
                    EmployeeCode.EmployeeCurrentJob.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.User ||
                    EmployeeCode.EmployeeCurrentJob.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.Army)
                {
                    result = new Result();
                    result.Entity = this;
                    result.EnumType = typeof(ContractorsBasicSalariesValidationEnum);
                    result.EnumMember = ContractorsBasicSalariesValidationEnum.RejectedBecauseOfEmployeeMustBeContractualEmployee.ToString();
                    return result;
                }
                #endregion
                
                ContractorsBasicSalaries ContractorBasicSalary = new ContractorsBasicSalaries();
                ContractorBasicSalary.ContractorBasicSalaryID = this.ContractorBasicSalaryID;
                ContractorBasicSalary.EmployeeCodeID = this.EmployeeCode.EmployeeCodeID;
                ContractorBasicSalary.BasicSalary = this.BasicSalary;
                ContractorBasicSalary.TransfareAllowance = this.TransfareAllowance;
                ContractorBasicSalary.LastUpdatedDate = DateTime.Now;
                ContractorBasicSalary.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;

                int UpdateResult = new ContractorsBasicSalariesDAL().Update(ContractorBasicSalary);
                if (UpdateResult != 0)
                {
                    result = new Result();
                    result.Entity = this;
                    result.EnumType = typeof(ContractorsBasicSalariesValidationEnum);
                    result.EnumMember = ContractorsBasicSalariesValidationEnum.Done.ToString();
                }

                return result;
            }
            catch
            {
                throw;
            }
        }

        public Result Remove(int ContractorBasicSalaryID)
        {
            try
            {
                Result result = null;
                new ContractorsBasicSalariesDAL().Delete(ContractorBasicSalaryID, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(ContractorsBasicSalariesValidationEnum),
                    EnumMember = ContractorsBasicSalariesValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public ContractorsBasicSalariesBLL GetByEmployeeCodeID(int EmployeeCodeID)
        {
            ContractorsBasicSalaries ContractorBasicSalary = new ContractorsBasicSalariesDAL().GetByEmployeeCodeID(EmployeeCodeID);
            ContractorsBasicSalariesBLL Obj = new ContractorsBasicSalariesBLL();
            if (ContractorBasicSalary == null)
            {
                Obj.BasicSalary = 0;
                Obj.TransfareAllowance = 0;
            }
            else
            {
                Obj.BasicSalary = ContractorBasicSalary.BasicSalary;
                Obj.TransfareAllowance = ContractorBasicSalary.TransfareAllowance.HasValue ? ContractorBasicSalary.TransfareAllowance.Value : 0;
            }

            return Obj;
        }

        public ContractorsBasicSalariesBLL GetByContractorBasicSalaryID(int ContractorBasicSalaryID)
        {
            try
            {
                ContractorsBasicSalariesBLL ContractorBasicSalaryBLL = null;
                ContractorsBasicSalaries ContractorsBasicSalary = new ContractorsBasicSalariesDAL().GetByContractorBasicSalaryID(ContractorBasicSalaryID);

                if (ContractorsBasicSalary != null)
                    ContractorBasicSalaryBLL = new ContractorsBasicSalariesBLL().MapContractorBasicSalary(ContractorsBasicSalary);

                return ContractorBasicSalaryBLL;
            }
            catch
            {
                throw;
            }
        }

        public virtual List<ContractorsBasicSalariesBLL> GetContractorsBasicSalaries(out int totalRecordsOut, out int recFilterOut)
        {
            try
            {
                List<ContractorsBasicSalaries> ContractorsBasicSalariesList = new ContractorsBasicSalariesDAL()
                {
                    search = Search,
                    order = Order,
                    orderDir = OrderDir,
                    startRec = StartRec,
                    pageSize = PageSize
                }.GetContractorsBasicSalaries(out totalRecordsOut, out recFilterOut);

                List<ContractorsBasicSalariesBLL> ContractorsBasicSalariesBLLList = new List<ContractorsBasicSalariesBLL>();
                if (ContractorsBasicSalariesList.Count > 0)
                {
                    foreach (var item in ContractorsBasicSalariesList)
                        ContractorsBasicSalariesBLLList.Add(new ContractorsBasicSalariesBLL().MapContractorBasicSalary(item));
                }
                return ContractorsBasicSalariesBLLList;
            }
            catch
            {
                throw;
            }
        }

        public List<ContractorsBasicSalariesBLL> GetContractorsBasicSalaries()
        {
            try
            {
                List<ContractorsBasicSalaries> ContractorsBasicSalariesList = new ContractorsBasicSalariesDAL().GetContractorsBasicSalaries();

                List<ContractorsBasicSalariesBLL> ContractorsBasicSalariesBLLList = new List<ContractorsBasicSalariesBLL>();
                if (ContractorsBasicSalariesList.Count > 0)
                {
                    foreach (var item in ContractorsBasicSalariesList)
                        ContractorsBasicSalariesBLLList.Add(new ContractorsBasicSalariesBLL().MapContractorBasicSalary(item));
                }
                return ContractorsBasicSalariesBLLList;
            }
            catch
            {
                throw;
            }
        }

        internal ContractorsBasicSalariesBLL MapContractorBasicSalary(ContractorsBasicSalaries ContractorBasicSalary)
        {
            try
            {
                ContractorsBasicSalariesBLL ContractorBasicSalaryBLL = null;
                if (ContractorBasicSalary != null)
                {
                    ContractorBasicSalaryBLL = new ContractorsBasicSalariesBLL()
                    {
                        ContractorBasicSalaryID = ContractorBasicSalary.ContractorBasicSalaryID,
                        EmployeeCode = new EmployeesCodesBLL().MapEmployeeCode(ContractorBasicSalary.EmployeesCodes),
                        BasicSalary = ContractorBasicSalary.BasicSalary,
                        TransfareAllowance = ContractorBasicSalary.TransfareAllowance.HasValue ? ContractorBasicSalary.TransfareAllowance.Value : 0,
                        CreatedDate = ContractorBasicSalary.CreatedDate.HasValue ? ContractorBasicSalary.CreatedDate.Value : DateTime.Now,
                        //CreatedBy = new EmployeesCodesBLL().MapEmployeeCode(ContractorBasicSalary.CreatedByNav)
                    };
                }
                return ContractorBasicSalaryBLL;
            }
            catch
            {
                throw;
            }
        }
    }
}