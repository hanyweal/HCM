using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;


namespace HCMBLL
{
    public class GovernmentFundsBLL : CommonEntity, IEntity
    {
        public virtual int GovernmentFundID
        {
            get;
            set;
        }

        public virtual double MonthlyDeductionAmount
        {
            get;
            set;
        }

        public virtual string LoanNo
        {
            get;
            set;
        }

        public virtual DateTime LoanDate
        {
            get;
            set;
        }

        public virtual DateTime DeductionStartDate
        {
            get;
            set;
        }

        public virtual double TotalDeductionAmount
        {
            get;
            set;
        }

        /// <summary>
        /// Dated: 05-12-2020
        /// Task # 218
        /// Formula: RemainingDeductionAmount = TotalDeductionAmount - (MonthlyDeductionAmount * Completed_Months)
        /// Completed_Months = (CurrentDate - LoanStartDate).TotalDays / DaysCountInUmAlquraMonth 
        /// And then applied Floor func as we applied on PromotionModule (also discussed with TL)
        /// </summary>
        public double RemainingDeductionAmount
        {
            get
            {
                bool isActive = this.IsActive.HasValue ? this.IsActive.Value : false;
                double remainingLoanAmount = 0;
                double completedMonth = DateTime.Now.Date.Subtract(this.DeductionStartDate).TotalDays / Convert.ToDouble(this.DaysCountInUmAlquraMonth);
                int completedMonthRounded;

                if (isActive)
                {
                    completedMonthRounded = Convert.ToInt32(Math.Floor(completedMonth));
                    remainingLoanAmount = this.TotalDeductionAmount - (this.MonthlyDeductionAmount * completedMonthRounded);
                }
                else
                    remainingLoanAmount = 0;

                return remainingLoanAmount < 0 ? 0 : remainingLoanAmount;
            }
        }

        public virtual EmployeesCodesBLL EmployeeCode
        {
            get;
            set;
        }

        public virtual GovernmentDeductionsTypesBLL GovernmentDeductionType
        {
            get;
            set;
        }

        public virtual GovernmentFundsTypesBLL GovernmentFundType
        {
            get;
            set;
        }

        public virtual string ContractNo
        {
            get;
            set;
        }

        public virtual DateTime ContractDate
        {
            get;
            set;
        }

        public virtual string SponserToName
        {
            get;
            set;
        }

        public virtual string SponserToIDNo
        {
            get;
            set;
        }

        public virtual KSACitiesBLL KSACity
        {
            get;
            set;
        }

        public virtual bool? IsActive
        {
            get;
            set;
        }

        public virtual DateTime? DeactiveDate
        {
            get;
            set;
        }

        public virtual DateTime? LetterDate
        {
            get;
            set;
        }

        public virtual string LetterNo
        {
            get;
            set;
        }

        public virtual string Notes
        {
            get;
            set;
        }
        public virtual GovernmentFundsDeactiveReasonsBLL GovernmentFundDeactiveReason
        {
            get;
            set;
        }
        public virtual string BankIPAN
        {
            get;
            set;
        }
        public virtual Result Add()
        {
            try
            {
                Result result = null;

                #region Validation for vacation creation during probation period
                EmployeesCareersHistoryBLL HiringRecord = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.EmployeeCode.EmployeeCodeID);
                if (HiringRecord != null)
                {
                    // probation period = hiring date + 1 year
                    DateTime ProbationEndDate = HiringRecord.ProbationEndDate;//.JoinDate.AddYears(1).AddDays(-10);
                    if (ProbationEndDate > this.DeductionStartDate)
                    {
                        result = new Result();
                        result.Entity = HiringRecord;
                        result.EnumType = typeof(GovernmentFundsValidationEnum);
                        result.EnumMember = GovernmentFundsValidationEnum.RejectedBecauseOfBeforeHiringDate.ToString();
                        return result;
                    }
                }
                #endregion

                #region Validation Loan Ammount

                if (this.MonthlyDeductionAmount > this.TotalDeductionAmount)
                {
                    result = new Result();
                    result.Entity = HiringRecord;
                    result.EnumType = typeof(GovernmentFundsValidationEnum);
                    result.EnumMember = GovernmentFundsValidationEnum.RejectedBecauseOfMonthlyDeductionAmountShouldNotGreaterThanTotalDeductionAmount.ToString();
                    return result;
                }
                #endregion

                GovernmentFunds GovernmentFund = new GovernmentFunds();
                GovernmentFund.EmployeeCodeID = this.EmployeeCode.EmployeeCodeID;
                GovernmentFund.GovernmentDeductionTypeID = this.GovernmentDeductionType.GovernmentDeductionTypeID;
                GovernmentFund.GovernmentFundTypeID = this.GovernmentFundType.GovernmentFundTypeID;
                GovernmentFund.LoanNo = this.LoanNo;
                GovernmentFund.LoanDate = this.LoanDate;
                GovernmentFund.DeductionStartDate = this.DeductionStartDate;
                GovernmentFund.MonthlyDeductionAmount = this.MonthlyDeductionAmount;
                GovernmentFund.TotalDeductionAmount = this.TotalDeductionAmount;
                GovernmentFund.SponserToIDNo = this.GovernmentDeductionType.GovernmentDeductionTypeID == Convert.ToInt16(GovernmentDeductionsTypesEnum.Sponser) ? this.SponserToIDNo : null;
                GovernmentFund.SponserToName = this.GovernmentDeductionType.GovernmentDeductionTypeID == Convert.ToInt16(GovernmentDeductionsTypesEnum.Sponser) ? this.SponserToName : null;
                GovernmentFund.ContractNo = this.ContractNo;
                GovernmentFund.BankIPAN = this.BankIPAN;
                //GovernmentFund.ContractDate = this.ContractDate;
                GovernmentFund.IsActive = true;
                GovernmentFund.KSACityID = this.KSACity.KSACityID;
                GovernmentFund.CreatedDate = DateTime.Now;
                GovernmentFund.CreatedBy = this.LoginIdentity.EmployeeCodeID;

                this.GovernmentFundID = new GovernmentFundsDAL().Insert(GovernmentFund);
                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(GovernmentFundsValidationEnum);
                result.EnumMember = GovernmentFundsValidationEnum.Done.ToString();

                return result;
            }
            catch
            {
                throw;
            }
        }

        public Result Remove(int GovernmentFundID)
        {
            try
            {
                Result result = null;
                new GovernmentFundsDAL().Delete(GovernmentFundID, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(GovernmentFundsValidationEnum),
                    EnumMember = GovernmentFundsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Update()
        {
            try
            {
                Result result = null;

                #region Validation for vacation creation during probation period
                EmployeesCareersHistoryBLL HiringRecord = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.EmployeeCode.EmployeeCodeID);
                if (HiringRecord != null)
                {
                    // probation period = hiring date + 1 year
                    DateTime ProbationEndDate = HiringRecord.ProbationEndDate;//.JoinDate.AddYears(1).AddDays(-10);
                    if (ProbationEndDate > this.DeductionStartDate)
                    {
                        result = new Result();
                        result.Entity = HiringRecord;
                        result.EnumType = typeof(GovernmentFundsValidationEnum);
                        result.EnumMember = GovernmentFundsValidationEnum.RejectedBecauseOfBeforeHiringDate.ToString();
                        return result;
                    }
                }
                #endregion

                #region Validation Loan Ammount

                if (this.MonthlyDeductionAmount > this.TotalDeductionAmount)
                {
                    result = new Result();
                    result.Entity = HiringRecord;
                    result.EnumType = typeof(GovernmentFundsValidationEnum);
                    result.EnumMember = GovernmentFundsValidationEnum.RejectedBecauseOfMonthlyDeductionAmountShouldNotGreaterThanTotalDeductionAmount.ToString();
                    return result;
                }
                #endregion

                #region Validation Deactivation
                this.IsActive = new GovernmentFundsBLL().GetByGovernmentFundID(this.GovernmentFundID).IsActive;
                if (this.IsActive == false)
                {
                    result = new Result();
                    result.EnumType = typeof(GovernmentFundsValidationEnum);
                    result.EnumMember = GovernmentFundsValidationEnum.RejectedBecauseOfAlreadyDeactivated.ToString();
                    return result;
                }
                #endregion

                GovernmentFunds GovernmentFund = new GovernmentFunds();
                GovernmentFund.GovernmentFundID = this.GovernmentFundID;
                GovernmentFund.EmployeeCodeID = this.EmployeeCode.EmployeeCodeID;
                GovernmentFund.GovernmentDeductionTypeID = this.GovernmentDeductionType.GovernmentDeductionTypeID;
                GovernmentFund.GovernmentFundTypeID = this.GovernmentFundType.GovernmentFundTypeID;
                GovernmentFund.LoanNo = this.LoanNo;
                GovernmentFund.LoanDate = this.LoanDate;
                GovernmentFund.DeductionStartDate = this.DeductionStartDate;
                GovernmentFund.MonthlyDeductionAmount = this.MonthlyDeductionAmount;
                GovernmentFund.TotalDeductionAmount = this.TotalDeductionAmount;
                GovernmentFund.SponserToIDNo = this.GovernmentDeductionType.GovernmentDeductionTypeID == Convert.ToInt16(GovernmentDeductionsTypesEnum.Sponser) ? this.SponserToIDNo : null;
                GovernmentFund.SponserToName = this.GovernmentDeductionType.GovernmentDeductionTypeID == Convert.ToInt16(GovernmentDeductionsTypesEnum.Sponser) ? this.SponserToName : null;
                GovernmentFund.ContractNo = this.ContractNo;
                GovernmentFund.BankIPAN = this.BankIPAN;
                GovernmentFund.KSACityID = this.KSACity.KSACityID;
                GovernmentFund.LastUpdatedDate = DateTime.Now;
                GovernmentFund.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;

                int UpdateResult = new GovernmentFundsDAL().Update(GovernmentFund);
                if (UpdateResult != 0)
                {
                    result = new Result();
                    result.Entity = this;
                    result.EnumType = typeof(GovernmentFundsValidationEnum);
                    result.EnumMember = GovernmentFundsValidationEnum.Done.ToString();
                }

                return result;
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Deactivate()
        {
            try
            {
                Result result = null;

                #region Validation Deactivation
                this.IsActive = new GovernmentFundsBLL().GetByGovernmentFundID(this.GovernmentFundID).IsActive;
                if (this.IsActive == false)
                {
                    result = new Result();
                    result.EnumType = typeof(GovernmentFundsValidationEnum);
                    result.EnumMember = GovernmentFundsValidationEnum.RejectedBecauseOfAlreadyDeactivated.ToString();
                    return result;
                }
                #endregion

                #region DeactiveDate Validation

                if (this.DeactiveDate < this.DeductionStartDate)
                {
                    result = new Result();
                    result.EnumType = typeof(GovernmentFundsValidationEnum);
                    result.EnumMember = GovernmentFundsValidationEnum.RejectedBecauseOfDeactivationDateShouldNotBeLessThanDeductionStartDate.ToString();
                    return result;
                }
                #endregion

                GovernmentFunds GovernmentFund = new GovernmentFunds();
                GovernmentFund.GovernmentFundID = this.GovernmentFundID;
                GovernmentFund.LetterDate = this.LetterDate;
                GovernmentFund.LetterNo = this.LetterNo;
                GovernmentFund.Notes = this.Notes;
                GovernmentFund.DeactiveDate = this.DeactiveDate;
                GovernmentFund.IsActive = false;
                GovernmentFund.LastUpdatedDate = DateTime.Now;
                GovernmentFund.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;
                GovernmentFund.GovernmentFundDeactiveReasonID = this.GovernmentFundDeactiveReason.GovernmentFundDeactiveReasonID;

                int UpdateResult = new GovernmentFundsDAL().Deactivate(GovernmentFund);
                if (UpdateResult != 0)
                {
                    result = new Result();
                    result.Entity = this;
                    result.EnumType = typeof(GovernmentFundsValidationEnum);
                    result.EnumMember = GovernmentFundsValidationEnum.Done.ToString();
                }

                return result;
            }
            catch
            {
                throw;
            }
        }

        public virtual List<GovernmentFundsBLL> GetGovernmentFunds()
        {
            try
            {
                List<GovernmentFunds> GovernmentFundsList = new GovernmentFundsDAL().GetGovernmentFunds();
                List<GovernmentFundsBLL> GovernmentFundsBLLList = new List<GovernmentFundsBLL>();
                if (GovernmentFundsList.Count > 0)
                {
                    foreach (var item in GovernmentFundsList)
                        GovernmentFundsBLLList.Add(new GovernmentFundsBLL().MapGovernmentFund(item));
                }
                return GovernmentFundsBLLList;
            }
            catch
            {
                throw;
            }
        }

        public virtual List<GovernmentFundsBLL> GetGovernmentFunds(string EmployeeCodeNo)
        {
            try
            {
                List<GovernmentFunds> GovernmentFundsList = new GovernmentFundsDAL().GetGovernmentFunds(EmployeeCodeNo);
                List<GovernmentFundsBLL> GovernmentFundsBLLList = new List<GovernmentFundsBLL>();
                if (GovernmentFundsList.Count > 0)
                {
                    foreach (var item in GovernmentFundsList)
                        GovernmentFundsBLLList.Add(new GovernmentFundsBLL().MapGovernmentFund(item));
                }
                return GovernmentFundsBLLList;
            }
            catch
            {
                throw;
            }
        }

        public virtual List<GovernmentFundsBLL> GetGovernmentFunds(out int totalRecordsOut, out int recFilterOut)
        {
            try
            {
                List<GovernmentFunds> GovernmentFundsList = new GovernmentFundsDAL()
                {
                    search = Search,
                    order = Order,
                    orderDir = OrderDir,
                    startRec = StartRec,
                    pageSize = PageSize,
                    orderByColumnName = OrderByColumnName
                }.GetGovernmentFunds(out totalRecordsOut, out recFilterOut);
                List<GovernmentFundsBLL> GovernmentFundsBLLList = new List<GovernmentFundsBLL>();
                if (GovernmentFundsList.Count > 0)
                {
                    foreach (var item in GovernmentFundsList)
                        GovernmentFundsBLLList.Add(new GovernmentFundsBLL().MapGovernmentFund(item));
                }
                return GovernmentFundsBLLList;
            }
            catch
            {
                throw;
            }
        }

        public virtual GovernmentFundsBLL GetByGovernmentFundID(int GovernmentFundID)
        {
            try
            {
                GovernmentFundsBLL GovernmentFundBLL = null;
                GovernmentFunds GovernmentFund = new GovernmentFundsDAL().GetByGovernmentFundTypeID(GovernmentFundID);

                if (GovernmentFund != null)
                    GovernmentFundBLL = new GovernmentFundsBLL().MapGovernmentFund(GovernmentFund);

                return GovernmentFundBLL;
            }
            catch
            {
                throw;
            }
        }

        public List<GovernmentFundsBLL> GetActiveGovernmentFundsByEmployeeCodeID(int EmployeeCodeID)
        {
            List<GovernmentFundsBLL> GovernmentFundsBLLList = new List<GovernmentFundsBLL>();
            List<GovernmentFunds> GovernmentFundsList = new GovernmentFundsDAL().GetByEmployeeCodeID(EmployeeCodeID);
            foreach (var item in GovernmentFundsList.Where(x => x.IsActive.Equals(true)))
                GovernmentFundsBLLList.Add(new GovernmentFundsBLL().MapGovernmentFund(item));

            return GovernmentFundsBLLList;
        }

        internal GovernmentFundsBLL MapGovernmentFund(GovernmentFunds GovernmentFund)
        {
            try
            {
                GovernmentFundsBLL GovernmentFundBLL = null;
                if (GovernmentFund != null)
                {
                    GovernmentFundBLL = new GovernmentFundsBLL()
                    {
                        GovernmentFundID = GovernmentFund.GovernmentFundID,
                        EmployeeCode = new EmployeesCodesBLL().MapEmployeeCode(GovernmentFund.EmployeesCodes),
                        GovernmentFundType = new GovernmentFundsTypesBLL().MapGovernmentFundsTypes(GovernmentFund.GovernmentFundsTypes),
                        GovernmentDeductionType = new GovernmentDeductionsTypesBLL().MapGovernmentDeductionsTypesBLL(GovernmentFund.GovernmentDeductionsTypes),
                        LoanNo = GovernmentFund.LoanNo,
                        LoanDate = GovernmentFund.LoanDate.Value,
                        MonthlyDeductionAmount = GovernmentFund.MonthlyDeductionAmount,
                        TotalDeductionAmount = GovernmentFund.TotalDeductionAmount,
                        DeductionStartDate = GovernmentFund.DeductionStartDate,
                        IsActive = GovernmentFund.IsActive,
                        LetterDate = GovernmentFund.LetterDate,
                        DeactiveDate = GovernmentFund.DeactiveDate,
                        GovernmentFundDeactiveReason = new GovernmentFundsDeactiveReasonsBLL().MapGovernmentFundsDeactiveReasonsBLL(GovernmentFund.GovernmentFundsDeactiveReasons),
                        LetterNo = GovernmentFund.LetterNo,
                        Notes = GovernmentFund.Notes,
                        ContractNo = GovernmentFund.ContractNo,
                        BankIPAN = GovernmentFund.BankIPAN,
                        KSACity = new KSACitiesBLL().MapKSACity(GovernmentFund.KSACities),
                        SponserToIDNo = GovernmentFund.SponserToIDNo,
                        SponserToName = GovernmentFund.SponserToName,
                        CreatedDate = GovernmentFund.CreatedDate,
                        CreatedBy = new EmployeesCodesBLL().MapEmployeeCode(GovernmentFund.CreatedByNav)
                    };
                }
                return GovernmentFundBLL;
            }
            catch
            {
                throw;
            }
        }
        
    }
}

