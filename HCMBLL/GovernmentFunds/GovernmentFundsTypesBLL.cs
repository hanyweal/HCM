using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class GovernmentFundsTypesBLL : CommonEntity, IEntity
    {
        public virtual int GovernmentFundTypeID
        {
            get;
            set;
        }

        public virtual string GovernmentFundTypeName
        {
            get;
            set;
        }

        public virtual IEnumerable<GovernmentFundsBLL> GovernmentFundsBLL
        {
            get;
            set;
        }

        public virtual Result Add()
        {
            try
            {
                GovernmentFundsTypes GovernmentFundType = new GovernmentFundsTypes()
                {
                    GovernmentFundTypeName = this.GovernmentFundTypeName,
                    CreatedDate = System.DateTime.Now
                };

                this.GovernmentFundTypeID = new GovernmentFundsTypesDAL().Insert(GovernmentFundType);
                Result result = new Result()
                {
                    Entity = this,
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString(),
                };
                return result;
            }
            catch
            {
                throw;
            }
        }

        public static Result Remove(int GovernmentFundTypeID)
        {
            try
            {
                new GovernmentFundsTypesDAL().Delete(new GovernmentFundsTypes() { GovernmentFundTypeID = GovernmentFundTypeID });
                Result result = new Result()
                {
                    //Entity = this,
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString(),
                };
                return result;
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Update()
        {
            try
            {
                GovernmentFundsTypes GovernmentFundType = new GovernmentFundsTypes()
                {
                    GovernmentFundTypeID = this.GovernmentFundTypeID,
                    GovernmentFundTypeName = this.GovernmentFundTypeName,
                    LastUpdatedDate = DateTime.Now
                };
                this.GovernmentFundTypeID = new GovernmentFundsTypesDAL().Update(GovernmentFundType);
                Result result = new Result()
                {
                    Entity = this,
                    EnumType = typeof(LookupsValidationEnum),
                    EnumMember = LookupsValidationEnum.Done.ToString(),
                };
                return result;
            }
            catch
            {
                throw;
            }
        }

        public virtual List<GovernmentFundsTypesBLL> GetGovernmentFundsTypes()
        {
            List<GovernmentFundsTypes> GovernmentFundsTypesList = new GovernmentFundsTypesDAL().GetGovernmentFundsTypes();
            List<GovernmentFundsTypesBLL> GovernmentFundsTypesBLList = new List<GovernmentFundsTypesBLL>();
            if (GovernmentFundsTypesList.Count > 0)
            {
                foreach (var item in GovernmentFundsTypesList)
                {
                    GovernmentFundsTypesBLList.Add(new GovernmentFundsTypesBLL()
                    {
                        GovernmentFundTypeID = item.GovernmentFundTypeID,
                        GovernmentFundTypeName = item.GovernmentFundTypeName,
                        CreatedDate = item.CreatedDate
                    });
                }
            }

            return GovernmentFundsTypesBLList;
        }

        public virtual GovernmentFundsTypesBLL GetByGovernmentFundTypeID(int GovernmentFundTypeID)
        {
            return GetGovernmentFundsTypes().SingleOrDefault(g => g.GovernmentFundTypeID.Equals(GovernmentFundTypeID));
        }

        internal GovernmentFundsTypesBLL MapGovernmentFundsTypes(GovernmentFundsTypes GovernmentFundsType)
        {
            GovernmentFundsTypesBLL GovernmentFundsTypeBLL = null;
            if (GovernmentFundsType != null)
            {
                GovernmentFundsTypeBLL = new GovernmentFundsTypesBLL()
                {
                    GovernmentFundTypeID = GovernmentFundsType.GovernmentFundTypeID,
                    GovernmentFundTypeName = GovernmentFundsType.GovernmentFundTypeName
                };
            }
            return GovernmentFundsTypeBLL;
        }
    }

}

