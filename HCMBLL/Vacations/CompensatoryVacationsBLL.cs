using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace HCMBLL
{
    public class CompensatoryVacationsBLL : BaseVacationsBLL
    {
        public override VacationsTypesEnum VacationType
        {
            get
            {
                return VacationsTypesEnum.Compensatory;
            }
        }

        public HolidaysAttendanceDetailsBLL HolidayAttendanceDetail { get; set; }

        public override float VacationBalance
        {
            get
            {
                float vacationBalance = GetVacationBalanceByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);
                return vacationBalance == 0 ? 0 : vacationBalance + 3;
            }
            set
            {
                VacationBalance = value;
            }
        }

        public DateTime? VacationExpiredDate
        {
            get
            {
                if (HolidayAttendanceDetail != null)
                    return HolidayAttendanceDetail.HolidaysAttendance.HolidaySetting.HolidaySettingEndDate.AddDays(this.DaysCountInUmAlquraYear);
                else
                    return null;
            }
        }

        internal override Vacations DALInstance
        {
            get
            {
                Vacations Vacation = new Vacations()
                {
                    VacationID = this.VacationID,
                    VacationTypeID = (int)this.VacationType,
                    VacationStartDate = this.VacationStartDate,
                    VacationEndDate = this.VacationEndDate,
                    IsCanceled = false,
                    EmployeeCareerHistoryID = this.EmployeeCareerHistory != null ? this.EmployeeCareerHistory.EmployeeCareerHistoryID : 0,
                    CreatedDate = DateTime.Now,
                    CreatedBy = this.LoginIdentity.EmployeeCodeID,
                    LastUpdatedDate = DateTime.Now,
                    LastUpdatedBy = this.LoginIdentity.EmployeeCodeID,
                    HolidayAttendanceDetailID = this.HolidayAttendanceDetail != null ? this.HolidayAttendanceDetail.HolidayAttendanceDetailID : (int?)null
                };
                return Vacation;

            }
        }

        public override Result Add()
        {
            try
            {
                Result result = new Result();

                if (this.HolidayAttendanceDetail == null)
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = VacationsValidationEnum.RejectedBecauseOfNoBalance.ToString();
                    return result;
                }

                #region Validation for balanace
                result = IsBalanceValid();
                if (result != null)
                    return result;
                #endregion

                #region Validate if Vacation pass more than 1 year or  Vacation startDate Less than holiday's EndDate
                HolidaysSettingsBLL HolidaySetting = new HolidaysSettingsBLL();
                HolidaySetting = new HolidaysAttendanceBLL().GetByHolidayAttendanceID(this.HolidayAttendanceDetail.HolidaysAttendance.HolidayAttendanceID).HolidaySetting;
                DateTime? ExpireHoldaySettingDate = this.VacationExpiredDate;
                bool IsExpire = this.VacationEndDate > ExpireHoldaySettingDate || this.VacationStartDate < HolidaySetting.HolidaySettingEndDate;
                if (IsExpire)
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = VacationsValidationEnum.RejectedBecauseOfVacationOutOfRange.ToString();
                    return result;
                }
                #endregion

                #region base validation
                result = base.Add();
                if (result != null)
                    return result;
                #endregion
                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Edit()
        {
            this.EmployeeCareerHistory = this.GetByVacationID(this.VacationID).EmployeeCareerHistory; // to get EmployeeCodeID
            Result result = null;

            #region Validation for balanace
            result = IsBalanceValid(this.VacationID);
            if (result != null)
                return result;
            #endregion

            #region Validation for he was assigned in any holiday aatendance detail or not
            if (this.HolidayAttendanceDetail == null)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(VacationsValidationEnum);
                result.EnumMember = VacationsValidationEnum.RejectedBecauseOfNoBalance.ToString();
                return result;
            }
            #endregion

            #region Validate if Vacation pass more than 1 year or  Vacation startDate Less than holiday's EndDate

            HolidaysSettingsBLL HolidaySetting = new HolidaysSettingsBLL();
            HolidaySetting = new HolidaysAttendanceBLL().GetByHolidayAttendanceID(this.HolidayAttendanceDetail.HolidaysAttendance.HolidayAttendanceID).HolidaySetting;
            DateTime ExpireHoldaySettingDate = HolidaySetting.HolidaySettingEndDate.AddYears(1);
            bool IsExpire = this.VacationEndDate > ExpireHoldaySettingDate || this.VacationStartDate < HolidaySetting.HolidaySettingEndDate;

            if (IsExpire)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(VacationsValidationEnum);
                result.EnumMember = VacationsValidationEnum.RejectedBecauseOfVacationOutOfRange.ToString();
                return result;
            }
            #endregion

            #region base validation
            result = base.Edit();
            if (result != null)
                return result;
            #endregion


            return result;
        }

        public override Result Extend()
        {
            try
            {
                //--====start 
                this.EmployeeCareerHistory = this.GetByVacationID(this.VacationID).EmployeeCareerHistory; // to get employee code id
                CompensatoryVacationsBLL copensatoryVacation = (CompensatoryVacationsBLL)new CompensatoryVacationsBLL().GetByVacationID(this.VacationID);
                this.HolidayAttendanceDetail = copensatoryVacation.HolidayAttendanceDetail;
                //this.HolidayType=copensatoryVacation.HolidayAttendanceDetail.HolidaysAttendance.HolidaySetting.HolidayType;

                //--==== end

                Result result = null;

                #region Validation for balanace
                result = IsBalanceValid();
                if (result != null)
                    return result;
                #endregion

                #region Validation for he was assigned in any holiday aatendance detail or not
                if (this.HolidayAttendanceDetail == null)
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = VacationsValidationEnum.RejectedBecauseOfNoBalance.ToString();
                    return result;
                }
                #endregion

                #region base validation
                result = base.Extend();
                if (result != null)
                    return result;
                #endregion

                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Break()
        {
            try
            {
                Result result = base.Break();

                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Cancel()
        {
            try
            {
                Result result = base.Cancel();

                return result;
            }
            catch
            {
                throw;
            }
        }

        internal override float GetVacationConsumedByEmployeeCodeID(int EmployeeCodeID, int ExceptVacationID = 0)
        {
            if (this.HolidayAttendanceDetail.HolidaysAttendance != null)
            {
                List<CompensatoryVacationsBLL> CompensatoryVacations = this.GetByEmployeeCodeVacationTypeNotCanceled(EmployeeCodeID, ExceptVacationID).Select(x => x as CompensatoryVacationsBLL).ToList();
                return CompensatoryVacations.Where(x => x.HolidayAttendanceDetail.HolidayAttendanceDetailID == this.HolidayAttendanceDetail.HolidayAttendanceDetailID).Sum(x => x.VacationPeriod);


                //HolidaysSettingsBLL HolidaySetting;
                //if (this.HolidayAttendanceDetail.HolidaysAttendance.HolidaySetting == null)
                //{
                //    HolidaysAttendanceBLL HolidayAttendance = new HolidaysAttendanceBLL().GetByHolidayAttendanceID(this.HolidayAttendanceDetail.HolidaysAttendance.HolidayAttendanceID);
                //    HolidaySetting = HolidayAttendance.HolidaySetting;
                //    this.HolidayAttendanceDetail.HolidaysAttendance.HolidaySetting = HolidaySetting;

                //}
                //List<CompensatoryVacationsBLL> compensatoryEmployeeVacations = new List<CompensatoryVacationsBLL>();

                //HolidaySetting = new HolidaysSettingsBLL().GetByMaturityYearIDAndHolidayTypeID(this.HolidayAttendanceDetail.HolidaysAttendance.HolidaySetting.MaturityYear.MaturityYearID, this.HolidayAttendanceDetail.HolidaysAttendance.HolidaySetting.HolidayType.HolidayTypeID);

                //if (HolidaySetting != null)
                //{
                //    List<HolidaysAttendanceBLL> HolidayAttendanceList = new HolidaysAttendanceBLL().GetByHolidaySettingID(HolidaySetting.HolidaySettingID);
                //    //if
                //    List<HolidaysAttendanceDetailsBLL> HolidaysAttendanceDetailsList = new List<HolidaysAttendanceDetailsBLL>();
                //    HolidayAttendanceList.ForEach(c => HolidaysAttendanceDetailsList.AddRange(c.HolidaysAttendanceDetails.ToList()));
                //    this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(EmployeeCodeID); //{ EmployeeCode = new EmployeesCodesBLL() { EmployeeCodeID = EmployeeCodeID } 
                //    this.HolidayAttendanceDetail = HolidaysAttendanceDetailsList.FirstOrDefault(x => x.EmployeeCareerHistory.EmployeeCareerHistoryID == this.EmployeeCareerHistory.EmployeeCareerHistoryID);
                //    if (this.HolidayAttendanceDetail != null)
                //    {
                //        compensatoryEmployeeVacations = GetByHolidayAttendanceDetailID(this.HolidayAttendanceDetail.HolidayAttendanceDetailID).Where(c => HolidaysAttendanceDetailsList.Exists(x => x.HolidayAttendanceDetailID == c.HolidayAttendanceDetail.HolidayAttendanceDetailID)).ToList();
                //    }
                //}

                //return compensatoryEmployeeVacations.Sum(c => c.VacationPeriod);

            }
            else
                return 0;

        }

        private float GetVacationBalanceByEmployeeCodeID(int EmployeeCodeID)
        {
            //return this.GetByEmployeeCodeVacationTypeNotCanceled(EmployeeCodeID)
            //   .ToList().Sum(d => d.VacationPeriod);
            if (this.HolidayAttendanceDetail.HolidaysAttendance != null)
            {
                HolidaysSettingsBLL HolidaySetting;
                if (this.HolidayAttendanceDetail.HolidaysAttendance.HolidaySetting == null)
                {
                    HolidaysAttendanceBLL HolidayAttendance = new HolidaysAttendanceBLL().GetByHolidayAttendanceID(this.HolidayAttendanceDetail.HolidaysAttendance.HolidayAttendanceID);
                    HolidaySetting = HolidayAttendance.HolidaySetting;//new HolidaysSettingsBLL().GetByHolidaySettingID(HolidayAttendance.HolidaySetting.HolidaySettingID);
                    this.HolidayAttendanceDetail.HolidaysAttendance.HolidaySetting = HolidaySetting;

                }

                //HolidaysSettingsBLL HolidaySetting = new HolidaysSettingsBLL().GetByMaturityYearIDAndHolidayTypeID(this.MaturityYear.MaturityYearID, this.HolidayType.HolidayTypeID);
                HolidaySetting = new HolidaysSettingsBLL().GetByMaturityYearIDAndHolidayTypeID(this.HolidayAttendanceDetail.HolidaysAttendance.HolidaySetting.MaturityYear.MaturityYearID, this.HolidayAttendanceDetail.HolidaysAttendance.HolidaySetting.HolidayType.HolidayTypeID);

                if (HolidaySetting != null)
                {
                    List<HolidaysAttendanceBLL> HolidayAttendanceList = new HolidaysAttendanceBLL().GetByHolidaySettingID(HolidaySetting.HolidaySettingID);
                    if (HolidayAttendanceList != null)
                    {
                        List<HolidaysAttendanceDetailsBLL> HolidaysAttendanceDetailsList = new List<HolidaysAttendanceDetailsBLL>();
                        HolidayAttendanceList.ForEach(c => HolidaysAttendanceDetailsList.AddRange(c.HolidaysAttendanceDetails.ToList()));
                        //this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(EmployeeCodeID); //{ EmployeeCode = new EmployeesCodesBLL() { EmployeeCodeID = EmployeeCodeID } 
                        this.EmployeeCareerHistory = new EmployeesCodesBLL().GetCareerHistoryByEmployeeCodeID(EmployeeCodeID).FirstOrDefault(c => c.IsActive==true); //{ EmployeeCode = new EmployeesCodesBLL() { EmployeeCodeID = EmployeeCodeID } 
                        if (HolidaysAttendanceDetailsList.Any(x => x.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID == EmployeeCodeID))
                        {
                            return HolidaySetting != null ? HolidaySetting.HolidaySettingEndDate.Subtract(HolidaySetting.HolidaySettingStartDate).Days + 1 : 0;
                        }
                    }

                }

            }
            return 0;
        }

        public HolidaysAttendanceDetailsBLL GetHolidayAttendanceDetailByEmployeeCodeIDAndHolidayTypeIDAndHolidaySettingID(int EmployeeCodeID, int MaturityYearID, int HolidayTypeID)
        {
            HolidaysSettingsBLL HolidaySetting = new HolidaysSettingsBLL().GetByMaturityYearIDAndHolidayTypeID(MaturityYearID, HolidayTypeID);
            if (HolidaySetting != null)
            {
                List<HolidaysAttendanceBLL> HolidayAttendanceList = new HolidaysAttendanceBLL().GetByHolidaySettingID(HolidaySetting.HolidaySettingID);
                //if
                List<HolidaysAttendanceDetailsBLL> HolidaysAttendanceDetailsList = new List<HolidaysAttendanceDetailsBLL>();
                HolidayAttendanceList.ForEach(c => HolidaysAttendanceDetailsList.AddRange(c.HolidaysAttendanceDetails.ToList()));
                //EmployeesCareersHistoryBLL EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(EmployeeCodeID); //{ EmployeeCode = new EmployeesCodesBLL() { EmployeeCodeID = EmployeeCodeID } 

                EmployeesCareersHistoryBLL EmployeeCareerHistory = new EmployeesCodesBLL().GetCareerHistoryByEmployeeCodeID(EmployeeCodeID).FirstOrDefault(c => c.IsActive==true); //{ EmployeeCode = new EmployeesCodesBLL() { EmployeeCodeID = EmployeeCodeID } 
                var result= HolidaysAttendanceDetailsList.FirstOrDefault(x => x.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID== EmployeeCodeID);
                return result;
            }
            else
            {
                return null;
            }

        }

        public List<CompensatoryVacationsBLL> GetByHolidayAttendanceDetailID(int HolidayAttendanceDetailID)
        {
            //return this.GetByEmployeeCodeVacationType(EmployeeCodeID, VacationType).Where(x => x.VacationEndDate > DateTime.Now.Date && x.IsCanceled != true).OrderBy(x => x.VacationStartDate).ToList();
            List<CompensatoryVacationsBLL> VacationsBLLList = new List<CompensatoryVacationsBLL>();
            List<Vacations> VacationsList = new VacationsDAL().GetValidByHolidayAttendanceDetailID(HolidayAttendanceDetailID).ToList();
            foreach (var Vacation in VacationsList)
            {
                VacationsBLLList.Add((CompensatoryVacationsBLL)this.MapVacation(Vacation));
            }

            return VacationsBLLList;
        }

        //private Result IsBalanceValid(int ExceptVacationID = 0)
        //{
        //    Result result = null;

        //    //List<CompensatoryVacationsBLL> CompensatoryVacations = this.GetByEmployeeCodeVacationTypeNotCanceled(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, ExceptVacationID).Select(x => x as CompensatoryVacationsBLL).ToList();
        //    //this.VacationConsumedBalance = CompensatoryVacations.Where(x => x.HolidayAttendanceDetail.HolidayAttendanceDetailID == this.HolidayAttendanceDetail.HolidayAttendanceDetailID).Sum(x => x.VacationPeriod);
        //    //GetVacationConsumedByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);

        //    this.VacationConsumedBalance = this.GetVacationConsumedByEmployeeCodeID(ExceptVacationID);

        //    if ((this.VacationConsumedBalance + this.VacationPeriod) > this.VacationBalance)
        //    {
        //        result = new Result();
        //        result.Entity = null;
        //        result.EnumType = typeof(VacationsValidationEnum);
        //        result.EnumMember = VacationsValidationEnum.RejectedBecauseOfNoBalance.ToString();
        //    }

        //    return result;
        //}

        //public override void GetVacationBalance()
        //{
        //    this.VacationConsumedBalance = this.GetVacationConsumedByEmployeeCodeID();
        //}

    }
}

