using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace HCMBLL
{
    public class AccompanimentVacationsBLL : BaseVacationsBLL
    {
        public override VacationsTypesEnum VacationType
        {
            get
            {
                return VacationsTypesEnum.Accompaniment;
            }
        }

        public SickVacationsTypesEnum SickVacationType
        {
            get;
            set;
        }

        public int AccompanimentLeaveDaysLimit
        {
            get
            {
                return this.DaysCountInUmAlquraYear * 10;
            }
        }

        internal override Vacations DALInstance
        {
            get
            {
                Vacations Vacation = base.DALInstance;
                Vacation.SickVacationTypeID = (int)this.VacationType == (Int16)VacationsTypesEnum.Accompaniment ? (int)this.SickVacationType : (int?)null;
                return Vacation;

            }
        }

        public override Result Add()
        {
            try
            {
                Result result = new Result();

                #region Validation for balanace
                result = IsBalanceValid();
                if (result != null)
                    return result;

                result = IsNormalVacationExistsAndConsumedMaxLimit();
                if (result != null)
                    return result;
                #endregion

                #region base validation
                result = base.Add();
                //if (result != null)
                //    return result;
                #endregion

                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Edit()
        {
            this.EmployeeCareerHistory = this.GetByVacationID(this.VacationID).EmployeeCareerHistory; // to get EmployeeCodeID
            Result result = new Result();

            #region Validation for vacation creation during probation period
            EmployeesCareersHistoryBLL HiringRecord = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);
            if (HiringRecord != null)
            {
                // probation period = hiring date + 1 year
                DateTime ProbationEndDate = HiringRecord.ProbationEndDate;//.JoinDate.AddYears(1).AddDays(-10);
                if (ProbationEndDate > this.VacationStartDate)
                {
                    result = new Result();
                    result.Entity = HiringRecord;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = VacationsValidationEnum.RejectedBecauseOfDuringProbation.ToString();
                    return result;
                }
            }
            #endregion

            #region Validation for balanace
            result = IsBalanceValid(this.VacationID);
            if (result != null)
                return result;

            result = IsNormalVacationExistsAndConsumedMaxLimit();
            if (result != null)
                return result;
            #endregion

            #region base validation
            result = base.Edit();
            //if (result != null)
            //    return result;
            #endregion

            return result;
        }

        public override Result Extend()
        {
            try
            {
                this.EmployeeCareerHistory = this.GetByVacationID(this.VacationID).EmployeeCareerHistory; // to get employee code id
                Result result = new Result();

                #region Validation for balanace

                result = IsBalanceValid();
                if (result != null)
                    return result;

                result = IsNormalVacationExistsAndConsumedMaxLimit();
                if (result != null)
                    return result;
                #endregion

                #region base validation
                result = base.Extend();
                //if (result != null)
                //    return result;
                #endregion

                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Break()
        {
            try
            {
                Result result = base.Break();

                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Cancel()
        {
            try
            {
                Result result = base.Cancel();

                return result;
            }
            catch
            {
                throw;
            }
        }

        public int GetDaysWithTwoDates(int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            DateTime VacationStartDate, VacationEndDate, Date;
            int DaysCounter = 0;
            List<BaseVacationsBLL> AccompanimentVacations = this.GetByEmployeeCodeVacationType(EmployeeCodeID);

            for (DateTime i = StartDate; i <= EndDate;)
            {
                Date = i;// Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", i.Day, i.Month, i.Year)), new CultureInfo("en-US"));               

                foreach (BaseVacationsBLL item in AccompanimentVacations)
                {
                    VacationStartDate = item.VacationStartDate.Date;
                    VacationEndDate = item.VacationEndDate.Date;

                    if (Date >= VacationStartDate && Date <= VacationEndDate)
                        DaysCounter++;
                }

                i = i.AddDays(1);
            }

            return DaysCounter;
        }

        internal override Result IsBalanceValid(int ExceptVacationID = 0)
        {
            Result result = null;

            List<VacationBalanceTable> VacationBalanceTable = GetBalanceTable(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, this.VacationStartDate, ExceptVacationID);

            if ((this.VacationConsumedBalance + this.VacationPeriod) > this.VacationBalance)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(VacationsValidationEnum);
                result.EnumMember = VacationsValidationEnum.RejectedBecauseOfNoBalance.ToString();
            }
            else
            {
                if (VacationBalanceTable.Count > 0)
                {
                    List<VacationBalanceTable> VacationBalanceTableFiltered = VacationBalanceTable
                                                                                    .Where(v => (v.StartDate <= this.VacationStartDate && v.EndDate >= this.VacationStartDate) &&
                                                                                          (v.StartDate <= this.VacationEndDate && v.EndDate >= this.VacationEndDate))
                                                                                    .ToList();

                    if (VacationBalanceTableFiltered.Count <= 0)
                    {
                        result = new Result();
                        result.Entity = null;
                        result.EnumType = typeof(VacationsValidationEnum);
                        result.EnumMember = VacationsValidationEnum.RejectedBecauseSickExceptionalVacationDatesOutOfRange.ToString();
                    }
                }
            }

            return result;
        }

        public List<VacationBalanceTable> GetBalanceTable(int EmployeeCodeID, DateTime? VacationStartDat, int VacationID)
        {
            List<VacationBalanceTable> VacationBalanceTable = new List<VacationBalanceTable>();
            List<BaseVacationsBLL> AccompanimentLeaves = GetByEmployeeCodeVacationTypeNotCanceled(EmployeeCodeID).OrderBy(e => e.VacationStartDate).ToList();
            int index = 0;
            VacationBalanceTable VacationBalanceRow;
            DateTime PreviousRowEndDate = DateTime.Now.Date;
            //VacationStartDat = VacationStartDat.HasValue ? VacationStartDat.Value : Convert.ToDateTime(DateTime.Now.Date, new CultureInfo("en-US"));

            if (!VacationStartDat.HasValue)
            {
                BaseVacationsBLL FirstVacation = new AccompanimentVacationsBLL().GetByEmployeeCodeVacationTypeNotCanceled(EmployeeCodeID).FirstOrDefault();
                if (FirstVacation != null && FirstVacation.VacationID > 0)
                    VacationStartDate = FirstVacation.VacationStartDate;
            }

            // exclude vacation in case of edit / extend
            if (VacationID > 0)
                AccompanimentLeaves = AccompanimentLeaves.Where(s => s.VacationID != VacationID).ToList();

            foreach (AccompanimentVacationsBLL AccompanimentLeave in AccompanimentLeaves)
            {
                if (index == 0)
                {
                    // User try to get new vacation before the first vacation in vacation table.
                    if (VacationStartDat < AccompanimentLeave.VacationStartDate)
                    {
                        VacationBalanceTable.Add(new VacationBalanceTable()
                        {
                            EmployeeCodeID = EmployeeCodeID,
                            StartDate = VacationStartDat.Value,
                            EndDate = VacationStartDat.Value.AddDays(this.AccompanimentLeaveDaysLimit),
                            ConsumedBalance = 0,
                            RemainingBalance = this.VacationBalance
                        });
                        PreviousRowEndDate = VacationStartDat.Value.AddDays(this.AccompanimentLeaveDaysLimit).AddDays(1);

                        // check if vacation lies between balanceTable rows, if exists update comsumed else added new row
                        VacationBalanceRow = VacationBalanceTable.FirstOrDefault(v => v.StartDate <= AccompanimentLeave.VacationStartDate && v.EndDate >= AccompanimentLeave.VacationEndDate);
                        if (VacationBalanceRow != null && VacationBalanceRow.EmployeeCodeID > 0)
                        {
                            VacationBalanceRow.ConsumedBalance += AccompanimentLeave.VacationPeriod;
                            VacationBalanceRow.RemainingBalance = this.VacationBalance - VacationBalanceRow.ConsumedBalance;
                        }
                        else
                        {
                            VacationBalanceTable.Add(new VacationBalanceTable()
                            {
                                EmployeeCodeID = EmployeeCodeID,
                                StartDate = AccompanimentLeave.VacationStartDate,
                                EndDate = AccompanimentLeave.VacationStartDate.AddDays(this.AccompanimentLeaveDaysLimit),
                                ConsumedBalance = AccompanimentLeave.VacationPeriod,
                                RemainingBalance = this.VacationBalance - AccompanimentLeave.VacationPeriod
                            });
                            PreviousRowEndDate = AccompanimentLeave.VacationStartDate.AddDays(this.AccompanimentLeaveDaysLimit).AddDays(1);
                        }

                    }
                    else
                    {
                        VacationBalanceTable.Add(new VacationBalanceTable()
                        {
                            EmployeeCodeID = EmployeeCodeID,
                            StartDate = AccompanimentLeave.VacationStartDate,
                            EndDate = AccompanimentLeave.VacationStartDate.AddDays(this.AccompanimentLeaveDaysLimit),
                            ConsumedBalance = AccompanimentLeave.VacationPeriod,
                            RemainingBalance = this.VacationBalance - AccompanimentLeave.VacationPeriod
                        });
                        PreviousRowEndDate = AccompanimentLeave.VacationStartDate.AddDays(this.AccompanimentLeaveDaysLimit).AddDays(1);
                    }
                }
                else
                {
                    // check if vacation lies between balanceTable rows, if exists update comsumed else added new row
                    VacationBalanceRow = VacationBalanceTable.FirstOrDefault(v => v.StartDate <= AccompanimentLeave.VacationStartDate && v.EndDate >= AccompanimentLeave.VacationEndDate);
                    if (VacationBalanceRow != null && VacationBalanceRow.EmployeeCodeID > 0)
                    {
                        VacationBalanceRow.ConsumedBalance += AccompanimentLeave.VacationPeriod;
                        VacationBalanceRow.RemainingBalance = this.VacationBalance - VacationBalanceRow.ConsumedBalance;
                    }
                    else
                    {
                        VacationBalanceTable.Add(new VacationBalanceTable()
                        {
                            EmployeeCodeID = EmployeeCodeID,
                            StartDate = AccompanimentLeave.VacationStartDate,
                            EndDate = AccompanimentLeave.VacationStartDate.AddDays(this.AccompanimentLeaveDaysLimit),
                            ConsumedBalance = AccompanimentLeave.VacationPeriod,
                            RemainingBalance = this.VacationBalance - AccompanimentLeave.VacationPeriod
                        });
                        PreviousRowEndDate = AccompanimentLeave.VacationStartDate.AddDays(this.AccompanimentLeaveDaysLimit).AddDays(1);
                    }
                }
                index++;
            }

            // added new row in BalanceTable if current vacation start date is greater than end date of last row of BalanceTable.
            if (index > 0 && VacationStartDat.HasValue && VacationStartDat.Value > PreviousRowEndDate)
            {
                VacationBalanceTable.Add(new VacationBalanceTable()
                {
                    EmployeeCodeID = EmployeeCodeID,
                    StartDate = VacationStartDat.Value,
                    EndDate = VacationStartDat.Value.AddDays(this.AccompanimentLeaveDaysLimit),
                    ConsumedBalance = 0,
                    RemainingBalance = this.VacationBalance
                });
            }

            #region Get Last Consumed
            VacationBalanceTable VacationBalanceLastRow;
            if (VacationStartDat.HasValue)
                VacationBalanceLastRow = VacationBalanceTable.OrderByDescending(v => v.StartDate).FirstOrDefault(v => v.StartDate <= VacationStartDat && v.EndDate >= VacationStartDat);
            else
                VacationBalanceLastRow = VacationBalanceTable.OrderByDescending(v => v.StartDate).FirstOrDefault();

            if (VacationBalanceLastRow != null && VacationBalanceLastRow.EmployeeCodeID > 0)
                this.VacationConsumedBalance = VacationBalanceLastRow.ConsumedBalance;
            else
                this.VacationConsumedBalance = 0;
            #endregion

            return VacationBalanceTable;
        }

    }
}

