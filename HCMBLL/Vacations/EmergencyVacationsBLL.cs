using HCMBLL.Enums;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Linq;

namespace HCMBLL
{
    public class EmergencyVacationsBLL : BaseVacationsBLL
    {
        public override VacationsTypesEnum VacationType
        {
            get
            {
                return VacationsTypesEnum.Emergency;
            }
        }

        public override Result Add()
        {
            try
            {
                Result result = null;

                #region Validation for vacation creation during probation period
                //EmployeesCareersHistoryBLL HiringRecord = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);
                //if (HiringRecord != null)
                //{
                //    // probation period = hiring date + 1 year
                //    DateTime ProbationEndDate = HiringRecord.ProbationEndDate; //Globals.Calendar.AddYearMonthDayInUmAlQuraDate(HiringRecord.JoinDate, 1, 0, 0);    //  HiringRecord.JoinDate.AddYears(1).AddDays(-10);
                //    if (ProbationEndDate > this.VacationStartDate)
                //    {
                //        result = new Result();
                //        result.Entity = HiringRecord;
                //        result.EnumType = typeof(VacationsValidationEnum);
                //        result.EnumMember = VacationsValidationEnum.RejectedBecauseOfDuringProbation.ToString();
                //        return result;
                //    }
                //}
                #endregion

                #region Validation for balanace
                result = IsBalanceValid();
                if (result != null)
                    return result;

                //result = IsNormalVacationExistsAndConsumedMaxLimit();
                //if (result != null)
                //    return result;
                #endregion

                #region Validation for if employee has normal balance and he does not work as a teacher
                // check employee works as a teacher or not ... if he works as a teacher, he can get exceptional vacation even if he has normal vacation balance or not
                bool IsEmployeeWorksAsTeacher = new TeachersBLL().IsEmployeeWorksAsTeacher(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, this.VacationStartDate, this.VacationEndDate);
                if (!IsEmployeeWorksAsTeacher)
                {
                    result = IsNormalVacationExistsAndConsumedMaxLimit();
                    if (result != null)
                        return result;
                }
                #endregion

                #region base validation
                result = base.Add();
                #endregion

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public override Result Edit()
        {
            try
            {
                this.EmployeeCareerHistory = this.GetByVacationID(this.VacationID).EmployeeCareerHistory; // to get EmployeeCodeID
                Result result = new Result();

                #region Validation for vacation creation during probation period 
                // it was stoped by user
                //EmployeesCareersHistoryBLL HiringRecord = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);
                //if (HiringRecord != null)
                //{
                //    // probation period = hiring date + 1 year
                //    DateTime ProbationEndDate = HiringRecord.ProbationEndDate;//.JoinDate.AddYears(1).AddDays(-10);
                //    if (ProbationEndDate > this.VacationStartDate)
                //    {
                //        result = new Result();
                //        result.Entity = HiringRecord;
                //        result.EnumType = typeof(VacationsValidationEnum);
                //        result.EnumMember = VacationsValidationEnum.RejectedBecauseOfDuringProbation.ToString();
                //        return result;
                //    }
                //}
                #endregion

                #region Validation for balanace
                result = IsBalanceValid(this.VacationID);
                if (result != null)
                    return result;

                result = IsNormalVacationExistsAndConsumedMaxLimit();
                if (result != null)
                    return result;
                #endregion

                #region base validation
                result = base.Edit();

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public override Result Extend()
        {
            try
            {
                this.EmployeeCareerHistory = this.GetByVacationID(this.VacationID).EmployeeCareerHistory; // to get employee code id
                Result result = new Result();

                #region Validation for balanace                
                result = IsBalanceValid();
                if (result != null)
                    return result;

                result = IsNormalVacationExistsAndConsumedMaxLimit();
                if (result != null)
                    return result;
                #endregion

                #region base validation
                result = base.Extend();

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public override Result Break()
        {
            try
            {
                Result result = base.Break();

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public override Result Cancel()
        {
            try
            {
                Result result = base.Cancel();

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        internal override float GetVacationConsumedByEmployeeCodeID(int EmployeeCodeID, int ExceptVacationID = 0)
        {
            List<EmergencyVacationsBLL> EmergencyVacations = this.GetByEmployeeCodeVacationTypeNotCanceled(EmployeeCodeID, ExceptVacationID)
                                                            .Where(x => x.VacationStartDate.Year == DateTime.Now.Year) // resetting consumed balance every greg year
                                                            .Select(x => x as EmergencyVacationsBLL).ToList();
            return EmergencyVacations.Sum(x => x.VacationPeriod);
        }
    }
}

