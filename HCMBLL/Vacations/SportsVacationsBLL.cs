using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace HCMBLL
{
    public class SportsVacationsBLL : BaseVacationsBLL
    {
        public override VacationsTypesEnum VacationType
        {
            get
            {
                return VacationsTypesEnum.Sports;
            }
        }

        public SportsSeasonsBLL SportsSeason
        {
            get;
            set;
        }

        internal override Vacations DALInstance
        {
            get
            {
                Vacations Vacation = base.DALInstance;
                Vacation.SportsSeasonID = this.SportsSeason.SportsSeasonID;
                return Vacation;

            }
        }

        public override Result Add()
        {
            try
            {
                Result result = new Result();

                #region Validation for vacation creation during probation period
                EmployeesCareersHistoryBLL HiringRecord = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);
                if (HiringRecord != null)
                {
                    // probation period = hiring date + 1 year
                    DateTime ProbationEndDate = HiringRecord.ProbationEndDate;//.JoinDate.AddYears(1).AddDays(-10);
                    if (ProbationEndDate > this.VacationStartDate)
                    {
                        result = new Result();
                        result.Entity = HiringRecord;
                        result.EnumType = typeof(VacationsValidationEnum);
                        result.EnumMember = VacationsValidationEnum.RejectedBecauseOfDuringProbation.ToString();
                        return result;
                    }
                }
                #endregion

                #region Validation for balanace
                result = IsBalanceValid();
                if (result != null)
                    return result;
                #endregion

                #region Validation for vacation start date and end date according to sportsseason
                this.SportsSeason = new SportsSeasonsBLL().GetBySportsSeasonID(this.SportsSeason.SportsSeasonID);
                if (SportsSeason != null)
                {
                    if ((this.VacationStartDate < this.SportsSeason.SportsSeasonStartDate && this.VacationEndDate < this.SportsSeason.SportsSeasonEndDate) ||
                          (this.VacationStartDate < this.SportsSeason.SportsSeasonStartDate && this.VacationEndDate > this.SportsSeason.SportsSeasonEndDate) ||
                          (this.VacationStartDate > this.SportsSeason.SportsSeasonStartDate && this.VacationEndDate > this.SportsSeason.SportsSeasonEndDate))
                    {
                        result = new Result();
                        result.Entity = null;
                        result.EnumType = typeof(VacationsValidationEnum);
                        result.EnumMember = VacationsValidationEnum.RejectedBecauseOfInvalidSportsDates.ToString();
                        return result;
                    }
                }
                if (SportsSeason == null)
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = VacationsValidationEnum.SportsSeasonDoesNotExist.ToString();
                    return result;
                }
                #endregion

                #region base validation
                result = base.Add();
                //if (result != null)
                //    return result;
                #endregion

                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Edit()
        {
            this.EmployeeCareerHistory = this.GetByVacationID(this.VacationID).EmployeeCareerHistory; // to get EmployeeCodeID
            Result result = new Result();

            #region Validation for vacation creation during probation period
            EmployeesCareersHistoryBLL HiringRecord = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);
            if (HiringRecord != null)
            {
                // probation period = hiring date + 1 year
                DateTime ProbationEndDate = HiringRecord.ProbationEndDate;//.JoinDate.AddYears(1).AddDays(-10);
                if (ProbationEndDate > this.VacationStartDate)
                {
                    result = new Result();
                    result.Entity = HiringRecord;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = VacationsValidationEnum.RejectedBecauseOfDuringProbation.ToString();
                    return result;
                }
            }
            #endregion

            #region Validation for balanace
            result = IsBalanceValid(this.VacationID);
            if (result != null)
                return result;
            #endregion

            #region Validation for vacation start date and end date according to sportsseason
            this.SportsSeason = new SportsSeasonsBLL().GetBySportsSeasonID(this.SportsSeason.SportsSeasonID);
            if (SportsSeason != null)
            {
                if ((this.VacationStartDate < this.SportsSeason.SportsSeasonStartDate && this.VacationEndDate < this.SportsSeason.SportsSeasonEndDate) ||
                      (this.VacationStartDate < this.SportsSeason.SportsSeasonStartDate && this.VacationEndDate > this.SportsSeason.SportsSeasonEndDate) ||
                      (this.VacationStartDate > this.SportsSeason.SportsSeasonStartDate && this.VacationEndDate > this.SportsSeason.SportsSeasonEndDate))
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = VacationsValidationEnum.RejectedBecauseOfInvalidSportsDates.ToString();
                    return result;
                }
            }
            if (SportsSeason == null)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(VacationsValidationEnum);
                result.EnumMember = VacationsValidationEnum.SportsSeasonDoesNotExist.ToString();
                return result;
            }
            #endregion

            #region base validation
            result = base.Edit();

            #endregion

            return result;
        }

        public override Result Extend()
        {
            try
            {
                this.EmployeeCareerHistory = this.GetByVacationID(this.VacationID).EmployeeCareerHistory; // to get employee code id
                Result result = new Result();

                #region Validation for balanace
                result = IsBalanceValid();
                if (result != null)
                    return result;
                #endregion

                #region Validation for vacation start date and end date according to sportsseason
                this.SportsSeason = new SportsSeasonsBLL().GetBySportsSeasonID(this.SportsSeason.SportsSeasonID);
                if (SportsSeason != null)
                {
                    if ((this.VacationStartDate < this.SportsSeason.SportsSeasonStartDate && this.VacationEndDate < this.SportsSeason.SportsSeasonEndDate) ||
                          (this.VacationStartDate < this.SportsSeason.SportsSeasonStartDate && this.VacationEndDate > this.SportsSeason.SportsSeasonEndDate) ||
                          (this.VacationStartDate > this.SportsSeason.SportsSeasonStartDate && this.VacationEndDate > this.SportsSeason.SportsSeasonEndDate))
                    {
                        result = new Result();
                        result.Entity = null;
                        result.EnumType = typeof(VacationsValidationEnum);
                        result.EnumMember = VacationsValidationEnum.RejectedBecauseOfInvalidSportsDates.ToString();
                        return result;
                    }
                }
                if (SportsSeason == null)
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = VacationsValidationEnum.SportsSeasonDoesNotExist.ToString();
                    return result;
                }
                #endregion

                #region base validation
                result = base.Extend();
                //if (result != null)
                //    return result;
                #endregion

                return result;

            }
            catch
            {
                throw;
            }
        }

        public override Result Break()
        {
            try
            {
                Result result = base.Break();

                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Cancel()
        {
            try
            {
                Result result = base.Cancel();

                return result;
            }
            catch
            {
                throw;
            }
        }

        internal override float GetVacationConsumedByEmployeeCodeID(int EmployeeCodeID, int ExceptVacationID = 0)
        {
            List<SportsVacationsBLL> SportsVacations = this.GetByEmployeeCodeSportsVacationTypeNotCanceled(EmployeeCodeID, this.SportsSeason.SportsSeasonID, ExceptVacationID).Select(x => x as SportsVacationsBLL).ToList();
            return SportsVacations.Sum(x => x.VacationPeriod);
        }

        public virtual List<SportsVacationsBLL> GetByEmployeeCodeSportsVacationTypeNotCanceled(int EmployeeCodeID, int SportsSeasonID, int? ExceptVactionID = 0)
        {
            List<BaseVacationsBLL> BaseVacationList = this.GetByEmployeeCodeVacationType(EmployeeCodeID).Where
                               (x => x.IsCanceled == false
                                   && (ExceptVactionID != 0 ? x.VacationID != ExceptVactionID : x.VacationID == x.VacationID)
                               ).ToList();
            List<SportsVacationsBLL> SportsVacationList = BaseVacationList.Cast<SportsVacationsBLL>().Where(x => x.SportsSeason.SportsSeasonID == SportsSeasonID).ToList();
            return SportsVacationList;
        }
    }
}

