using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class NormalVacationsBLL : BaseVacationsBLL
    {
        public override VacationsTypesEnum VacationType
        {
            get
            {
                return VacationsTypesEnum.Normal;
            }

        }

        private DateTime StartDateOf1438InGreg
        {
            get
            {
                // 1438-01-01 ==> 02-10-2016 or 2nd Oct 2016   (GREGORIAN)
                return new DateTime(2016, 10, 2);
            }
        }

        private bool IsHiredBefore1438
        {
            get
            {
                return this.EmployeeCareerHistory != null ? this.EmployeeCareerHistory.JoinDate < StartDateOf1438InGreg : true;
            }
        }

        private DateTime MaturityDate
        {
            get
            {
                if (this.IsHiredBefore1438)
                    return this.StartDateOf1438InGreg;
                else
                    return this.EmployeeCareerHistory != null ? this.EmployeeCareerHistory.JoinDate : DateTime.Now;
            }
        }

        #region OldBalance

        int ExtraDaysForOldBalance;

        public int RemainingOldBalance
        {
            get
            {
                return this.DeservedOldBalance - this.ConsumedOldBalance;
            }
        }

        public int DeservedOldBalance { get; set; }

        public int ConsumedOldBalance { get; set; }
        #endregion

        #region CurrentBalance
        public int DeservedCurrentBalance { get; set; }
        //{
        //    get
        //    {
        //        return DeservedCurrentBalance < MaxDeservedCurrentBalance ? DeservedCurrentBalance : MaxDeservedCurrentBalance;
        //    }
        //    set
        //    {
        //        DeservedCurrentBalance = value;
        //    }
        //}

        private int MaxRemainingCurrentBalance
        {
            get
            {
                return MaxYearsCountForCurrentBalanceKeeping * 36;
            }
        }

        private int MaxYearsCountForCurrentBalanceKeeping
        {
            get
            {
                return 3;
            }
        }

        public int ConsumedCurrentBalance { get; set; }

        public int ExpiredCurrentBalance
        {
            get
            {
                //return RemainingCurrentBalance - NetRemainingCurrentBalance;
                return 0;
            }
        }

        public int RemainingCurrentBalance
        {
            get
            {
                return (this.DeservedCurrentBalance - this.ConsumedCurrentBalance - this.ExpiredCurrentBalance) < MaxRemainingCurrentBalance ? (this.DeservedCurrentBalance - this.ConsumedCurrentBalance - this.ExpiredCurrentBalance) : MaxRemainingCurrentBalance;
            }
        }

        //public int NetRemainingCurrentBalance
        //{
        //    get
        //    {
        //        return RemainingCurrentBalance < MaxRemainingCurrentBalance ? RemainingCurrentBalance : MaxRemainingCurrentBalance;
        //    }
        //}
        #endregion

        #region AdvanceBalance
        public int InAdvanceBalance { get; set; }

        public int InAdvConsumed { get; set; }
        #endregion

        private int MaturityAdvanceBalance
        {
            get
            {
                MaturityYearsBalancesBLL mBal = new MaturityYearsBalancesBLL().GetByMaturityYearID(Globals.Calendar.GetUmAlQuraYear(DateTime.Now.Date));
                if (mBal != null && mBal.MaturityYearID > 0)
                    return mBal.Balance;
                else
                    return 36; // maximum Advance Balance
            }
        }

        public int TotalAvailableVacationBalance
        {
            get
            {
                int RemainingCurrentBalanceTemp = this.RemainingCurrentBalance < 0 ? 0 : this.RemainingCurrentBalance; // if the remaining with - ... we put it as 0
                return this.RemainingOldBalance + RemainingCurrentBalanceTemp + this.InAdvanceBalance;
            }
        }

        private int VacationMaxLimit
        {
            get
            {
                DateTime JoinDate = this.EmployeeCareerHistory.JoinDate;
                DateTime? BirthDate = this.EmployeeCareerHistory.EmployeeCode.Employee.EmployeeBirthDate;

                double ServicePeriodByYearsInMIC = (DateTime.Now.Subtract(JoinDate).TotalDays / this.DaysCountInUmAlquraYear);
                double ServicePeriodByYearsInOtherGovSector = (new EmployeeExperiencesWithDetailsBLL().GetTotalExperienceDaysBasedOnSectorType(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, SectorsTypesEnum.User) / this.DaysCountInUmAlquraYear);
                double TotalServicePeriodByYears = ServicePeriodByYearsInMIC + ServicePeriodByYearsInOtherGovSector;
                int Age = BirthDate.HasValue ? Convert.ToInt16(DateTime.Now.Subtract(BirthDate.Value).TotalDays / this.DaysCountInUmAlquraYear) : 0;

                if (TotalServicePeriodByYears >= 25 || Age >= 50)
                    return 144;
                else
                    return 108;
            }
        }

        private int TotalSeparatedDaysMaxLimit
        {
            get
            {
                return 10;  //return 5; this value changed from 5 to 10 (as per user request dated: 14-July-2019
            }
        }

        private int TotalSeparatedDaysInlcudeLimit
        {
            get
            {
                return 5;
            }
        }

        public int TotalConsumedSeparatedDays { get; set; }

        private int TotalAllowDaysToTakeVacationFromCurrentStart
        {
            get
            {
                return 90;
            }
        }

        private double Factor
        {
            get
            {
                return 9.83333;
            }
        }

        public int TotalDeservedBalance
        {
            get
            {
                return this.DeservedOldBalance + this.DeservedCurrentBalance;
            }
        }

        public int TotalConsumedBalance
        {
            get
            {
                return this.ConsumedOldBalance + this.ConsumedCurrentBalance;
            }
        }

        public int TotalRemainingBalance
        {
            get
            {
                return this.RemainingOldBalance + this.RemainingCurrentBalance;
            }
        }

        public NormalVacationsTypesBLL NormalVacationType { get; set; }

        internal override Vacations DALInstance
        {
            get
            {
                Vacations Vacation = base.DALInstance;
                Vacation.OldBalanceConsumed = ExtraDaysForOldBalance == 0 ? (int?)null : ExtraDaysForOldBalance;
                Vacation.NormalVacationTypeID = this.NormalVacationType == null ? (int?)null : this.NormalVacationType.NormalVacationTypeID;
                return Vacation;

            }
        }

        public override Result Add()
        {
            try
            {
                Result result = null;
                this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID);

                //this.VacationStartDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(this.VacationStartDate), Globals.Calendar.GetUmAlQuraMonth(this.VacationStartDate), Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate))), new CultureInfo("en-US"));
                //this.VacationEndDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(this.VacationEndDate), Globals.Calendar.GetUmAlQuraMonth(this.VacationEndDate), Globals.Calendar.GetUmAlQuraYear(this.VacationEndDate))), new CultureInfo("en-US"));

                //this.VacationStartDate = this.VacationStartDate;
                //this.VacationEndDate = this.VacationEndDate;

                #region Validation for vacation start date
                if (this.VacationStartDate > DateTime.Now.AddDays(this.TotalAllowDaysToTakeVacationFromCurrentStart))
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = VacationsValidationEnum.RejectedBecauseOfInvalidDates.ToString();
                    return result;
                }
                #endregion

                #region Validation for date before StartDateOf1438InGreg
                if (this.VacationStartDate < this.StartDateOf1438InGreg && this.VacationEndDate >= this.StartDateOf1438InGreg)
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(VacationsValidationEnum);
                    result.EnumMember = VacationsValidationEnum.RejectedBecauseOfVacationNotAllowedBetween1437and1438.ToString();
                    return result;
                }
                #endregion

                if (!IsNormalVacationForSomeTypes())
                {
                    #region Validation for total of separated days max limitation consumed in umaalqura year
                    DateTime StartOfYear, EndOfYear;
                    StartOfYear = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate))), new CultureInfo("en-US"));
                    EndOfYear = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate) + 1)), new CultureInfo("en-US")).AddDays(-1);
                    if (this.NormalVacationType == null)
                    {
                        bool IsReachedToConsumedLimitOfSeparatedDays = this.IsReachedToConsumedMaxLimitOfSeparatedDays(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, StartOfYear, EndOfYear);
                        if (IsReachedToConsumedLimitOfSeparatedDays)
                        {
                            result = new Result();
                            result.Entity = null;
                            result.EnumType = typeof(VacationsValidationEnum);
                            result.EnumMember = VacationsValidationEnum.RejectedBecauseOfNormalVacationReachedToMaxLimitOfSeparatedDays.ToString();
                            return result;
                        }
                    }
                    #endregion

                    #region Validation Vacation Max Limit: if (Age>50 OR ServicePeriod>25) 144 Otherthan 108
                    result = IsVacationReachedToConsumedMaxLimit();
                    if (result != null)
                        return result;
                    #endregion

                }

                #region Validation for balanace
                result = IsBalanceValid();
                if (result != null)
                    return result;
                #endregion

                #region Set Old Balance Consumed Col
                ExtraDaysForOldBalance = 0;
                int Remaining = 0;
                PrepareOldBalanceConsumed(ref ExtraDaysForOldBalance, ref Remaining);
                #endregion

                #region base validation

                result = base.Add();
                //if (result != null)
                //    return result;
                #endregion

                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Edit()
        {
            Result result = null;
            this.EmployeeCareerHistory = this.GetByVacationID(this.VacationID).EmployeeCareerHistory; // to get EmployeeCodeID

            //this.VacationStartDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(this.VacationStartDate), Globals.Calendar.GetUmAlQuraMonth(this.VacationStartDate), Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate))), new CultureInfo("en-US"));
            //this.VacationEndDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(this.VacationEndDate), Globals.Calendar.GetUmAlQuraMonth(this.VacationEndDate), Globals.Calendar.GetUmAlQuraYear(this.VacationEndDate))), new CultureInfo("en-US"));

            //this.VacationStartDate = this.VacationStartDate;
            //this.VacationEndDate = this.VacationEndDate;

            #region Validation for vacation start date
            if (this.VacationStartDate > DateTime.Now.AddDays(this.TotalAllowDaysToTakeVacationFromCurrentStart))
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(VacationsValidationEnum);
                result.EnumMember = VacationsValidationEnum.RejectedBecauseOfInvalidDates.ToString();
                return result;
            }
            #endregion

            #region Validation for date before StartDateOf1438InGreg
            if (this.VacationStartDate < this.StartDateOf1438InGreg && this.VacationEndDate >= this.StartDateOf1438InGreg)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(VacationsValidationEnum);
                result.EnumMember = VacationsValidationEnum.RejectedBecauseOfInvalidDates.ToString();
                return result;
            }
            #endregion

            if (!IsNormalVacationForSomeTypes())
            {
                #region Validation fot total of separated days max limitation consumed in umaalqura year
                DateTime StartOfYear, EndOfYear;
                StartOfYear = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate))), new CultureInfo("en-US"));
                EndOfYear = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate) + 1)), new CultureInfo("en-US")).AddDays(-1);
                if (this.NormalVacationType == null)
                {
                    bool IsReachedToConsumedLimitOfSeparatedDays = this.IsReachedToConsumedMaxLimitOfSeparatedDays(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, StartOfYear, EndOfYear, this.VacationID);
                    if (IsReachedToConsumedLimitOfSeparatedDays)
                    {
                        result = new Result();
                        result.Entity = null;
                        result.EnumType = typeof(VacationsValidationEnum);
                        result.EnumMember = VacationsValidationEnum.RejectedBecauseOfNormalVacationReachedToMaxLimitOfSeparatedDays.ToString();
                        return result;
                    }
                }
                #endregion

                #region Validation Vacation Max Limit: if (Age>50 OR ServicePeriod>25) 144 Otherthan 108
                result = IsVacationReachedToConsumedMaxLimit(this.VacationID);
                if (result != null)
                    return result;
                #endregion

            }

            #region Validation for balanace
            result = IsBalanceValid(this.VacationID);
            if (result != null)
                return result;
            #endregion

            #region Set Old Balance Consumed Col
            ExtraDaysForOldBalance = 0;
            int Remaining = 0;
            PrepareOldBalanceConsumed(ref ExtraDaysForOldBalance, ref Remaining);
            #endregion

            #region base validation
            result = base.Edit();
            //if (result != null)
            //    return result;
            #endregion

            return result;
        }

        public override Result Extend()
        {
            try
            {
                Result result = null;
                BaseVacationsBLL BaseVacation = this.GetByVacationID(this.VacationID);

                this.EmployeeCareerHistory = BaseVacation.EmployeeCareerHistory; // to get employee code id
                this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID); // to get hiring record

                //this.VacationStartDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(this.VacationStartDate), Globals.Calendar.GetUmAlQuraMonth(this.VacationStartDate), Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate))), new CultureInfo("en-US"));
                //this.VacationEndDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(this.VacationEndDate), Globals.Calendar.GetUmAlQuraMonth(this.VacationEndDate), Globals.Calendar.GetUmAlQuraYear(this.VacationEndDate))), new CultureInfo("en-US"));

                //this.VacationStartDate = this.VacationStartDate;
                //this.VacationEndDate = this.VacationEndDate;

                if (!IsNormalVacationForSomeTypes())
                {
                    #region Validation fot total of separated days max limitation consumed in umaalqura year
                    DateTime StartOfYear, EndOfYear;
                    StartOfYear = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate))), new CultureInfo("en-US"));
                    EndOfYear = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate) + 1)), new CultureInfo("en-US")).AddDays(-1);
                    if (this.NormalVacationType == null)
                    {
                        bool IsReachedToConsumedLimitOfSeparatedDays = this.IsReachedToConsumedMaxLimitOfSeparatedDays(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, StartOfYear, EndOfYear, this.VacationID, VacationsActionsEnum.Extend);
                        if (IsReachedToConsumedLimitOfSeparatedDays)
                        {
                            result = new Result();
                            result.Entity = null;
                            result.EnumType = typeof(VacationsValidationEnum);
                            result.EnumMember = VacationsValidationEnum.RejectedBecauseOfNormalVacationReachedToMaxLimitOfSeparatedDays.ToString();
                            return result;
                        }
                    }
                    #endregion

                    #region Validation Vacation Max Limit: if (Age>50 OR ServicePeriod>25) 144 Otherthan 108
                    result = IsVacationReachedToConsumedMaxLimit();
                    if (result != null)
                        return result;
                    #endregion
                }

                #region Validation for balanace
                result = IsBalanceValid();
                if (result != null)
                    return result;
                #endregion

                #region Set Old Balance Consumed Col
                ExtraDaysForOldBalance = 0;
                int remaining = 0;
                PrepareOldBalanceConsumed(ref ExtraDaysForOldBalance, ref remaining);
                #endregion

                #region base validation
                result = base.Extend();
                #endregion

                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Cancel()
        {
            try
            {
                Result result = base.Cancel();
                return result;
            }
            catch
            {
                throw;
            }
        }

        public override Result Break()
        {
            try
            {
                Result result = null;
                this.EmployeeCareerHistory = this.GetByVacationID(this.VacationID).EmployeeCareerHistory; // to get EmployeeCodeID

                if (!IsNormalVacationForSomeTypes())
                {
                    #region Validation fot total of separated days max limitation consumed in umaalqura year
                    DateTime StartOfYear, EndOfYear;
                    StartOfYear = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate))), new CultureInfo("en-US"));
                    EndOfYear = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate) + 1)), new CultureInfo("en-US")).AddDays(-1);
                    if (this.NormalVacationType == null)
                    {
                        bool IsReachedToConsumedLimitOfSeparatedDays = this.IsReachedToConsumedMaxLimitOfSeparatedDays(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, StartOfYear, EndOfYear);
                        if (IsReachedToConsumedLimitOfSeparatedDays)
                        {
                            result = new Result();
                            result.Entity = null;
                            result.EnumType = typeof(VacationsValidationEnum);
                            result.EnumMember = VacationsValidationEnum.RejectedBecauseOfNormalVacationReachedToMaxLimitOfSeparatedDays.ToString();
                            return result;
                        }
                    }
                    #endregion
                }

                #region base validation
                result = base.Break();
                #endregion

                return result;
            }
            catch
            {
                throw;
            }
        }

        public override List<BaseVacationsBLL> GetByEmployeeCodeVacationType(int EmployeeCodeID)
        {
            return base.GetByEmployeeCodeVacationType(EmployeeCodeID);
        }

        private float GetConsumedFromCurrentBalanceByEmployeeCodeID(int EmployeeCodeID, DateTime StartDate, DateTime EndDate, int ExceptVactionID = 0)
        {
            int VacationConsumedDays = 0;
            int ConsumedDaysFromOldBalance = 0;
            int ConsumedDaysFromBalance = 0;
            List<BaseVacationsBLL> Vacations = this.GetByEmployeeCodeVacationTypeNotCanceled(EmployeeCodeID, StartDate, EndDate, ExceptVactionID);

            foreach (var item in Vacations)
            {
                NormalVacationsBLL vacation = (NormalVacationsBLL)item;
                ConsumedDaysFromOldBalance += vacation.ConsumedOldBalance;
            }
            ConsumedDaysFromBalance = Vacations.Sum(x => x.VacationPeriod);

            VacationConsumedDays = ConsumedDaysFromBalance - ConsumedDaysFromOldBalance;

            // zeeshan work
            //int VacationConsumedDays = 0;
            //DateTime Date;
            //List<BaseVacationsBLL> Vacations = this.GetByEmployeeCodeVacationType(EmployeeCodeID, this.VacationType);

            //for (DateTime i = MinDate; i <= MaxDate; )
            //{
            //    Date = i;

            //    foreach (BaseVacationsBLL item in Vacations)
            //    {
            //        NormalVacationsBLL vacation = (NormalVacationsBLL)item;
            //        VacationStartDate = vacation.VacationStartDate.Date;
            //        VacationEndDate = vacation.VacationEndDate.Date;

            //        if (Date >= VacationStartDate && Date <= VacationEndDate)
            //            VacationConsumedDays++;
            //    }

            //    i = i.AddDays(1);
            //}

            return VacationConsumedDays;// - Vacations.Sum(x=> x.;
        }

        /// <summary>
        /// This is the main function to calculate the Balances
        /// </summary>
        /// <param name="EmployeeCodeID"></param>
        /// <param name="UmAlQuraYear"></param>
        /// <param name="UmAlQuraMonth"></param>
        /// <param name="UmAlQuraDay"></param> 
        /// <returns></returns>
        public NormalVacationsBLL GetVacationBalances(int EmployeeCodeID, int UmAlQuraYear, int UmAlQuraMonth, int UmAlQuraDay, int ExceptVactionID = 0)
        {
            this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(EmployeeCodeID); //{ EmployeeCode = new EmployeesCodesBLL() { EmployeeCodeID = EmployeeCodeID } };
            //DateTime MaxDate;      // these variables used to get Consumed vacation during min and max date.

            // convert into gregorian
            //DateTime VacationStartDateGr = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", UmAlQuraDay, UmAlQuraMonth, UmAlQuraYear)), new CultureInfo("en-US"));

            //MinDate = GetMaturityDate(UmAlQuraYear);
            //MaxDate = VacationStartDateGr;

            // setting instance variables
            GetDeservedOldalance(EmployeeCodeID);
            GetConsumedOldBalance(EmployeeCodeID, ExceptVactionID);
            GetDeservedCurrentBalance(EmployeeCodeID);
            GetConsumedCurrentBalance(EmployeeCodeID, ExceptVactionID);
            GetInAdvBalance();

            // calling here just to set "TotalConsumedSeparatedDays" property to show on UI
            DateTime StartOfYear, EndOfYear;
            int UmAlQuraCurrentYear = Globals.Calendar.GetUmAlQuraYear(DateTime.Now);
            StartOfYear = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, UmAlQuraCurrentYear)), new CultureInfo("en-US"));
            EndOfYear = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, UmAlQuraCurrentYear + 1)), new CultureInfo("en-US")).AddDays(-1);
            bool IsReachedToConsumedLimitOfSeparatedDays = this.IsReachedToConsumedMaxLimitOfSeparatedDays(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, StartOfYear, EndOfYear);

            return this;
        }

        private int GetDeservedOldalance(int EmployeeCodeID)
        {
            return this.DeservedOldBalance = this.GetDeservedOldBalanceDetails(EmployeeCodeID).Sum(x => x.DeservedBalance);
        }

        public List<NormalDeservedOldBalanceDetails> GetDeservedOldBalanceDetails(int EmployeeCodeID)
        {
            int YearsCount = 0;
            int RemainingDaysCount = 0; // to calculate remaining days  
            int Year = 1437;
            int DeservedBalance = 0;
            int UnDeservedBalance = 0; // to deduct exceptional vacation days + scholarships + Work Stops days
            double OldFactor;
            int MaturityYearBalance = 0;
            DateTime StartDate;
            DateTime EndDate;
            List<NormalDeservedOldBalanceDetails> NormalDeservedOldBalanceDetailsList = new List<NormalDeservedOldBalanceDetails>();
            List<MaturityYearsBalances> MaturityYearsBalancesList = new MaturityYearsBalancesDAL().GetMaturityYearsBalances();
            if (this.IsHiredBefore1438)
            {
                // to get how many years employee has in the work
                if (this.EmployeeCareerHistory == null)
                    this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(EmployeeCodeID);

                int TotalDays = Convert.ToInt16(this.StartDateOf1438InGreg.Subtract(this.EmployeeCareerHistory.JoinDate).TotalDays);
                YearsCount = TotalDays / this.DaysCountInUmAlquraYear;
                RemainingDaysCount = TotalDays % this.DaysCountInUmAlquraYear;

                // get all by EmployeeCodeID to optimize GetCountUnDeservedDays func
                List<Scholarships> ScholarshipsList = new ScholarshipsDAL().GetScholarshipsByEmployeeCodeID(EmployeeCodeID);
                List<StopWorks> StopWorkList = new StopWorksDAL().GetStopWorksByEmployeeCodeID(EmployeeCodeID);
                List<Lenders> LendersList = new LendersDAL().GetLendersByEmployeeCodeID(EmployeeCodeID);
                List<Vacations> VacationsList = new VacationsDAL().GetEmployeeVacationsByVacationTypeNotCancelled(EmployeeCodeID, (int)VacationsTypesEnum.Exceptional).ToList();
                List<Vacations> StudyVacationsList = new VacationsDAL().GetEmployeeVacationsByVacationTypeNotCancelled(EmployeeCodeID, (int)VacationsTypesEnum.Studies).ToList();
                List<Teachers> TeachersList = new TeachersDAL().GetTeachersByEmployeeCodeID(EmployeeCodeID);

                for (int i = 0; i < YearsCount; i++)
                {
                    StartDate = this.GetMaturityDate(Year);
                    EndDate = this.GetMaturityEndDate(Year, 1, 1);
                    MaturityYearBalance = MaturityYearsBalancesList.FirstOrDefault(x => x.MaturityYear == Year).Balance;
                    OldFactor = Convert.ToDouble(this.DaysCountInUmAlquraYear) / Convert.ToDouble(MaturityYearBalance);

                    UnDeservedBalance = Convert.ToInt16(this.GetCountUnDeservedDays(VacationsList, ScholarshipsList, LendersList, StopWorkList, StudyVacationsList, TeachersList, EmployeeCodeID, StartDate, EndDate) / OldFactor); // get undeserved days to deduct it from deserved balance
                    UnDeservedBalance = UnDeservedBalance > MaturityYearBalance ? MaturityYearBalance : UnDeservedBalance;

                    DeservedBalance = MaturityYearBalance - UnDeservedBalance;
                    NormalDeservedOldBalanceDetailsList.Add(new NormalDeservedOldBalanceDetails()
                    {
                        ServiceYear = Year,
                        MaturityYearBalance = MaturityYearBalance,
                        UnDeservedBalance = UnDeservedBalance,
                        DeservedBalance = DeservedBalance,
                    });

                    Year--;
                }


                if (RemainingDaysCount > 0)
                {
                    StartDate = this.GetMaturityDate(Year);
                    EndDate = this.GetMaturityEndDate(Year, 1, 1);
                    MaturityYearBalance = MaturityYearsBalancesList.FirstOrDefault(x => x.MaturityYear == Year).Balance;
                    OldFactor = Convert.ToDouble(this.DaysCountInUmAlquraYear) / Convert.ToDouble(MaturityYearBalance);
                    int UnDeservedDaysloc = Convert.ToInt16(this.GetCountUnDeservedDays(VacationsList, ScholarshipsList, LendersList, StopWorkList, StudyVacationsList, TeachersList, EmployeeCodeID, StartDate, EndDate) / OldFactor);

                    NormalDeservedOldBalanceDetailsList.Add(new NormalDeservedOldBalanceDetails()
                    {
                        ServiceYear = Year,
                        MaturityYearBalance = MaturityYearBalance,
                        UnDeservedBalance = UnDeservedDaysloc,
                        DeservedBalance = Convert.ToInt16(Math.Floor((RemainingDaysCount - UnDeservedDaysloc) / OldFactor))
                    });
                }
            }

            return NormalDeservedOldBalanceDetailsList;
        }

        private int GetConsumedOldBalance(int EmployeeCodeID, int ExceptVactionID = 0)
        {
            int VacationConsumedBeforeEndOf1437 = 0;
            int VacationConsumedAfterEndOf1437FromOldBalance = 0;

            // to get how many days employee consumed it from hire date to end of 1437
            VacationConsumedBeforeEndOf1437 = int.Parse(this.GetConsumedFromCurrentBalanceByEmployeeCodeID(EmployeeCodeID, this.EmployeeCareerHistory.JoinDate, this.StartDateOf1438InGreg.AddDays(-1)).ToString());
            // to get how many days employee consumed it from old balance between end of 1437 and current date
            VacationConsumedAfterEndOf1437FromOldBalance = new VacationsDAL().GetEmployeeVacations(EmployeeCodeID).Sum(e => e.OldBalanceConsumed.HasValue ? e.OldBalanceConsumed.Value : 0);

            return this.ConsumedOldBalance = VacationConsumedBeforeEndOf1437 + VacationConsumedAfterEndOf1437FromOldBalance;
        }

        public List<NormalConsumedOldBalanceDetails> GetConsumedOldBalanceDetails(int EmployeeCodeID, int ExceptVactionID = 0)
        {
            try
            {
                if (this.EmployeeCareerHistory == null)
                    this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(EmployeeCodeID);

                List<BaseVacationsBLL> OldNormalVacationsBLLList = new List<BaseVacationsBLL>();
                List<BaseVacationsBLL> NormalVacationsBLLList = new List<BaseVacationsBLL>();
                List<NormalConsumedOldBalanceDetails> OldNormalConsumedOldBalanceDetailsList = new List<NormalConsumedOldBalanceDetails>();

                OldNormalVacationsBLLList = this.GetByEmployeeCodeVacationTypeNotCanceled(EmployeeCodeID, this.EmployeeCareerHistory.JoinDate, this.StartDateOf1438InGreg.AddDays(-1), ExceptVactionID);
                NormalVacationsBLLList = this.GetByEmployeeCodeVacationTypeNotCanceled(EmployeeCodeID, this.StartDateOf1438InGreg, DateTime.Now.AddYears(15), ExceptVactionID);

                foreach (var item in OldNormalVacationsBLLList)
                    OldNormalConsumedOldBalanceDetailsList.Add(new NormalConsumedOldBalanceDetails()
                    {
                        VacationPeriod = item.VacationPeriod,
                        VacationStartDate = item.VacationStartDate
                    });


                foreach (var item in NormalVacationsBLLList)
                {
                    NormalVacationsBLL NormalVacation = (NormalVacationsBLL)item;
                    if (NormalVacation.ConsumedOldBalance > 0)
                        OldNormalConsumedOldBalanceDetailsList.Add(new NormalConsumedOldBalanceDetails()
                        {
                            VacationPeriod = NormalVacation.ConsumedOldBalance,
                            VacationStartDate = NormalVacation.VacationStartDate
                        });
                }

                return OldNormalConsumedOldBalanceDetailsList.OrderBy(X => X.VacationStartDate).ToList();
            }
            catch
            {
                throw;
            }
        }

        private int GetDeservedCurrentBalance(int EmployeeCodeID)
        {

            if (this.EmployeeCareerHistory == null)
                this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(EmployeeCodeID);

            return this.DeservedCurrentBalance = this.GetDeservedCurrentBalanceDetails(EmployeeCodeID).Sum(x => x.DeservedBalance);
        }

        public List<NormalDeservedCurrentBalanceDetails> GetDeservedCurrentBalanceDetails(int EmployeeCodeID)
        {
            int YearsCount;
            int MaturityYearBalance = 0;
            int UnDeservedBalance = 0;
            int TotalDays;
            List<NormalDeservedCurrentBalanceDetails> NormalDeservedCurrentBalanceDetailsList = new List<NormalDeservedCurrentBalanceDetails>();
            List<MaturityYearsBalances> MaturityYearsBalancesList = new MaturityYearsBalancesDAL().GetMaturityYearsBalances();
            DateTime FromDate, ToDate;
            DateTime MaxDate;

            // convert into gregorian
            //DateTime VacationStartDateGr = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", UmAlQuraDay, UmAlQuraMonth, UmAlQuraYear)), new CultureInfo("en-US"));
            // if the vacation is before now ... we have to show the credit from current date
            // MaxDate = VacationStartDateGr > DateTime.Now.Date ? VacationStartDateGr : DateTime.Now.Date;
            MaxDate = DateTime.Now;

            // to get how many years employee has in the work
            if (this.EmployeeCareerHistory == null)
                this.EmployeeCareerHistory = new EmployeesCareersHistoryBLL().GetHiringRecordByEmployeeCodeID(EmployeeCodeID);

            FromDate = this.MaturityDate;
            ToDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(FromDate), Globals.Calendar.GetUmAlQuraMonth(FromDate), Globals.Calendar.GetUmAlQuraYear(FromDate) + 1)), new CultureInfo("en-US"));

            TotalDays = Convert.ToInt16(Decimal.Truncate(Convert.ToDecimal(MaxDate.Subtract(this.MaturityDate).Days / Factor))); //this.GetDeservedCurrentBalance(EmployeeCodeID, MaxDate);

            MaturityYearBalance = MaturityYearsBalancesList.FirstOrDefault(x => x.MaturityYear == Globals.Calendar.GetUmAlQuraYear(FromDate)).Balance;
            YearsCount = TotalDays / MaturityYearBalance;

            // get all by EmployeeCodeID to optimize GetCountUnDeservedDays func
            List<Scholarships> ScholarshipsList = new ScholarshipsDAL().GetScholarshipsByEmployeeCodeID(EmployeeCodeID);
            List<StopWorks> StopWorkList = new StopWorksDAL().GetStopWorksByEmployeeCodeID(EmployeeCodeID);
            List<Lenders> LendersList = new LendersDAL().GetLendersByEmployeeCodeID(EmployeeCodeID);
            List<Vacations> VacationsList = new VacationsDAL().GetEmployeeVacationsByVacationTypeNotCancelled(EmployeeCodeID, (int)VacationsTypesEnum.Exceptional).ToList();
            List<Vacations> StudyVacationsList = new VacationsDAL().GetEmployeeVacationsByVacationTypeNotCancelled(EmployeeCodeID, (int)VacationsTypesEnum.Studies).ToList();
            List<Teachers> TeachersList = new TeachersDAL().GetTeachersByEmployeeCodeID(EmployeeCodeID);

            if (YearsCount > 0)
            {
                for (int i = 0; i < YearsCount; i++)
                {
                    UnDeservedBalance = Convert.ToInt16(this.GetCountUnDeservedDays(VacationsList, ScholarshipsList, LendersList, StopWorkList, StudyVacationsList, TeachersList, EmployeeCodeID, FromDate, ToDate) / Factor); // get undeserved days to deduct it from deserved balance
                    UnDeservedBalance = UnDeservedBalance > MaturityYearBalance ? MaturityYearBalance : UnDeservedBalance;

                    NormalDeservedCurrentBalanceDetailsList.Add(new NormalDeservedCurrentBalanceDetails()
                    {
                        FromDate = FromDate,
                        ToDate = ToDate,
                        MaturityYearBalance = MaturityYearBalance,
                        UnDeservedBalance = UnDeservedBalance,
                        DeservedBalance = MaturityYearBalance - UnDeservedBalance
                    });
                    FromDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(FromDate), Globals.Calendar.GetUmAlQuraMonth(FromDate), Globals.Calendar.GetUmAlQuraYear(FromDate) + 1)), new CultureInfo("en-US"));
                    ToDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(FromDate), Globals.Calendar.GetUmAlQuraMonth(FromDate), Globals.Calendar.GetUmAlQuraYear(FromDate) + 1)), new CultureInfo("en-US"));

                    MaturityYearBalance = MaturityYearsBalancesList.FirstOrDefault(x => x.MaturityYear == Globals.Calendar.GetUmAlQuraYear(FromDate)).Balance;
                    TotalDays = TotalDays - MaturityYearBalance;

                    if (MaturityYearBalance > TotalDays)
                    {
                        ToDate = MaxDate;
                        UnDeservedBalance = Convert.ToInt16(this.GetCountUnDeservedDays(VacationsList, ScholarshipsList, LendersList, StopWorkList, StudyVacationsList, TeachersList, EmployeeCodeID, FromDate, ToDate) / Factor); // get undeserved days to deduct it from deserved balance
                        NormalDeservedCurrentBalanceDetailsList.Add(new NormalDeservedCurrentBalanceDetails()
                        {
                            FromDate = FromDate,
                            ToDate = ToDate,
                            MaturityYearBalance = MaturityYearBalance,
                            UnDeservedBalance = UnDeservedBalance,
                            DeservedBalance = TotalDays - UnDeservedBalance
                        });
                    }
                }
            }
            else // this is if the employee did not complete 1 year in mic
            {
                UnDeservedBalance = Convert.ToInt16(this.GetCountUnDeservedDays(VacationsList, ScholarshipsList, LendersList, StopWorkList, StudyVacationsList, TeachersList, EmployeeCodeID, FromDate, ToDate) / Factor); // get undeserved days to deduct it from deserved balance
                UnDeservedBalance = UnDeservedBalance > MaturityYearBalance ? MaturityYearBalance : UnDeservedBalance;
                MaturityYearBalance = MaturityYearsBalancesList.FirstOrDefault(x => x.MaturityYear == Globals.Calendar.GetUmAlQuraYear(FromDate)).Balance;
                ToDate = MaxDate;
                NormalDeservedCurrentBalanceDetailsList.Add(new NormalDeservedCurrentBalanceDetails()
                {
                    FromDate = FromDate,
                    ToDate = ToDate,
                    MaturityYearBalance = MaturityYearBalance,
                    UnDeservedBalance = UnDeservedBalance,
                    DeservedBalance = TotalDays - UnDeservedBalance
                });
            }

            return NormalDeservedCurrentBalanceDetailsList;
        }

        private int GetConsumedCurrentBalance(int EmployeeCodeID, int ExceptVactionID = 0)
        {
            return this.ConsumedCurrentBalance = this.GetConsumedCurrentBalanceDetails(EmployeeCodeID, ExceptVactionID).Sum(x => x.VacationPeriod);
        }

        public List<NormalConsumedCurrentBalanceDetails> GetConsumedCurrentBalanceDetails(int EmployeeCodeID, int ExceptVactionID = 0)
        {
            // convert into gregorian
            // DateTime VacationStartDateGr = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", UmAlQuraDay, UmAlQuraMonth, UmAlQuraYear)), new CultureInfo("en-US"));
            // if the vacation is before now ... we have to show the credit from current date
            // MaxDate = VacationStartDateGr > DateTime.Now.Date ? VacationStartDateGr : DateTime.Now.Date;

            DateTime MaxDate = DateTime.Now.AddYears(10);

            // calculate Consumed vacation balance for employee between now and Maturity Year + Consumed Vacation from old balance
            List<NormalConsumedCurrentBalanceDetails> NormalConsumedCurrentBalanceDetailsList = new List<NormalConsumedCurrentBalanceDetails>();
            List<BaseVacationsBLL> Vacations = this.GetByEmployeeCodeVacationTypeNotCanceled(EmployeeCodeID, this.MaturityDate, MaxDate, ExceptVactionID);

            foreach (var item in Vacations)
            {
                NormalVacationsBLL vacation = (NormalVacationsBLL)item;
                NormalConsumedCurrentBalanceDetailsList.Add(new NormalConsumedCurrentBalanceDetails()
                {
                    VacationPeriod = vacation.VacationPeriod - vacation.ConsumedOldBalance,
                    VacationStartDate = vacation.VacationStartDate
                });
            }
            return NormalConsumedCurrentBalanceDetailsList.OrderBy(x => x.VacationStartDate).ToList();
        }

        /// <summary>
        /// 1- Dated: Initial Release
        /// this method to return how many days should be deducted from employee deserved days
        /// * Scholarships , * Exceptional Vacation , * Stop Work, * StudyVacations
        /// 2- Dated: 05-01-2020
        /// Rule :
        /// Exceptional vacations of Contractual-Saudis and Expats is excluded from the underserved days count.
        /// and for other employees no change
        /// </summary>
        /// <param name="EmployeeCodeID"></param>
        /// <param name="StartDate"></param>
        /// <param name="EndDate"></param>
        /// <returns></returns>
        public int GetCountUnDeservedDays(List<Vacations> VacationsList, List<Scholarships> ScholarshipsList, List<Lenders> LendersList, List<StopWorks> StopWorkList, List<Vacations> StudyVacationsList, List<Teachers> TeachersList,
                                            int EmployeeCodeID, DateTime StartDate, DateTime EndDate)
        {
            //Exceptional vacations of Contractual-Saudis and Expats is excluded from the underserved days count.
            if (this.EmployeeCareerHistory.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.ContractualSaudis ||
                    this.EmployeeCareerHistory.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.ContractualExpats ||
                    this.EmployeeCareerHistory.OrganizationJob.Rank.RankCategory.RankCategoryID == (int)RanksCategoriesEnum.SaudiLabor)
            {
                VacationsList = new List<Vacations>();
            }

            return (
                        new BaseScholarshipsBLL().GetCountScholarshipsPeriodByEmployeeCodeID(ScholarshipsList, EmployeeCodeID, StartDate, EndDate) +
                        new ExceptionalVacationsBLL().GetCountVacationPeriodByEmployeeCodeVacationType(VacationsList, EmployeeCodeID, StartDate, EndDate) +
                        new StudiesVacationsBLL().GetCountVacationPeriodByEmployeeCodeVacationType(StudyVacationsList, EmployeeCodeID, StartDate, EndDate) +
                        new LendersBLL().GetCountLenderPeriodByEmployeeCodeID(LendersList, EmployeeCodeID, StartDate, EndDate) +
                        new StopWorksBLL().GetCountStopWorkPeriodByEmployeeCodeID(StopWorkList, EmployeeCodeID, StartDate, EndDate) +
                        new TeachersBLL().GetCountEmployeeWorkAsTeacherPeriodByEmployeeCodeID(TeachersList, StartDate, EndDate)
                    );
        }

        /// <summary>
        /// Advance balance function is calculate on the basis of current date.
        /// there 3 args "int UmAlQuraYear, int UmAlQuraMonth, int UmAlQuraDay" is not in use and later we'll remove
        /// </summary>
        /// <param name="EmployeeCodeID"></param>
        /// <param name="UmAlQuraYear"></param>
        /// <param name="UmAlQuraMonth"></param>
        /// <param name="UmAlQuraDay"></param>
        /// <returns></returns>
        private int GetInAdvBalance()
        {
            //DateTime VacationStartDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", UmAlQuraDay, UmAlQuraMonth, UmAlQuraYear)), new CultureInfo("en-US"));
            DateTime CurrentDate = DateTime.Now.Date;
            int MaturityYearFromCurrentDate = Globals.Calendar.GetUmAlQuraYear(CurrentDate);
            int MaturityMonthFromCurrentDate = Globals.Calendar.GetUmAlQuraMonth(CurrentDate);
            int MaturityDayFromCurrentDate = Globals.Calendar.GetUmAlQuraDay(CurrentDate);

            DateTime MaturityEndDate = Convert.ToDateTime(this.GetMaturityEndDate(MaturityYearFromCurrentDate, MaturityMonthFromCurrentDate, MaturityDayFromCurrentDate), new CultureInfo("en-US"));

            //return this.InAdvanceBalance = this.RemainingCurrentBalance >= 0 ? Convert.ToInt16(this.DaysInYear / Factor) : Convert.ToInt16(this.DaysInYear / Factor) + this.RemainingCurrentBalance;
            int AdvanceBalance = Convert.ToInt32(Math.Ceiling(MaturityEndDate.Subtract(CurrentDate).Days / Factor));  // apply Ceiling function to adjust difference in deserved and adv becuase of factor            
            AdvanceBalance = AdvanceBalance < 0 ? 0 : AdvanceBalance;
            AdvanceBalance = this.RemainingCurrentBalance >= 0 ? AdvanceBalance : AdvanceBalance + this.RemainingCurrentBalance;
            AdvanceBalance = AdvanceBalance < 0 ? 0 : AdvanceBalance;

            if (AdvanceBalance > MaturityAdvanceBalance)        // this is workaround to fix advance balance is greater than Maturity Balance
                AdvanceBalance = MaturityAdvanceBalance;

            this.InAdvanceBalance = AdvanceBalance;
            return AdvanceBalance;
        }

        public List<NormalVacationsBreakupDetails> GetBreakupDetails(int EmployeeCodeID, int UmAlQuraYear, int UmAlQuraMonth, int UmAlQuraDay)
        {
            try
            {
                DateTime MaxDate;
                // convert into gregorian
                DateTime VacationStartDateGr = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", UmAlQuraDay, UmAlQuraMonth, UmAlQuraYear)), new CultureInfo("en-US"));
                // if the vacation is before now ... we have to show the credit from current date
                MaxDate = VacationStartDateGr > DateTime.Now.Date ? VacationStartDateGr : DateTime.Now.Date;

                DateTime TempDate;
                if (Globals.Calendar.GetUmAlQuraDay(MaxDate) > Globals.Calendar.GetUmAlQuraDay(this.MaturityDate))
                {
                    TempDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(MaxDate.AddDays(-Factor)), Globals.Calendar.GetUmAlQuraMonth(MaxDate.AddDays(-Factor)), Globals.Calendar.GetUmAlQuraYear(MaxDate.AddDays(-Factor)))), new CultureInfo("en-US"));
                }
                else
                {
                    TempDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(MaxDate.AddDays(-Factor)), Globals.Calendar.GetUmAlQuraMonth(MaxDate.AddDays(-Factor)), Globals.Calendar.GetUmAlQuraYear(MaxDate.AddDays(-Factor)))), new CultureInfo("en-US"));
                }

                List<NormalVacationsBreakupDetails> NormalVacationsBreakupDetailsList = new List<NormalVacationsBreakupDetails>();
                this.GetDeservedCurrentBalance(EmployeeCodeID);
                this.GetConsumedCurrentBalance(EmployeeCodeID);
                DateTime BreakupDate = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", Globals.Calendar.GetUmAlQuraDay(TempDate), Globals.Calendar.GetUmAlQuraMonth(TempDate), Globals.Calendar.GetUmAlQuraYear(TempDate) + 3)), new CultureInfo("en-US"));

                for (int i = 0; i < this.RemainingCurrentBalance; i++)
                {
                    NormalVacationsBreakupDetailsList.Add(new NormalVacationsBreakupDetails()
                    {
                        ExpiryDate = BreakupDate,
                        Days = 1
                    });
                    BreakupDate = BreakupDate.AddDays(-Factor);
                }
                return NormalVacationsBreakupDetailsList;
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// We need swaping if hiring month is greater than vacation month
        /// </summary>
        /// <param name="tempDate1"></param>
        /// <param name="tempDate2"></param>
        private void SwapIfNeeded(ref DateTime tempDate1, ref DateTime tempDate2)
        {
            if (tempDate1 > tempDate2)
            {
                DateTime tempDate = tempDate1;
                tempDate1 = tempDate2;
                tempDate2 = tempDate;
            }
        }

        /// <summary>
        /// This method used to create date for Range
        /// </summary>
        /// <param name="UmAlQuraYear"></param>
        /// <returns></returns>
        private DateTime GetMaturityDate(int UmAlQuraYear)
        {
            DateTime JoinDate = this.EmployeeCareerHistory.JoinDate;
            //string JoinDateUmAlQura = Globals.Calendar.GregToUmAlQura(this.EmployeeCareerHistory.JoinDate);     //This format returned from func : "yyyy/MM/dd"
            string JoinDateUmAlQura = this.EmployeeCareerHistory.JoinDate.ToString("yyyy-MM-dd"); //This format returned from func : "yyyy/MM/dd"
            int JoiningMonthUmAlQura = Convert.ToInt32(JoinDateUmAlQura.Substring(5, 2));
            int JoiningDayUmAlQura = Convert.ToInt32(JoinDateUmAlQura.Substring(8, 2));

            if (this.IsHiredBefore1438)
                return Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, UmAlQuraYear)), new CultureInfo("en-US"));
            else
                return Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", JoiningDayUmAlQura, JoiningMonthUmAlQura, UmAlQuraYear)), new CultureInfo("en-US"));
        }

        private DateTime GetMaturityEndDate(int UmAlQuraYear, int UmAlQuraMonth, int UmAlQuraDay)
        {
            string JoinUmAlQuraDate = this.EmployeeCareerHistory.JoinDate.ToString("yyyy-MM-dd"); //This format returned from func : "yyyy/MM/dd"
            int JoiningUmAlQuraMonth = Convert.ToInt32(JoinUmAlQuraDate.Substring(5, 2));
            int JoiningUmAlQuraDay = Convert.ToInt32(JoinUmAlQuraDate.Substring(8, 2));

            DateTime MaturityEndDate;
            if (JoiningUmAlQuraMonth > UmAlQuraMonth)
            {
                if (this.IsHiredBefore1438)
                    MaturityEndDate = Convert.ToDateTime(string.Format("{0}/{1}/{2}", 1, 1, UmAlQuraYear + 1));  // to get last day of the year 
                else
                    MaturityEndDate = Convert.ToDateTime(string.Format("{0}/{1}/{2}", JoiningUmAlQuraDay, JoiningUmAlQuraMonth, UmAlQuraYear));  // to get last day of the year 
                                                                                                                                                 //MaturityEndDate = Convert.ToDateTime(string.Format("{0}/{1}/{2}", JoiningDayUmAlQura, JoiningMonthUmAlQura, UmAlQuraYear + 1));  // issue reported e.g. Emp 90066719 
            }
            else if (JoiningUmAlQuraMonth == UmAlQuraMonth) // issue reported e.g. Emp 60055755 
            {
                if (this.IsHiredBefore1438)
                    MaturityEndDate = Convert.ToDateTime(string.Format("{0}/{1}/{2}", 1, 1, UmAlQuraYear + 1));  // to get last day of the year 
                else
                {
                    if (JoiningUmAlQuraDay <= UmAlQuraDay)
                        UmAlQuraYear += 1;

                    MaturityEndDate = Convert.ToDateTime(string.Format("{0}/{1}/{2}", JoiningUmAlQuraDay, JoiningUmAlQuraMonth, UmAlQuraYear));  // to get last day of the year 
                }
            }
            else
            {
                if (this.IsHiredBefore1438)
                    MaturityEndDate = Convert.ToDateTime(string.Format("{0}/{1}/{2}", 1, 1, UmAlQuraYear + 1)); // to get last day of the year 
                else
                    MaturityEndDate = Convert.ToDateTime(string.Format("{0}/{1}/{2}", JoiningUmAlQuraDay, JoiningUmAlQuraMonth, UmAlQuraYear + 1));  // to get last day of the year 
            }

            return MaturityEndDate.AddDays(-1);

            // zeeshan works
            //DateTime JoinDate = this.EmployeeCareerHistory.JoinDate;
            //string JoinDateUmAlQura = Globals.Calendar.GregToUmAlQura(this.EmployeeCareerHistory.JoinDate);     //This format returned from func : "yyyy/MM/dd"
            //int JoiningDayUmAlQura = Convert.ToInt32(JoinDateUmAlQura.Substring(8, 2));
            //int JoiningMonthUmAlQura = Convert.ToInt32(JoinDateUmAlQura.Substring(5, 2));

            //if (this.IsHiredBefore1438)
            //    return Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", 1, 1, UmAlQuraYear + 1)), new CultureInfo("en-US")).AddDays(-1);  // to get last day of the year
            //else
            //{
            //    // convert into gregorian
            //    DateTime VacationStartDateGr = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", UmAlQuraDay, UmAlQuraMonth, UmAlQuraYear)), new CultureInfo("en-US"));
            //    DateTime dt;
            //    if (VacationStartDateGr.Month > JoinDate.Month)
            //        dt = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", JoiningDayUmAlQura, JoiningMonthUmAlQura, UmAlQuraYear + 1)), new CultureInfo("en-US"));
            //    else
            //        dt = Convert.ToDateTime(Globals.Calendar.UmAlquraToGreg(string.Format("{0}/{1}/{2}", JoiningDayUmAlQura, JoiningMonthUmAlQura, UmAlQuraYear)), new CultureInfo("en-US"));

            //    return dt;
            //}
        }

        /// <summary>
        ///  periority for deduction vacation period from employee balance is : 
        /// 1 - current balance
        /// 2 - Advance balance
        /// 3 - old balance
        /// </summary>
        /// <param name="ExtraDaysForOldBalance"></param>
        /// <param name="Remaining"></param>
        private void PrepareOldBalanceConsumed(ref int ExtraDaysForOldBalance, ref int Remaining)
        {
            if (this.RemainingCurrentBalance > 0)
            {
                Remaining = this.VacationPeriod - this.RemainingCurrentBalance;
                if (Remaining > 0)
                {
                    if (this.InAdvanceBalance > 0)
                        Remaining = Remaining - this.InAdvanceBalance;

                    if (Remaining > 0)
                        ExtraDaysForOldBalance = Remaining;
                }
            }
            else
            {
                if (this.InAdvanceBalance > 0)
                    Remaining = this.VacationPeriod - this.InAdvanceBalance;
                else
                    ExtraDaysForOldBalance = this.VacationPeriod;

                if (Remaining > 0)
                    ExtraDaysForOldBalance = Remaining;
            }

            if (this.VacationStartDate < this.StartDateOf1438InGreg && this.VacationEndDate <= this.StartDateOf1438InGreg)
                ExtraDaysForOldBalance = 0;
        }

        /// <summary>
        /// this is to check if the balance is valid for the vacation period or not
        /// </summary>
        /// <returns></returns>
        internal override Result IsBalanceValid(int ExceptVactionID = 0)
        {
            bool IsValid = false;
            Result result = null;
            this.GetVacationBalances(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID,
                Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate),
                Globals.Calendar.GetUmAlQuraMonth(this.VacationStartDate),
                Globals.Calendar.GetUmAlQuraDay(this.VacationStartDate),
                ExceptVactionID);

            IsValid = this.VacationPeriod > this.TotalAvailableVacationBalance ? false : true;
            if (!IsValid)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(VacationsValidationEnum);
                result.EnumMember = VacationsValidationEnum.RejectedBecauseOfNoBalance.ToString();
            }
            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        internal Result IsVacationReachedToConsumedMaxLimit(int ExceptVactionID = 0)
        {
            Result result = null;
            DateTime MinDate;
            DateTime MaxDate;

            /* old buisness
               // MinDate = GetMaturityDate(Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate));
               // MaxDate = GetMaturityEndDate(Globals.Calendar.GetUmAlQuraYear(this.VacationStartDate), Globals.Calendar.GetUmAlQuraMonth(this.VacationStartDate), Globals.Calendar.GetUmAlQuraDay(this.VacationStartDate));
            */

            MinDate = this.VacationStartDate.AddDays(-this.DaysCountInUmAlquraYear);
            MaxDate = this.VacationStartDate;

            int ConsumedVacationDuringYear = GetConsumedVacationDuringYearByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, MinDate, MaxDate, ExceptVactionID);
            if (ConsumedVacationDuringYear + this.VacationPeriod > this.VacationMaxLimit)
            {
                result = new Result();
                result.Entity = null;
                result.EnumType = typeof(VacationsValidationEnum);
                result.EnumMember = VacationsValidationEnum.RejectedBecauseOfConsumedMaxLimit.ToString();
            }
            return result;
        }

        private int GetConsumedVacationDuringYearByEmployeeCodeID(int EmployeeCodeID, DateTime MinDate, DateTime MaxDate, int ExceptVactionID = 0)
        {
            int VacationConsumedDays = 0;
            DateTime Date;
            List<BaseVacationsBLL> Vacations = this.GetByEmployeeCodeVacationTypeNotCanceled(EmployeeCodeID, ExceptVactionID);
            DateTime StartDate, EndDate;

            for (DateTime i = MinDate; i <= MaxDate;)
            {
                Date = i;

                foreach (BaseVacationsBLL item in Vacations)
                {
                    NormalVacationsBLL vacation = (NormalVacationsBLL)item;
                    StartDate = vacation.VacationStartDate.Date;
                    EndDate = vacation.VacationEndDate.Date;

                    if (Date >= StartDate && Date <= EndDate)
                        VacationConsumedDays++;
                }

                i = i.AddDays(1);
            }

            return VacationConsumedDays;
        }

        /// <summary>
        /// this is to check if the employee has Reached To Consumed Max Limit days or not for exceptiona vacation and Accompaniment vacation
        /// </summary>
        /// <returns></returns>
        internal bool IsReachedToConsumedMaxLimitForOtherVacationTypes()
        {
            DateTime MinDate;
            DateTime MaxDate;

            MinDate = this.VacationStartDate.AddDays(-this.DaysCountInUmAlquraYear);
            MaxDate = this.VacationStartDate;

            int ConsumedVacationDuringYear = GetConsumedVacationDuringYearByEmployeeCodeID(this.EmployeeCareerHistory.EmployeeCode.EmployeeCodeID, MinDate, MaxDate);

            return (ConsumedVacationDuringYear >= this.VacationMaxLimit);
        }

        /// <summary>
        /// this is to check if the employee has Is Reached To Consumed Max Limit Of Separated Days (5 days)
        /// </summary>
        /// <returns></returns>
        private bool IsReachedToConsumedMaxLimitOfSeparatedDays(int EmployeeCodeID, DateTime StartDate, DateTime EndDate, int ExceptVactionID = 0, VacationsActionsEnum VacationAction = VacationsActionsEnum.Add) // ExceptVactionID to exclude vacation in edit mode
        {
            //if (this.TotalSeparatedDaysMaxLimit < TotalSeparatedDays + this.VacationPeriod)
            //    return true;
            int NewPeriod = this.VacationPeriod;
            if (VacationAction == VacationsActionsEnum.Extend)
            {
                BaseVacationsBLL bb = new BaseVacationsBLL().GetByVacationID(ExceptVactionID);
                NewPeriod += bb.VacationPeriod;
            }

            if (NewPeriod < this.TotalSeparatedDaysInlcudeLimit) // no need to validate if  requested vacation period more than Total Separated Days Max Limit(5)
            {
                List<Vacations> Vacations = new VacationsDAL().GetValidByEmployeeCodeIDVacationTypeID(EmployeeCodeID, (int)VacationsTypesEnum.Normal, StartDate, EndDate);
                List<BaseVacationsBLL> VacationBLLList = new List<BaseVacationsBLL>();

                //foreach (Vacations vacation in Vacations.Where(x => x.NormalVacationTypeID != (int)NormalVacationsTypesEnum.NormalVacationForPatients && (ExceptVactionID != 0 ? x.VacationID != ExceptVactionID : x.VacationID == x.VacationID)))
                foreach (Vacations vacation in Vacations.Where(x => x.NormalVacationTypeID.HasValue == false && (ExceptVactionID != 0 ? x.VacationID != ExceptVactionID : x.VacationID == x.VacationID)))
                {
                    VacationBLLList.Add(new BaseVacationsBLL()
                    {
                        VacationStartDate = vacation.VacationStartDate,
                        VacationEndDate = vacation.VacationEndDate
                    });
                }

                this.TotalConsumedSeparatedDays = VacationBLLList.Where(v => v.VacationPeriod < this.TotalSeparatedDaysInlcudeLimit).Sum(v => v.VacationPeriod);

                if (this.TotalSeparatedDaysMaxLimit < this.TotalConsumedSeparatedDays + NewPeriod)
                    return true;
            }

            return false;
        }

        public bool GenerateBalancesForAllUsers()
        {
            int index = 0;
            string msg = "";
            //List<EmployeesNormalVacationsBalances> BalanceList = new List<EmployeesNormalVacationsBalances>();
            EmployeesNormalVacationsBalances Balance = new EmployeesNormalVacationsBalances();
            //List<EmployeesCareersHistory> EmployeesCareersList;
            NormalVacationsBLL NormalVacationBLL = new NormalVacationsBLL();
            //List<EmployeesNormalVacationsBalances> TempNormalVacationsBalancesList = new EmployeesNormalVacationsBalancesDAL().GetNormalVacationsBalances();
            List<EmployeesCodes> EmployeesCodesList = new EmployeesCodesDAL().GetEmployees().Where(x => x.IsActive).ToList();       //.Take(20)

            //List<int> AlreadyProcessedEmployeeCodeIDs = TempNormalVacationsBalancesList.Select(x => x.EmployeeCodeID).ToList();
            //EmployeesCodesList = EmployeesCodesList.Where(x => !AlreadyProcessedEmployeeCodeIDs.Contains(x.EmployeeCodeID)).ToList();

            try
            {
                foreach (EmployeesCodes EmployeeCode in EmployeesCodesList)     //.Take(100)    //.Where(e => e.EmployeeCodeNo == "10014358")
                {
                    // comment because dont remember why added following condition
                    //EmployeesCareersList = new EmployeesCareersHistoryDAL().GetEmployeesCareersHistoryByEmployeeCodeID(EmployeeCode.EmployeeCodeID);
                    //// we need employees with hiring record
                    //if (EmployeesCareersList != null && EmployeesCareersList.Where(x => x.CareerHistoryTypeID == (int)CareersHistoryTypesEnum.Hiring).ToList().Count > 0)
                    //{
                    index++;
                    //if (index < 113) continue;

                    NormalVacationBLL = new NormalVacationsBLL();
                    NormalVacationBLL = NormalVacationBLL.GetVacationBalances(EmployeeCode.EmployeeCodeID, 1310, 1, 1);

                    Balance = new EmployeesNormalVacationsBalances();
                    Balance.EmployeeCodeID = EmployeeCode.EmployeeCodeID;
                    Balance.ConsumedCurrentBalance = NormalVacationBLL.ConsumedCurrentBalance;
                    Balance.ConsumedOldBalance = NormalVacationBLL.ConsumedOldBalance;
                    Balance.DeservedCurrentBalance = NormalVacationBLL.DeservedCurrentBalance;
                    Balance.DeservedOldBalance = NormalVacationBLL.DeservedOldBalance;
                    Balance.ExpiredCurrentBalance = NormalVacationBLL.ExpiredCurrentBalance;
                    Balance.InAdvanceBalance = NormalVacationBLL.InAdvanceBalance;
                    Balance.InAdvConsumed = NormalVacationBLL.InAdvConsumed;
                    Balance.RemainingCurrentBalance = NormalVacationBLL.RemainingCurrentBalance;
                    Balance.RemainingOldBalance = NormalVacationBLL.RemainingOldBalance;
                    Balance.TotalAvailableVacationBalance = NormalVacationBLL.TotalAvailableVacationBalance;
                    Balance.TotalConsumedBalance = NormalVacationBLL.TotalConsumedBalance;
                    Balance.TotalDeservedBalance = NormalVacationBLL.TotalDeservedBalance;
                    Balance.TotalRemainingBalance = NormalVacationBLL.TotalRemainingBalance;

                    msg = string.Format("Index {0} Employee Code {1}", index, EmployeeCode.EmployeeCodeNo);
                    //BalanceList.Add(Balance);
                    new EmployeesNormalVacationsBalancesDAL().InsertUpdate(Balance);
                    //index++;
                    //}
                }
            }
            catch (Exception ex)
            {
                msg = msg + " Exception: " + ex.Message +
                   (ex.InnerException != null ? " Inner Exception : " + ex.InnerException.Message : "");
                throw new Exception(msg);
            }


            return true;
            //return new TempNormalVacationsBalancesDAL().Insert(TempNormalVacationBalanceList);
        }

        private bool IsNormalVacationForSomeTypes()
        {
            return this.NormalVacationType != null
                    && (this.NormalVacationType.NormalVacationTypeID == (int)NormalVacationsTypesEnum.NormalVacationForPatients || this.NormalVacationType.NormalVacationTypeID == (int)NormalVacationsTypesEnum.NormalVacationForBreakFromWork);
        }
    }
}