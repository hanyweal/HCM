//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using HCMDAL;
using HCMBLL.Enums;


namespace HCMBLL
{
    public class EmployeesExperiencesBLL : CommonEntity, IEntity
    {
        public virtual int EmployeeExperienceID
        {
            get;
            set;
        }
        public virtual int TotalYears
        {
            get;
            set;
        }
        public virtual int TotalMonths
        {
            get;
            set;
        }
        public virtual int TotalDays
        {
            get;
            set;
        }

        public virtual EmployeesCodesBLL EmployeesCodes
        {
            get;
            set;
        }
        public virtual Result Add()
        {
            try
            {
                Result result = null;

                EmployeesExperiences EmployeeExperience = new EmployeesExperiences()
                {
                    EmployeeCodeID = this.EmployeesCodes.EmployeeCodeID,
                    TotalYears = this.TotalYears,
                    TotalMonths = this.TotalMonths,
                    TotalDays = this.TotalDays,
                    CreatedDate = DateTime.Now,
                    CreatedBy = this.LoginIdentity.EmployeeCodeID
                };
                this.EmployeeExperienceID = new EmployeesExperiencesDAL().Insert(EmployeeExperience);
                result = new Result()
                {
                    Entity = this,
                    EnumType = typeof(EmployeesExperiencesValidationEnum),
                    EnumMember = EmployeesExperiencesValidationEnum.Done.ToString(),
                };
                return result;

            }
            catch
            {
                throw;
            }
        }

        public virtual Result Update()
        {
            try
            {
                Result result = null;

                EmployeesExperiences EmployeeExperience = new EmployeesExperiences()
                {
                    EmployeeExperienceID = this.EmployeeExperienceID,
                    EmployeeCodeID = this.EmployeesCodes.EmployeeCodeID,
                    TotalYears = this.TotalYears,
                    TotalMonths = this.TotalMonths,
                    TotalDays = this.TotalDays,
                    LastUpdatedDate = DateTime.Now,
                    LastUpdatedBy = this.LoginIdentity.EmployeeCodeID
                };
                this.EmployeeExperienceID = new EmployeesExperiencesDAL().Update(EmployeeExperience);
                result = new Result()
                {
                    Entity = this,
                    EnumType = typeof(EmployeesExperiencesValidationEnum),
                    EnumMember = EmployeesExperiencesValidationEnum.Done.ToString(),
                };
                return result;
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Remove(int EmployeeExperienceID)
        {
            try
            {
                new EmployeesExperiencesDAL().Delete(EmployeeExperienceID, this.LoginIdentity.EmployeeCodeID);
                Result result = new Result()
                {
                    //Entity = this,
                    EnumType = typeof(EmployeesExperiencesValidationEnum),
                    EnumMember = EmployeesExperiencesValidationEnum.Done.ToString(),
                };
                return result;
            }
            catch
            {
                throw;
            }
        }

        public virtual List<EmployeesExperiencesBLL> GetEmployeesExperiences()
        {
            try
            {
                List<EmployeesExperiences> EmployeesExperiencesList = new EmployeesExperiencesDAL().GetEmployeesExperiences();
                List<EmployeesExperiencesBLL> EmployeesExperiencesBLLList = new List<EmployeesExperiencesBLL>();
                foreach (var item in EmployeesExperiencesList)
                {
                    EmployeesExperiencesBLLList.Add(new EmployeesExperiencesBLL().MapEmployeeExperience(item));
                }
                return EmployeesExperiencesBLLList;
            }
            catch
            {
                throw;
            }
        }

        public virtual List<EmployeesExperiencesBLL> GetEmployeeExperiencesByEmployeeCodeID(int EmployeeCodeID)
        {
            try
            {
                List<EmployeesExperiences> EmployeesExperiencesList = new EmployeesExperiencesDAL().GetEmployeeExperiencesByEmployeeCodeID(EmployeeCodeID);
                List<EmployeesExperiencesBLL> EmployeesExperiencesBLLList = new List<EmployeesExperiencesBLL>();
                foreach (var item in EmployeesExperiencesList)
                {
                    EmployeesExperiencesBLLList.Add(new EmployeesExperiencesBLL().MapEmployeeExperience(item));
                }
                return EmployeesExperiencesBLLList;
            }
            catch
            {
                throw;
            }
        }

        public int GetTotalDaysByEmployeeExperience(EmployeesExperiences EmployeesExperience)
        {
            int TotalExperience = 0;
            decimal totExpWithDecimals = 0;
            //EmployeesExperiences EmployeesExperience = new EmployeesExperiencesDAL().GetEmployeeExperiencesByEmployeeCodeID(EmployeeCodeID).FirstOrDefault();

            if (EmployeesExperience != null && EmployeesExperience.EmployeeExperienceID > 0)
            {
                totExpWithDecimals = Convert.ToDecimal((EmployeesExperience.TotalYears * DaysCountInUmAlquraYear)) + (EmployeesExperience.TotalMonths * DaysCountInUmAlquraMonth) + Convert.ToDecimal(EmployeesExperience.TotalDays);
                TotalExperience = Convert.ToInt32(Math.Floor(totExpWithDecimals));
            }
                
            return TotalExperience;
        }

        public virtual EmployeesExperiencesBLL GetByEmployeeExperienceID(int EmployeeExperienceID)
        {
            try
            {
                EmployeesExperiences EmployeeExperience = new EmployeesExperiencesDAL().GetByEmployeeExperienceID(EmployeeExperienceID);
                return new EmployeesExperiencesBLL().MapEmployeeExperience(EmployeeExperience);
            }
            catch
            {
                throw;
            }
        }

        internal EmployeesExperiencesBLL MapEmployeeExperience(EmployeesExperiences EmployeeExperience)
        {
            try
            {
                EmployeesExperiencesBLL EmployeeExperienceBLL = null;
                if (EmployeeExperience != null)
                {
                    EmployeeExperienceBLL = new EmployeesExperiencesBLL()
                    {
                        EmployeeExperienceID = EmployeeExperience.EmployeeExperienceID,
                        TotalYears = EmployeeExperience.TotalYears,
                        TotalMonths = EmployeeExperience.TotalMonths,
                        TotalDays = EmployeeExperience.TotalDays,
                        EmployeesCodes = new EmployeesCodesBLL().MapEmployeeCode(EmployeeExperience.EmployeesCodes),
                        CreatedBy = new EmployeesCodesBLL().MapEmployeeCode(EmployeeExperience.CreatedByNav),
                        CreatedDate = EmployeeExperience.CreatedDate.Value
                    };
                }
                return EmployeeExperienceBLL;
            }
            catch
            {
                throw;
            }
        }
                
    }
}
