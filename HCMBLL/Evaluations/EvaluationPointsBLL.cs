using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class EvaluationPointsBLL : CommonEntity
    {
        public virtual int EvaluationPointID
        {
            get;
            set;
        }

        public virtual string Evaluation
        {
            get;
            set;
        }

        public virtual float EvaluationPoint
        {
            get;
            set;
        }

        public virtual bool IsExcludedFromPromotion
        {
            get;
            set;
        }

        public virtual List<EvaluationPointsBLL> GetEvaluationPoints()
        {
            List<EvaluationPoints> EvaluationPointsList = new EvaluationPointsDAL().GetEvaluationPoints();
            List<EvaluationPointsBLL> EvaluationPointsBLLList = new List<EvaluationPointsBLL>();
            if (EvaluationPointsList.Count > 0)
            {
                foreach (var item in EvaluationPointsList)
                    EvaluationPointsBLLList.Add(MapEvaluationPoint(item));
            }

            return EvaluationPointsBLLList;
        }

        public EvaluationPointsBLL GetByEvaluationPointID(int EvaluationPointID)
        {
            return MapEvaluationPoint(new EvaluationPointsDAL().GetByEvaluationPointID(EvaluationPointID));
        }

        public EvaluationPointsEnum[] GetEvalutionPointsExcludedFromPromotion()
        {
            List<EvaluationPointsBLL> EvaluationPointsBLLList = this.GetEvaluationPoints().Where(x => x.IsExcludedFromPromotion == true).ToList();
            EvaluationPointsEnum[] EvaluationPointsEnumList = new EvaluationPointsEnum[EvaluationPointsBLLList.Count];

            for (int i = 0; i < EvaluationPointsBLLList.Count; i++)
                EvaluationPointsEnumList[i] =(EvaluationPointsEnum)EvaluationPointsBLLList[i].EvaluationPointID;

            return EvaluationPointsEnumList;
        }

        internal EvaluationPointsBLL MapEvaluationPoint(EvaluationPoints item)
        {
            try
            {
                EvaluationPointsBLL EvaluationPointBLL = null;
                if (item != null)
                {
                    EvaluationPointBLL = new EvaluationPointsBLL()
                    {
                        EvaluationPointID = item.EvaluationPointID,
                        Evaluation = item.Evaluation,
                        EvaluationPoint = (float)item.EvaluationPoint,
                        IsExcludedFromPromotion = item.IsExcludedFromPromotion
                    };
                }
                return EvaluationPointBLL;
            }
            catch
            {
                throw;
            }
        }
    }
}


