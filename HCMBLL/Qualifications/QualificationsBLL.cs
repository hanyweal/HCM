using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HCMBLL
{
    public class QualificationsBLL : CommonEntity, IEntity
    {
        public virtual int QualificationID
        {
            get;
            set;
        }
        public virtual string QualificationName
        {
            get;
            set;
        }
        public virtual QualificationsDegreesBLL QualificationDegree
        {
            get;
            set;
        }
        public virtual decimal? DirectPoints
        {
            get;
            set;
        }
        public virtual decimal? IndirectPoints
        {
            get;
            set;
        }
        public List<QualificationsBLL> GetQualifications()
        {
            List<QualificationsBLL> QualificationsBLLList = new List<QualificationsBLL>();
            List<Qualifications> QualificationsList = new QualificationsDAL().GetQualifications();
            foreach (var Qualification in QualificationsList)
            {
                QualificationsBLLList.Add(this.MapQualification(Qualification));
            }
            return QualificationsBLLList;
        }
        public virtual QualificationsBLL GetByQualificationID(int QualificationID)
        {
            //return GetQualifications().SingleOrDefault(x => x.QualificationID.Equals(QualificationID));
            return this.MapQualification(new QualificationsDAL().GetByQualificationID(QualificationID));
        }
        //public List<QualificationsBLL> GetByQualificationDegreeID(int QualificationDegreeID)
        //{
        //    return GetQualifications().Where(x => x.QualificationDegree.QualificationDegreeID.Equals(QualificationDegreeID)).ToList();
        //}

        public List<QualificationsBLL> GetByQualificationDegreeID(int QualificationDegreeID)
        {
            List<QualificationsBLL> QualificationsBLLList = new List<QualificationsBLL>();
            List<Qualifications> QualificationsList = new QualificationsDAL().GetByQualificationDegreeID(QualificationDegreeID);
            foreach (var Qualification in QualificationsList)
            {
                QualificationsBLLList.Add(this.MapQualification(Qualification));
            }
            return QualificationsBLLList;
        }
        public virtual Result Add()
        {
            try
            {
                Result result = null;
                Qualifications Qualification = new Qualifications();
                Qualification.QualificationDegreeID = this.QualificationDegree.QualificationDegreeID;
                Qualification.QualificationName = this.QualificationName;  //QualificationDegreeID
                Qualification.DirectPoints = this.DirectPoints;
                Qualification.IndirectPoints = this.IndirectPoints;
                Qualification.CreatedDate = DateTime.Now;
                Qualification.CreatedBy = this.LoginIdentity.EmployeeCodeID;
                this.QualificationID = new QualificationsDAL().Insert(Qualification);

                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(QualificationsValidationEnum);
                result.EnumMember = QualificationsValidationEnum.Done.ToString();
                return result;
            }
            catch
            {
                throw;
            }
        }
        public virtual Result Update()
        {
            try
            {
                Result result = null;

                #region Validation for QualificationID EmployeeQualifications
                EmployeesQualificationsBLL EmployeeQualificationBLL = new EmployeesQualificationsBLL().GetByQualificationID(this.QualificationID);
                if (EmployeeQualificationBLL != null)
                {
                    if (EmployeeQualificationBLL.QualificationDegree.QualificationDegreeID != this.QualificationDegree.QualificationDegreeID)
                    {
                        result = new Result();
                        result.Entity = null;
                        result.EnumType = typeof(QualificationsValidationEnum);
                        result.EnumMember = QualificationsValidationEnum.RejectedBecauseOfThisQualificationExistsInEmployeesQualifications.ToString();
                        return result;
                    }
                }
                #endregion

                #region Validation for QualificationID JobsCategoriesQualifications
                JobsCategoriesQualificationsBLL JobsCategoriesQualificationsBLL = new JobsCategoriesQualificationsBLL().GetByQualificationID(this.QualificationID);
                if (JobsCategoriesQualificationsBLL != null)
                {
                    if (JobsCategoriesQualificationsBLL.QualificationDegree.QualificationDegreeID != this.QualificationDegree.QualificationDegreeID)
                    {
                        result = new Result();
                        result.Entity = null;
                        result.EnumType = typeof(QualificationsValidationEnum);
                        result.EnumMember = QualificationsValidationEnum.RejectedBecauseOfThisQualificationExistsInJobsCategoriesQualifications.ToString();
                        return result;
                    }
                }
                #endregion

                Qualifications Qualification = new Qualifications();
                Qualification.QualificationID = this.QualificationID;
                Qualification.QualificationDegreeID = this.QualificationDegree.QualificationDegreeID;
                Qualification.QualificationName = this.QualificationName;  //QualificationDegreeID
                Qualification.DirectPoints = this.DirectPoints;
                Qualification.IndirectPoints = this.IndirectPoints;
                Qualification.LastUpdatedDate = DateTime.Now;
                Qualification.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;

                int UpdateResult = new QualificationsDAL().Update(Qualification);
                if (UpdateResult != 0)
                {
                    result = new Result();
                    result.Entity = this;
                    result.EnumType = typeof(QualificationsValidationEnum);
                    result.EnumMember = QualificationsValidationEnum.Done.ToString();
                }

                return result;
            }
            catch
            {
                throw;
            }
        }
        public Result Remove(int QualificationID)
        {
            try
            {
                Result result = null;
                new QualificationsDAL().Delete(QualificationID, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(QualificationsValidationEnum),
                    EnumMember = QualificationsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }
        internal QualificationsBLL MapQualification(Qualifications item)
        {
            return item != null ?
                new QualificationsBLL()
                    {
                        QualificationID = item.QualificationID,
                        QualificationName = item.QualificationName,
                        DirectPoints = item.DirectPoints,
                        IndirectPoints = item.IndirectPoints,
                        QualificationDegree = item.QualificationDegreeID.HasValue ? new QualificationsDegreesBLL().MapQualificationDegree(item.QualificationsDegrees) : null,
                        CreatedBy = item.CreatedBy.HasValue ? new EmployeesCodesBLL().MapEmployeeCode(item.EmployeesCodes) : null,
                        CreatedDate = item.CreatedDate.Value
                    }
                : null;
        }
    }
}