using HCMBLL.Enums;
using HCMDAL;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace HCMBLL
{
    public class PromotionsPeriodsBLL : CommonEntity, IEntity
    {
        public int PromotionPeriodID { get; set; }

        public MaturityYearsBalancesBLL Year { get; set; }

        public PeriodsBLL Period { get; set; }

        public DateTime PromotionStartDate { get; set; }

        public DateTime PromotionEndDate { get; set; }

        public bool? IsActive { get; set; }

        public List<PromotionsPeriodsBLL> GetPeriodsByYear(int YearID)
        {
            try
            {
                List<PromotionsPeriodsBLL> PromotionPeriodBLLList = new List<PromotionsPeriodsBLL>();
                List<PromotionsPeriods> PromotionsPeriodsList = new PromotionsPeriodsDAL().GetByYearID(YearID);
                foreach (var PromotionPeriod in PromotionsPeriodsList)
                    PromotionPeriodBLLList.Add(MapPromotionPeriod(PromotionPeriod));

                return PromotionPeriodBLLList;
            }
            catch
            {
                throw;
            }
        }

        public PromotionsPeriodsBLL GetByYearAndPeriod(int YearID, int PeriodID)
        {
            try
            {
                PromotionsPeriodsBLL PromotionPeriodBLL = new PromotionsPeriodsBLL();
                PromotionsPeriods PromotionPeriod = new PromotionsPeriodsDAL().GetByYearIDPeriodID(YearID, PeriodID);
                PromotionPeriodBLL.PromotionPeriodID = PromotionPeriod.PromotionPeriodID;
                PromotionPeriodBLL.Period = new PeriodsBLL() { PeriodID = PromotionPeriod.PeriodID, PeriodName = PromotionPeriod.Periods.PeriodName };
                PromotionPeriodBLL.Year = new MaturityYearsBalancesBLL() { MaturityYearID = PromotionPeriod.YearID, MaturityYear = PromotionPeriod.MaturityYearsBalances != null ? PromotionPeriod.MaturityYearsBalances.MaturityYear : 0 };
                PromotionPeriodBLL.PromotionStartDate = PromotionPeriod.PromotionStartDate;
                PromotionPeriodBLL.PromotionEndDate = PromotionPeriod.PromotionEndDate;
                PromotionPeriodBLL.IsActive = PromotionPeriod.IsActive;
                return PromotionPeriodBLL;
            }
            catch
            {
                throw;
            }
        }

        public PromotionsPeriodsBLL GetByPromotionPeriodID(int PromotionPeriodID)
        {
            try
            {
                PromotionsPeriodsBLL PromotionPeriodBLL = new PromotionsPeriodsBLL();
                PromotionsPeriods PromotionPeriod = new PromotionsPeriodsDAL().GetByPromotionPeriodID(PromotionPeriodID);
                PromotionPeriodBLL.PromotionPeriodID = PromotionPeriod.PromotionPeriodID;
                PromotionPeriodBLL.Period = new PeriodsBLL() { PeriodID = PromotionPeriod.PeriodID, PeriodName = PromotionPeriod.Periods.PeriodName };
                PromotionPeriodBLL.Year = new MaturityYearsBalancesBLL() { MaturityYearID = PromotionPeriod.YearID, MaturityYear = PromotionPeriod.MaturityYearsBalances != null ? PromotionPeriod.MaturityYearsBalances.MaturityYear : 0 };
                PromotionPeriodBLL.PromotionStartDate = PromotionPeriod.PromotionStartDate;
                PromotionPeriodBLL.PromotionEndDate = PromotionPeriod.PromotionEndDate;
                PromotionPeriodBLL.IsActive = PromotionPeriod.IsActive;
                return PromotionPeriodBLL;
            }
            catch
            {
                throw;
            }
        }

        public List<PromotionsPeriodsBLL> GetPromotionsPeriods()
        {
            List<PromotionsPeriods> PromotionPeriodList = new PromotionsPeriodsDAL().GetPromotionsPeriods();
            List<PromotionsPeriodsBLL> PromotionPeriodBLLList = new List<PromotionsPeriodsBLL>();
            if (PromotionPeriodList.Count > 0)
                foreach (var item in PromotionPeriodList)
                {
                    PromotionPeriodBLLList.Add(new PromotionsPeriodsBLL().MapPromotionPeriod(item));
                }

            return PromotionPeriodBLLList;
        }

        public PromotionsPeriodsBLL MapPromotionPeriod(PromotionsPeriods PromotionPeriod)
        {
            return new PromotionsPeriodsBLL()
            {
                PromotionPeriodID = PromotionPeriod.PromotionPeriodID,
                Period = new PeriodsBLL() { PeriodID = PromotionPeriod.PeriodID, PeriodName = PromotionPeriod.Periods != null ? PromotionPeriod.Periods.PeriodName : "" },
                Year = new MaturityYearsBalancesBLL() { MaturityYearID = PromotionPeriod.YearID, MaturityYear = PromotionPeriod.MaturityYearsBalances != null ? PromotionPeriod.MaturityYearsBalances.MaturityYear : 0 },
                PromotionStartDate = PromotionPeriod.PromotionStartDate,
                PromotionEndDate = PromotionPeriod.PromotionEndDate,
                IsActive = PromotionPeriod.IsActive,
                CreatedBy = PromotionPeriod.CreatedBy.HasValue ? new EmployeesCodesBLL().MapEmployeeCode(PromotionPeriod.EmployeesCodes) : null,
                CreatedDate = PromotionPeriod.CreatedDate.Value
            };
        }

        public virtual Result Add()
        {
            try
            {
                Result result = null;

                #region Validation for dates
                if (this.PromotionStartDate > this.PromotionEndDate)
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(PromotionsPeriodsValidationEnum);
                    result.EnumMember = PromotionsPeriodsValidationEnum.RejectedBecauseOfPromotionStartDateIsGreaterThenPromotionEndDate.ToString();
                    return result;
                }
                #endregion

                #region Check if there is any active promotion period
                if (this.IsActive == true)
                {
                    List<PromotionsPeriodsBLL> ActivePromotionsPeriods = GetPromotionsPeriods().Where(x => x.IsActive == true).ToList();
                    if (ActivePromotionsPeriods.Count > 0)
                    {
                        result = new Result();
                        result.Entity = null;
                        result.EnumType = typeof(PromotionsPeriodsValidationEnum);
                        result.EnumMember = PromotionsPeriodsValidationEnum.RejectedBecauseOfAlreadyOnePromotionPeriodIsActive.ToString();
                        return result;
                    }
                }
                #endregion

                PromotionsPeriods PromotionPeriod = new PromotionsPeriods();
                PromotionPeriod.PeriodID = this.Period.PeriodID;
                PromotionPeriod.YearID = this.Year.MaturityYearID;
                PromotionPeriod.PromotionStartDate = this.PromotionStartDate;
                PromotionPeriod.PromotionEndDate = this.PromotionEndDate;
                PromotionPeriod.IsActive = this.IsActive;
                PromotionPeriod.CreatedDate = DateTime.Now;
                PromotionPeriod.CreatedBy = this.LoginIdentity.EmployeeCodeID;
                this.PromotionPeriodID = new PromotionsPeriodsDAL().Insert(PromotionPeriod);

                result = new Result();
                result.Entity = this;
                result.EnumType = typeof(PromotionsPeriodsValidationEnum);
                result.EnumMember = PromotionsPeriodsValidationEnum.Done.ToString();
                return result;
            }
            catch
            {
                throw;
            }
        }

        public virtual Result Update()
        {
            try
            {
                Result result = null;

                #region Validation for dates
                if (this.PromotionStartDate > this.PromotionEndDate)
                {
                    result = new Result();
                    result.Entity = null;
                    result.EnumType = typeof(PromotionsPeriodsValidationEnum);
                    result.EnumMember = PromotionsPeriodsValidationEnum.RejectedBecauseOfPromotionStartDateIsGreaterThenPromotionEndDate.ToString();
                    return result;
                }
                #endregion

                #region Check if there is any  promotion record exist
                List<PromotionsRecordsBLL> PromotionsRecords = new PromotionsRecordsBLL().GetPromotionsRecords().Where(x => x.PromotionPeriod.PromotionPeriodID.Equals(this.PromotionPeriodID)).ToList();
                if (PromotionsRecords.Count > 0)
                {
                    result = IsNoConflictWithPromotionStartAndPromotionEndDates(this.PromotionStartDate, this.PromotionEndDate);
                    if (result != null)
                    {
                        return result;
                    }
                }
                #endregion

                #region Check if there is any active promotion period
                if (this.IsActive == true)
                {
                    List<PromotionsPeriodsBLL> ActivePromotionsPeriods = GetPromotionsPeriods().Where(x => x.IsActive == true && x.PromotionPeriodID != this.PromotionPeriodID).ToList();
                    if (ActivePromotionsPeriods.Count > 0)
                    {
                        result = new Result();
                        result.Entity = null;
                        result.EnumType = typeof(PromotionsPeriodsValidationEnum);
                        result.EnumMember = PromotionsPeriodsValidationEnum.RejectedBecauseOfAlreadyOnePromotionPeriodIsActive.ToString();
                        return result;
                    }
                }
                #endregion

                PromotionsPeriods PromotionPeriod = new PromotionsPeriods();
                PromotionPeriod.PromotionPeriodID = this.PromotionPeriodID;
                PromotionPeriod.PeriodID = this.Period.PeriodID;
                PromotionPeriod.YearID = this.Year.MaturityYearID;
                PromotionPeriod.PromotionStartDate = this.PromotionStartDate;
                PromotionPeriod.PromotionEndDate = this.PromotionEndDate;
                PromotionPeriod.IsActive = this.IsActive;
                PromotionPeriod.LastUpdatedDate = DateTime.Now;
                PromotionPeriod.LastUpdatedBy = this.LoginIdentity.EmployeeCodeID;

                int UpdateResult = new PromotionsPeriodsDAL().Update(PromotionPeriod);
                if (UpdateResult != 0)
                {
                    result = new Result();
                    result.Entity = this;
                    result.EnumType = typeof(PromotionsPeriodsValidationEnum);
                    result.EnumMember = PromotionsPeriodsValidationEnum.Done.ToString();
                }

                return result;
            }
            catch
            {
                throw;
            }
        }

        public Result Remove(int PromotionPeriodID)
        {
            try
            {
                Result result = null;
                new PromotionsPeriodsDAL().Delete(PromotionPeriodID, this.LoginIdentity.EmployeeCodeID);
                return result = new Result()
                {
                    EnumType = typeof(PromotionsPeriodsValidationEnum),
                    EnumMember = PromotionsPeriodsValidationEnum.Done.ToString()
                };
            }
            catch
            {
                throw;
            }
        }

        internal Result IsNoConflictWithPromotionStartAndPromotionEndDates(DateTime StartDate, DateTime EndDate)
        {
            Result result = null;
            PromotionsPeriods PromotionPeriod = new PromotionsPeriodsDAL().GetByPromotionPeriodID(this.PromotionPeriodID);
            if (StartDate != PromotionPeriod.PromotionStartDate || EndDate != PromotionPeriod.PromotionEndDate)
            {
                result = new Result();
                result.EnumType = typeof(PromotionsPeriodsValidationEnum);
                result.EnumMember = PromotionsPeriodsValidationEnum.RejectedBecauseOfPromotionRecordExistWithThisPromotiosPeriodDates.ToString();
                return result;
            }
            return result;
        }

    }
}